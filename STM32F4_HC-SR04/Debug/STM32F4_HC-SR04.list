
STM32F4_HC-SR04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c60  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08007df0  08007df0  00017df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e94  08007e94  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  08007e94  08007e94  00017e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e9c  08007e9c  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e9c  08007e9c  00017e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ea0  08007ea0  00017ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  08007ea4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002014c  2**0
                  CONTENTS
 10 .bss          00001de8  2000014c  2000014c  0002014c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001f34  20001f34  0002014c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00010d49  00000000  00000000  000201bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002e31  00000000  00000000  00030f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f50  00000000  00000000  00033d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b91  00000000  00000000  00034c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000235e8  00000000  00000000  00035821  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000132c9  00000000  00000000  00058e09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cc100  00000000  00000000  0006c0d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004438  00000000  00000000  001381d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  0013c60c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000014c 	.word	0x2000014c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007dd8 	.word	0x08007dd8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000150 	.word	0x20000150
 80001cc:	08007dd8 	.word	0x08007dd8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000580:	f000 fa5a 	bl	8000a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000584:	f000 f824 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000588:	f000 f8b0 	bl	80006ec <MX_GPIO_Init>
  MX_TIM13_Init();
 800058c:	f000 f88a 	bl	80006a4 <MX_TIM13_Init>
  MX_USB_DEVICE_Init();
 8000590:	f006 fa64 	bl	8006a5c <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 8000594:	2201      	movs	r2, #1
 8000596:	2104      	movs	r1, #4
 8000598:	480b      	ldr	r0, [pc, #44]	; (80005c8 <main+0x4c>)
 800059a:	f000 fda9 	bl	80010f0 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 800059e:	2001      	movs	r0, #1
 80005a0:	f000 fabc 	bl	8000b1c <HAL_Delay>
	  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 80005a4:	2200      	movs	r2, #0
 80005a6:	2104      	movs	r1, #4
 80005a8:	4807      	ldr	r0, [pc, #28]	; (80005c8 <main+0x4c>)
 80005aa:	f000 fda1 	bl	80010f0 <HAL_GPIO_WritePin>
	  hcrs04.digital=HAL_GPIO_ReadPin(TRIG_GPIO_Port, TRIG_Pin);
 80005ae:	2104      	movs	r1, #4
 80005b0:	4805      	ldr	r0, [pc, #20]	; (80005c8 <main+0x4c>)
 80005b2:	f000 fd85 	bl	80010c0 <HAL_GPIO_ReadPin>
 80005b6:	4603      	mov	r3, r0
 80005b8:	461a      	mov	r2, r3
 80005ba:	4b04      	ldr	r3, [pc, #16]	; (80005cc <main+0x50>)
 80005bc:	721a      	strb	r2, [r3, #8]

	  HAL_Delay(100);
 80005be:	2064      	movs	r0, #100	; 0x64
 80005c0:	f000 faac 	bl	8000b1c <HAL_Delay>
	  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 80005c4:	e7e6      	b.n	8000594 <main+0x18>
 80005c6:	bf00      	nop
 80005c8:	40020000 	.word	0x40020000
 80005cc:	200001b0 	.word	0x200001b0

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b094      	sub	sp, #80	; 0x50
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 0320 	add.w	r3, r7, #32
 80005da:	2230      	movs	r2, #48	; 0x30
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f006 ff76 	bl	80074d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	f107 030c 	add.w	r3, r7, #12
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f4:	2300      	movs	r3, #0
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	4b28      	ldr	r3, [pc, #160]	; (800069c <SystemClock_Config+0xcc>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fc:	4a27      	ldr	r2, [pc, #156]	; (800069c <SystemClock_Config+0xcc>)
 80005fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000602:	6413      	str	r3, [r2, #64]	; 0x40
 8000604:	4b25      	ldr	r3, [pc, #148]	; (800069c <SystemClock_Config+0xcc>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000610:	2300      	movs	r3, #0
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	4b22      	ldr	r3, [pc, #136]	; (80006a0 <SystemClock_Config+0xd0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a21      	ldr	r2, [pc, #132]	; (80006a0 <SystemClock_Config+0xd0>)
 800061a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800061e:	6013      	str	r3, [r2, #0]
 8000620:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <SystemClock_Config+0xd0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800062c:	2301      	movs	r3, #1
 800062e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000630:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000634:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000636:	2302      	movs	r3, #2
 8000638:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800063a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800063e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000640:	2308      	movs	r3, #8
 8000642:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000644:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000648:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800064a:	2302      	movs	r3, #2
 800064c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800064e:	2307      	movs	r3, #7
 8000650:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000652:	f107 0320 	add.w	r3, r7, #32
 8000656:	4618      	mov	r0, r3
 8000658:	f001 fffa 	bl	8002650 <HAL_RCC_OscConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000662:	f000 f8eb 	bl	800083c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000666:	230f      	movs	r3, #15
 8000668:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066a:	2302      	movs	r3, #2
 800066c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000672:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000676:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000678:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800067c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800067e:	f107 030c 	add.w	r3, r7, #12
 8000682:	2105      	movs	r1, #5
 8000684:	4618      	mov	r0, r3
 8000686:	f002 fa5b 	bl	8002b40 <HAL_RCC_ClockConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000690:	f000 f8d4 	bl	800083c <Error_Handler>
  }
}
 8000694:	bf00      	nop
 8000696:	3750      	adds	r7, #80	; 0x50
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40023800 	.word	0x40023800
 80006a0:	40007000 	.word	0x40007000

080006a4 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80006a8:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <MX_TIM13_Init+0x40>)
 80006aa:	4a0f      	ldr	r2, [pc, #60]	; (80006e8 <MX_TIM13_Init+0x44>)
 80006ac:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 83;
 80006ae:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <MX_TIM13_Init+0x40>)
 80006b0:	2253      	movs	r2, #83	; 0x53
 80006b2:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006b4:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <MX_TIM13_Init+0x40>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 80006ba:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <MX_TIM13_Init+0x40>)
 80006bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006c0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006c2:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <MX_TIM13_Init+0x40>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_TIM13_Init+0x40>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80006ce:	4805      	ldr	r0, [pc, #20]	; (80006e4 <MX_TIM13_Init+0x40>)
 80006d0:	f002 fc2e 	bl	8002f30 <HAL_TIM_Base_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80006da:	f000 f8af 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000168 	.word	0x20000168
 80006e8:	40001c00 	.word	0x40001c00

080006ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b088      	sub	sp, #32
 80006f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f2:	f107 030c 	add.w	r3, r7, #12
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	4b23      	ldr	r3, [pc, #140]	; (8000794 <MX_GPIO_Init+0xa8>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a22      	ldr	r2, [pc, #136]	; (8000794 <MX_GPIO_Init+0xa8>)
 800070c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b20      	ldr	r3, [pc, #128]	; (8000794 <MX_GPIO_Init+0xa8>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <MX_GPIO_Init+0xa8>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a1b      	ldr	r2, [pc, #108]	; (8000794 <MX_GPIO_Init+0xa8>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b19      	ldr	r3, [pc, #100]	; (8000794 <MX_GPIO_Init+0xa8>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	2104      	movs	r1, #4
 800073e:	4816      	ldr	r0, [pc, #88]	; (8000798 <MX_GPIO_Init+0xac>)
 8000740:	f000 fcd6 	bl	80010f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ECHO_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 8000744:	2302      	movs	r3, #2
 8000746:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000748:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800074c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	4619      	mov	r1, r3
 8000758:	480f      	ldr	r0, [pc, #60]	; (8000798 <MX_GPIO_Init+0xac>)
 800075a:	f000 fb15 	bl	8000d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 800075e:	2304      	movs	r3, #4
 8000760:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000762:	2301      	movs	r3, #1
 8000764:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	2300      	movs	r3, #0
 800076c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	4619      	mov	r1, r3
 8000774:	4808      	ldr	r0, [pc, #32]	; (8000798 <MX_GPIO_Init+0xac>)
 8000776:	f000 fb07 	bl	8000d88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800077a:	2200      	movs	r2, #0
 800077c:	2100      	movs	r1, #0
 800077e:	2007      	movs	r0, #7
 8000780:	f000 facb 	bl	8000d1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000784:	2007      	movs	r0, #7
 8000786:	f000 fae4 	bl	8000d52 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800078a:	bf00      	nop
 800078c:	3720      	adds	r7, #32
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800
 8000798:	40020000 	.word	0x40020000

0800079c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==ECHO_Pin)
 80007a6:	88fb      	ldrh	r3, [r7, #6]
 80007a8:	2b02      	cmp	r3, #2
 80007aa:	d137      	bne.n	800081c <HAL_GPIO_EXTI_Callback+0x80>
	{
		if(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin)==GPIO_PIN_SET)
 80007ac:	2102      	movs	r1, #2
 80007ae:	481d      	ldr	r0, [pc, #116]	; (8000824 <HAL_GPIO_EXTI_Callback+0x88>)
 80007b0:	f000 fc86 	bl	80010c0 <HAL_GPIO_ReadPin>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d107      	bne.n	80007ca <HAL_GPIO_EXTI_Callback+0x2e>
		{
			__HAL_TIM_SET_COUNTER(&htim13,0);
 80007ba:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <HAL_GPIO_EXTI_Callback+0x8c>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	2200      	movs	r2, #0
 80007c0:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start(&htim13);
 80007c2:	4819      	ldr	r0, [pc, #100]	; (8000828 <HAL_GPIO_EXTI_Callback+0x8c>)
 80007c4:	f002 fc04 	bl	8002fd0 <HAL_TIM_Base_Start>
				CDC_Transmit_FS((uint8_t*)veri, strlen(veri));
			}

		}
	}
}
 80007c8:	e028      	b.n	800081c <HAL_GPIO_EXTI_Callback+0x80>
			HAL_TIM_Base_Stop(&htim13);
 80007ca:	4817      	ldr	r0, [pc, #92]	; (8000828 <HAL_GPIO_EXTI_Callback+0x8c>)
 80007cc:	f002 fc68 	bl	80030a0 <HAL_TIM_Base_Stop>
			hcrs04.us=__HAL_TIM_GetCounter(&htim13);
 80007d0:	4b15      	ldr	r3, [pc, #84]	; (8000828 <HAL_GPIO_EXTI_Callback+0x8c>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007d6:	4a15      	ldr	r2, [pc, #84]	; (800082c <HAL_GPIO_EXTI_Callback+0x90>)
 80007d8:	6013      	str	r3, [r2, #0]
			hcrs04.distance=(hcrs04.us*10)/58;
 80007da:	4b14      	ldr	r3, [pc, #80]	; (800082c <HAL_GPIO_EXTI_Callback+0x90>)
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	4613      	mov	r3, r2
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	4413      	add	r3, r2
 80007e4:	005b      	lsls	r3, r3, #1
 80007e6:	461a      	mov	r2, r3
 80007e8:	4b11      	ldr	r3, [pc, #68]	; (8000830 <HAL_GPIO_EXTI_Callback+0x94>)
 80007ea:	fba3 2302 	umull	r2, r3, r3, r2
 80007ee:	095b      	lsrs	r3, r3, #5
 80007f0:	4a0e      	ldr	r2, [pc, #56]	; (800082c <HAL_GPIO_EXTI_Callback+0x90>)
 80007f2:	6053      	str	r3, [r2, #4]
			if(hcrs04.distance<150)
 80007f4:	4b0d      	ldr	r3, [pc, #52]	; (800082c <HAL_GPIO_EXTI_Callback+0x90>)
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	2b95      	cmp	r3, #149	; 0x95
 80007fa:	d80f      	bhi.n	800081c <HAL_GPIO_EXTI_Callback+0x80>
				sprintf(veri, "Uyari Mesafe: %d mm\n", hcrs04.distance);
 80007fc:	4b0b      	ldr	r3, [pc, #44]	; (800082c <HAL_GPIO_EXTI_Callback+0x90>)
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	461a      	mov	r2, r3
 8000802:	490c      	ldr	r1, [pc, #48]	; (8000834 <HAL_GPIO_EXTI_Callback+0x98>)
 8000804:	480c      	ldr	r0, [pc, #48]	; (8000838 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000806:	f006 fe43 	bl	8007490 <siprintf>
				CDC_Transmit_FS((uint8_t*)veri, strlen(veri));
 800080a:	480b      	ldr	r0, [pc, #44]	; (8000838 <HAL_GPIO_EXTI_Callback+0x9c>)
 800080c:	f7ff fce0 	bl	80001d0 <strlen>
 8000810:	4603      	mov	r3, r0
 8000812:	b29b      	uxth	r3, r3
 8000814:	4619      	mov	r1, r3
 8000816:	4808      	ldr	r0, [pc, #32]	; (8000838 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000818:	f006 f9de 	bl	8006bd8 <CDC_Transmit_FS>
}
 800081c:	bf00      	nop
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40020000 	.word	0x40020000
 8000828:	20000168 	.word	0x20000168
 800082c:	200001b0 	.word	0x200001b0
 8000830:	8d3dcb09 	.word	0x8d3dcb09
 8000834:	08007df0 	.word	0x08007df0
 8000838:	200001bc 	.word	0x200001bc

0800083c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000840:	b672      	cpsid	i
}
 8000842:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000844:	e7fe      	b.n	8000844 <Error_Handler+0x8>
	...

08000848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	4b10      	ldr	r3, [pc, #64]	; (8000894 <HAL_MspInit+0x4c>)
 8000854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000856:	4a0f      	ldr	r2, [pc, #60]	; (8000894 <HAL_MspInit+0x4c>)
 8000858:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800085c:	6453      	str	r3, [r2, #68]	; 0x44
 800085e:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <HAL_MspInit+0x4c>)
 8000860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	603b      	str	r3, [r7, #0]
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <HAL_MspInit+0x4c>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000872:	4a08      	ldr	r2, [pc, #32]	; (8000894 <HAL_MspInit+0x4c>)
 8000874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000878:	6413      	str	r3, [r2, #64]	; 0x40
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <HAL_MspInit+0x4c>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000886:	2007      	movs	r0, #7
 8000888:	f000 fa3c 	bl	8000d04 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088c:	bf00      	nop
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40023800 	.word	0x40023800

08000898 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a0b      	ldr	r2, [pc, #44]	; (80008d4 <HAL_TIM_Base_MspInit+0x3c>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d10d      	bne.n	80008c6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <HAL_TIM_Base_MspInit+0x40>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b2:	4a09      	ldr	r2, [pc, #36]	; (80008d8 <HAL_TIM_Base_MspInit+0x40>)
 80008b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b8:	6413      	str	r3, [r2, #64]	; 0x40
 80008ba:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <HAL_TIM_Base_MspInit+0x40>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80008c6:	bf00      	nop
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	40001c00 	.word	0x40001c00
 80008d8:	40023800 	.word	0x40023800

080008dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <NMI_Handler+0x4>

080008e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e6:	e7fe      	b.n	80008e6 <HardFault_Handler+0x4>

080008e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008ec:	e7fe      	b.n	80008ec <MemManage_Handler+0x4>

080008ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f2:	e7fe      	b.n	80008f2 <BusFault_Handler+0x4>

080008f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <UsageFault_Handler+0x4>

080008fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr

08000916 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000928:	f000 f8d8 	bl	8000adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}

08000930 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ECHO_Pin);
 8000934:	2002      	movs	r0, #2
 8000936:	f000 fbf5 	bl	8001124 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
	...

08000940 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000944:	4802      	ldr	r0, [pc, #8]	; (8000950 <OTG_FS_IRQHandler+0x10>)
 8000946:	f000 fd55 	bl	80013f4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	200016c0 	.word	0x200016c0

08000954 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b086      	sub	sp, #24
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800095c:	4a14      	ldr	r2, [pc, #80]	; (80009b0 <_sbrk+0x5c>)
 800095e:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <_sbrk+0x60>)
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000968:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <_sbrk+0x64>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d102      	bne.n	8000976 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000970:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <_sbrk+0x64>)
 8000972:	4a12      	ldr	r2, [pc, #72]	; (80009bc <_sbrk+0x68>)
 8000974:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000976:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <_sbrk+0x64>)
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4413      	add	r3, r2
 800097e:	693a      	ldr	r2, [r7, #16]
 8000980:	429a      	cmp	r2, r3
 8000982:	d207      	bcs.n	8000994 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000984:	f006 fdac 	bl	80074e0 <__errno>
 8000988:	4603      	mov	r3, r0
 800098a:	220c      	movs	r2, #12
 800098c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800098e:	f04f 33ff 	mov.w	r3, #4294967295
 8000992:	e009      	b.n	80009a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000994:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <_sbrk+0x64>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800099a:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <_sbrk+0x64>)
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4413      	add	r3, r2
 80009a2:	4a05      	ldr	r2, [pc, #20]	; (80009b8 <_sbrk+0x64>)
 80009a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009a6:	68fb      	ldr	r3, [r7, #12]
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3718      	adds	r7, #24
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20020000 	.word	0x20020000
 80009b4:	00000400 	.word	0x00000400
 80009b8:	200001d8 	.word	0x200001d8
 80009bc:	20001f38 	.word	0x20001f38

080009c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <SystemInit+0x20>)
 80009c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ca:	4a05      	ldr	r2, [pc, #20]	; (80009e0 <SystemInit+0x20>)
 80009cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009e8:	480d      	ldr	r0, [pc, #52]	; (8000a20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009ea:	490e      	ldr	r1, [pc, #56]	; (8000a24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009ec:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f0:	e002      	b.n	80009f8 <LoopCopyDataInit>

080009f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f6:	3304      	adds	r3, #4

080009f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009fc:	d3f9      	bcc.n	80009f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fe:	4a0b      	ldr	r2, [pc, #44]	; (8000a2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a00:	4c0b      	ldr	r4, [pc, #44]	; (8000a30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a04:	e001      	b.n	8000a0a <LoopFillZerobss>

08000a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a08:	3204      	adds	r2, #4

08000a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a0c:	d3fb      	bcc.n	8000a06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a0e:	f7ff ffd7 	bl	80009c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a12:	f006 fd6b 	bl	80074ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a16:	f7ff fdb1 	bl	800057c <main>
  bx  lr    
 8000a1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a24:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8000a28:	08007ea4 	.word	0x08007ea4
  ldr r2, =_sbss
 8000a2c:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000a30:	20001f34 	.word	0x20001f34

08000a34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a34:	e7fe      	b.n	8000a34 <ADC_IRQHandler>
	...

08000a38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a3c:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <HAL_Init+0x40>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a0d      	ldr	r2, [pc, #52]	; (8000a78 <HAL_Init+0x40>)
 8000a42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a48:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <HAL_Init+0x40>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a0a      	ldr	r2, [pc, #40]	; (8000a78 <HAL_Init+0x40>)
 8000a4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a54:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <HAL_Init+0x40>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a07      	ldr	r2, [pc, #28]	; (8000a78 <HAL_Init+0x40>)
 8000a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a60:	2003      	movs	r0, #3
 8000a62:	f000 f94f 	bl	8000d04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a66:	2000      	movs	r0, #0
 8000a68:	f000 f808 	bl	8000a7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a6c:	f7ff feec 	bl	8000848 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40023c00 	.word	0x40023c00

08000a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <HAL_InitTick+0x54>)
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <HAL_InitTick+0x58>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 f967 	bl	8000d6e <HAL_SYSTICK_Config>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e00e      	b.n	8000ac8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2b0f      	cmp	r3, #15
 8000aae:	d80a      	bhi.n	8000ac6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	6879      	ldr	r1, [r7, #4]
 8000ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab8:	f000 f92f 	bl	8000d1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000abc:	4a06      	ldr	r2, [pc, #24]	; (8000ad8 <HAL_InitTick+0x5c>)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	e000      	b.n	8000ac8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ac6:	2301      	movs	r3, #1
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20000000 	.word	0x20000000
 8000ad4:	20000008 	.word	0x20000008
 8000ad8:	20000004 	.word	0x20000004

08000adc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <HAL_IncTick+0x20>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_IncTick+0x24>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4413      	add	r3, r2
 8000aec:	4a04      	ldr	r2, [pc, #16]	; (8000b00 <HAL_IncTick+0x24>)
 8000aee:	6013      	str	r3, [r2, #0]
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	20000008 	.word	0x20000008
 8000b00:	200001dc 	.word	0x200001dc

08000b04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  return uwTick;
 8000b08:	4b03      	ldr	r3, [pc, #12]	; (8000b18 <HAL_GetTick+0x14>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	200001dc 	.word	0x200001dc

08000b1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b24:	f7ff ffee 	bl	8000b04 <HAL_GetTick>
 8000b28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b34:	d005      	beq.n	8000b42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b36:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <HAL_Delay+0x44>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	4413      	add	r3, r2
 8000b40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b42:	bf00      	nop
 8000b44:	f7ff ffde 	bl	8000b04 <HAL_GetTick>
 8000b48:	4602      	mov	r2, r0
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	68fa      	ldr	r2, [r7, #12]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d8f7      	bhi.n	8000b44 <HAL_Delay+0x28>
  {
  }
}
 8000b54:	bf00      	nop
 8000b56:	bf00      	nop
 8000b58:	3710      	adds	r7, #16
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000008 	.word	0x20000008

08000b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f003 0307 	and.w	r3, r3, #7
 8000b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b74:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b7a:	68ba      	ldr	r2, [r7, #8]
 8000b7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b80:	4013      	ands	r3, r2
 8000b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b96:	4a04      	ldr	r2, [pc, #16]	; (8000ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	60d3      	str	r3, [r2, #12]
}
 8000b9c:	bf00      	nop
 8000b9e:	3714      	adds	r7, #20
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb0:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	0a1b      	lsrs	r3, r3, #8
 8000bb6:	f003 0307 	and.w	r3, r3, #7
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	db0b      	blt.n	8000bf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	f003 021f 	and.w	r2, r3, #31
 8000be0:	4907      	ldr	r1, [pc, #28]	; (8000c00 <__NVIC_EnableIRQ+0x38>)
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	095b      	lsrs	r3, r3, #5
 8000be8:	2001      	movs	r0, #1
 8000bea:	fa00 f202 	lsl.w	r2, r0, r2
 8000bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bf2:	bf00      	nop
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	e000e100 	.word	0xe000e100

08000c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	6039      	str	r1, [r7, #0]
 8000c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	db0a      	blt.n	8000c2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	b2da      	uxtb	r2, r3
 8000c1c:	490c      	ldr	r1, [pc, #48]	; (8000c50 <__NVIC_SetPriority+0x4c>)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	0112      	lsls	r2, r2, #4
 8000c24:	b2d2      	uxtb	r2, r2
 8000c26:	440b      	add	r3, r1
 8000c28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c2c:	e00a      	b.n	8000c44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	4908      	ldr	r1, [pc, #32]	; (8000c54 <__NVIC_SetPriority+0x50>)
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	f003 030f 	and.w	r3, r3, #15
 8000c3a:	3b04      	subs	r3, #4
 8000c3c:	0112      	lsls	r2, r2, #4
 8000c3e:	b2d2      	uxtb	r2, r2
 8000c40:	440b      	add	r3, r1
 8000c42:	761a      	strb	r2, [r3, #24]
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	e000e100 	.word	0xe000e100
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b089      	sub	sp, #36	; 0x24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	f1c3 0307 	rsb	r3, r3, #7
 8000c72:	2b04      	cmp	r3, #4
 8000c74:	bf28      	it	cs
 8000c76:	2304      	movcs	r3, #4
 8000c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	3304      	adds	r3, #4
 8000c7e:	2b06      	cmp	r3, #6
 8000c80:	d902      	bls.n	8000c88 <NVIC_EncodePriority+0x30>
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	3b03      	subs	r3, #3
 8000c86:	e000      	b.n	8000c8a <NVIC_EncodePriority+0x32>
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	43da      	mvns	r2, r3
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	401a      	ands	r2, r3
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8000caa:	43d9      	mvns	r1, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb0:	4313      	orrs	r3, r2
         );
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3724      	adds	r7, #36	; 0x24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
	...

08000cc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cd0:	d301      	bcc.n	8000cd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e00f      	b.n	8000cf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cd6:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <SysTick_Config+0x40>)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cde:	210f      	movs	r1, #15
 8000ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce4:	f7ff ff8e 	bl	8000c04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce8:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <SysTick_Config+0x40>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cee:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <SysTick_Config+0x40>)
 8000cf0:	2207      	movs	r2, #7
 8000cf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	e000e010 	.word	0xe000e010

08000d04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f7ff ff29 	bl	8000b64 <__NVIC_SetPriorityGrouping>
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b086      	sub	sp, #24
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	4603      	mov	r3, r0
 8000d22:	60b9      	str	r1, [r7, #8]
 8000d24:	607a      	str	r2, [r7, #4]
 8000d26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d2c:	f7ff ff3e 	bl	8000bac <__NVIC_GetPriorityGrouping>
 8000d30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	68b9      	ldr	r1, [r7, #8]
 8000d36:	6978      	ldr	r0, [r7, #20]
 8000d38:	f7ff ff8e 	bl	8000c58 <NVIC_EncodePriority>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d42:	4611      	mov	r1, r2
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff ff5d 	bl	8000c04 <__NVIC_SetPriority>
}
 8000d4a:	bf00      	nop
 8000d4c:	3718      	adds	r7, #24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b082      	sub	sp, #8
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	4603      	mov	r3, r0
 8000d5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff ff31 	bl	8000bc8 <__NVIC_EnableIRQ>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b082      	sub	sp, #8
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f7ff ffa2 	bl	8000cc0 <SysTick_Config>
 8000d7c:	4603      	mov	r3, r0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b089      	sub	sp, #36	; 0x24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d96:	2300      	movs	r3, #0
 8000d98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61fb      	str	r3, [r7, #28]
 8000da2:	e16b      	b.n	800107c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000da4:	2201      	movs	r2, #1
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	697a      	ldr	r2, [r7, #20]
 8000db4:	4013      	ands	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	f040 815a 	bne.w	8001076 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f003 0303 	and.w	r3, r3, #3
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d005      	beq.n	8000dda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d130      	bne.n	8000e3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	2203      	movs	r2, #3
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43db      	mvns	r3, r3
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	4013      	ands	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	68da      	ldr	r2, [r3, #12]
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e10:	2201      	movs	r2, #1
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	091b      	lsrs	r3, r3, #4
 8000e26:	f003 0201 	and.w	r2, r3, #1
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f003 0303 	and.w	r3, r3, #3
 8000e44:	2b03      	cmp	r3, #3
 8000e46:	d017      	beq.n	8000e78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	2203      	movs	r2, #3
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	689a      	ldr	r2, [r3, #8]
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 0303 	and.w	r3, r3, #3
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d123      	bne.n	8000ecc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	08da      	lsrs	r2, r3, #3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3208      	adds	r2, #8
 8000e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	f003 0307 	and.w	r3, r3, #7
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	220f      	movs	r2, #15
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	691a      	ldr	r2, [r3, #16]
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	08da      	lsrs	r2, r3, #3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3208      	adds	r2, #8
 8000ec6:	69b9      	ldr	r1, [r7, #24]
 8000ec8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	2203      	movs	r2, #3
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 0203 	and.w	r2, r3, #3
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	f000 80b4 	beq.w	8001076 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	4b60      	ldr	r3, [pc, #384]	; (8001094 <HAL_GPIO_Init+0x30c>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	4a5f      	ldr	r2, [pc, #380]	; (8001094 <HAL_GPIO_Init+0x30c>)
 8000f18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f1e:	4b5d      	ldr	r3, [pc, #372]	; (8001094 <HAL_GPIO_Init+0x30c>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f2a:	4a5b      	ldr	r2, [pc, #364]	; (8001098 <HAL_GPIO_Init+0x310>)
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	089b      	lsrs	r3, r3, #2
 8000f30:	3302      	adds	r3, #2
 8000f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	f003 0303 	and.w	r3, r3, #3
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	220f      	movs	r2, #15
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43db      	mvns	r3, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a52      	ldr	r2, [pc, #328]	; (800109c <HAL_GPIO_Init+0x314>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d02b      	beq.n	8000fae <HAL_GPIO_Init+0x226>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a51      	ldr	r2, [pc, #324]	; (80010a0 <HAL_GPIO_Init+0x318>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d025      	beq.n	8000faa <HAL_GPIO_Init+0x222>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a50      	ldr	r2, [pc, #320]	; (80010a4 <HAL_GPIO_Init+0x31c>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d01f      	beq.n	8000fa6 <HAL_GPIO_Init+0x21e>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a4f      	ldr	r2, [pc, #316]	; (80010a8 <HAL_GPIO_Init+0x320>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d019      	beq.n	8000fa2 <HAL_GPIO_Init+0x21a>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a4e      	ldr	r2, [pc, #312]	; (80010ac <HAL_GPIO_Init+0x324>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d013      	beq.n	8000f9e <HAL_GPIO_Init+0x216>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a4d      	ldr	r2, [pc, #308]	; (80010b0 <HAL_GPIO_Init+0x328>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d00d      	beq.n	8000f9a <HAL_GPIO_Init+0x212>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a4c      	ldr	r2, [pc, #304]	; (80010b4 <HAL_GPIO_Init+0x32c>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d007      	beq.n	8000f96 <HAL_GPIO_Init+0x20e>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a4b      	ldr	r2, [pc, #300]	; (80010b8 <HAL_GPIO_Init+0x330>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d101      	bne.n	8000f92 <HAL_GPIO_Init+0x20a>
 8000f8e:	2307      	movs	r3, #7
 8000f90:	e00e      	b.n	8000fb0 <HAL_GPIO_Init+0x228>
 8000f92:	2308      	movs	r3, #8
 8000f94:	e00c      	b.n	8000fb0 <HAL_GPIO_Init+0x228>
 8000f96:	2306      	movs	r3, #6
 8000f98:	e00a      	b.n	8000fb0 <HAL_GPIO_Init+0x228>
 8000f9a:	2305      	movs	r3, #5
 8000f9c:	e008      	b.n	8000fb0 <HAL_GPIO_Init+0x228>
 8000f9e:	2304      	movs	r3, #4
 8000fa0:	e006      	b.n	8000fb0 <HAL_GPIO_Init+0x228>
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e004      	b.n	8000fb0 <HAL_GPIO_Init+0x228>
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	e002      	b.n	8000fb0 <HAL_GPIO_Init+0x228>
 8000faa:	2301      	movs	r3, #1
 8000fac:	e000      	b.n	8000fb0 <HAL_GPIO_Init+0x228>
 8000fae:	2300      	movs	r3, #0
 8000fb0:	69fa      	ldr	r2, [r7, #28]
 8000fb2:	f002 0203 	and.w	r2, r2, #3
 8000fb6:	0092      	lsls	r2, r2, #2
 8000fb8:	4093      	lsls	r3, r2
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fc0:	4935      	ldr	r1, [pc, #212]	; (8001098 <HAL_GPIO_Init+0x310>)
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	089b      	lsrs	r3, r3, #2
 8000fc6:	3302      	adds	r3, #2
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fce:	4b3b      	ldr	r3, [pc, #236]	; (80010bc <HAL_GPIO_Init+0x334>)
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ff2:	4a32      	ldr	r2, [pc, #200]	; (80010bc <HAL_GPIO_Init+0x334>)
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ff8:	4b30      	ldr	r3, [pc, #192]	; (80010bc <HAL_GPIO_Init+0x334>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	43db      	mvns	r3, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d003      	beq.n	800101c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	4313      	orrs	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800101c:	4a27      	ldr	r2, [pc, #156]	; (80010bc <HAL_GPIO_Init+0x334>)
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001022:	4b26      	ldr	r3, [pc, #152]	; (80010bc <HAL_GPIO_Init+0x334>)
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	43db      	mvns	r3, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4013      	ands	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d003      	beq.n	8001046 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001046:	4a1d      	ldr	r2, [pc, #116]	; (80010bc <HAL_GPIO_Init+0x334>)
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800104c:	4b1b      	ldr	r3, [pc, #108]	; (80010bc <HAL_GPIO_Init+0x334>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	43db      	mvns	r3, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d003      	beq.n	8001070 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	4313      	orrs	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001070:	4a12      	ldr	r2, [pc, #72]	; (80010bc <HAL_GPIO_Init+0x334>)
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3301      	adds	r3, #1
 800107a:	61fb      	str	r3, [r7, #28]
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	2b0f      	cmp	r3, #15
 8001080:	f67f ae90 	bls.w	8000da4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001084:	bf00      	nop
 8001086:	bf00      	nop
 8001088:	3724      	adds	r7, #36	; 0x24
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	40023800 	.word	0x40023800
 8001098:	40013800 	.word	0x40013800
 800109c:	40020000 	.word	0x40020000
 80010a0:	40020400 	.word	0x40020400
 80010a4:	40020800 	.word	0x40020800
 80010a8:	40020c00 	.word	0x40020c00
 80010ac:	40021000 	.word	0x40021000
 80010b0:	40021400 	.word	0x40021400
 80010b4:	40021800 	.word	0x40021800
 80010b8:	40021c00 	.word	0x40021c00
 80010bc:	40013c00 	.word	0x40013c00

080010c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	460b      	mov	r3, r1
 80010ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	691a      	ldr	r2, [r3, #16]
 80010d0:	887b      	ldrh	r3, [r7, #2]
 80010d2:	4013      	ands	r3, r2
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d002      	beq.n	80010de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010d8:	2301      	movs	r3, #1
 80010da:	73fb      	strb	r3, [r7, #15]
 80010dc:	e001      	b.n	80010e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010de:	2300      	movs	r3, #0
 80010e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3714      	adds	r7, #20
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	807b      	strh	r3, [r7, #2]
 80010fc:	4613      	mov	r3, r2
 80010fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001100:	787b      	ldrb	r3, [r7, #1]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001106:	887a      	ldrh	r2, [r7, #2]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800110c:	e003      	b.n	8001116 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800110e:	887b      	ldrh	r3, [r7, #2]
 8001110:	041a      	lsls	r2, r3, #16
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	619a      	str	r2, [r3, #24]
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
	...

08001124 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800112e:	4b08      	ldr	r3, [pc, #32]	; (8001150 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001130:	695a      	ldr	r2, [r3, #20]
 8001132:	88fb      	ldrh	r3, [r7, #6]
 8001134:	4013      	ands	r3, r2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d006      	beq.n	8001148 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800113a:	4a05      	ldr	r2, [pc, #20]	; (8001150 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800113c:	88fb      	ldrh	r3, [r7, #6]
 800113e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001140:	88fb      	ldrh	r3, [r7, #6]
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff fb2a 	bl	800079c <HAL_GPIO_EXTI_Callback>
  }
}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40013c00 	.word	0x40013c00

08001154 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001156:	b08f      	sub	sp, #60	; 0x3c
 8001158:	af0a      	add	r7, sp, #40	; 0x28
 800115a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d101      	bne.n	8001166 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e10f      	b.n	8001386 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001172:	b2db      	uxtb	r3, r3
 8001174:	2b00      	cmp	r3, #0
 8001176:	d106      	bne.n	8001186 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2200      	movs	r2, #0
 800117c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f005 fe71 	bl	8006e68 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2203      	movs	r2, #3
 800118a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001196:	2b00      	cmp	r3, #0
 8001198:	d102      	bne.n	80011a0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f002 f958 	bl	800345a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	603b      	str	r3, [r7, #0]
 80011b0:	687e      	ldr	r6, [r7, #4]
 80011b2:	466d      	mov	r5, sp
 80011b4:	f106 0410 	add.w	r4, r6, #16
 80011b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80011c8:	1d33      	adds	r3, r6, #4
 80011ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011cc:	6838      	ldr	r0, [r7, #0]
 80011ce:	f002 f82f 	bl	8003230 <USB_CoreInit>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d005      	beq.n	80011e4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2202      	movs	r2, #2
 80011dc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e0d0      	b.n	8001386 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f002 f946 	bl	800347c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011f0:	2300      	movs	r3, #0
 80011f2:	73fb      	strb	r3, [r7, #15]
 80011f4:	e04a      	b.n	800128c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80011f6:	7bfa      	ldrb	r2, [r7, #15]
 80011f8:	6879      	ldr	r1, [r7, #4]
 80011fa:	4613      	mov	r3, r2
 80011fc:	00db      	lsls	r3, r3, #3
 80011fe:	4413      	add	r3, r2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	440b      	add	r3, r1
 8001204:	333d      	adds	r3, #61	; 0x3d
 8001206:	2201      	movs	r2, #1
 8001208:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800120a:	7bfa      	ldrb	r2, [r7, #15]
 800120c:	6879      	ldr	r1, [r7, #4]
 800120e:	4613      	mov	r3, r2
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	4413      	add	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	440b      	add	r3, r1
 8001218:	333c      	adds	r3, #60	; 0x3c
 800121a:	7bfa      	ldrb	r2, [r7, #15]
 800121c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800121e:	7bfa      	ldrb	r2, [r7, #15]
 8001220:	7bfb      	ldrb	r3, [r7, #15]
 8001222:	b298      	uxth	r0, r3
 8001224:	6879      	ldr	r1, [r7, #4]
 8001226:	4613      	mov	r3, r2
 8001228:	00db      	lsls	r3, r3, #3
 800122a:	4413      	add	r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	440b      	add	r3, r1
 8001230:	3344      	adds	r3, #68	; 0x44
 8001232:	4602      	mov	r2, r0
 8001234:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001236:	7bfa      	ldrb	r2, [r7, #15]
 8001238:	6879      	ldr	r1, [r7, #4]
 800123a:	4613      	mov	r3, r2
 800123c:	00db      	lsls	r3, r3, #3
 800123e:	4413      	add	r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	440b      	add	r3, r1
 8001244:	3340      	adds	r3, #64	; 0x40
 8001246:	2200      	movs	r2, #0
 8001248:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800124a:	7bfa      	ldrb	r2, [r7, #15]
 800124c:	6879      	ldr	r1, [r7, #4]
 800124e:	4613      	mov	r3, r2
 8001250:	00db      	lsls	r3, r3, #3
 8001252:	4413      	add	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	440b      	add	r3, r1
 8001258:	3348      	adds	r3, #72	; 0x48
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800125e:	7bfa      	ldrb	r2, [r7, #15]
 8001260:	6879      	ldr	r1, [r7, #4]
 8001262:	4613      	mov	r3, r2
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	4413      	add	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	440b      	add	r3, r1
 800126c:	334c      	adds	r3, #76	; 0x4c
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001272:	7bfa      	ldrb	r2, [r7, #15]
 8001274:	6879      	ldr	r1, [r7, #4]
 8001276:	4613      	mov	r3, r2
 8001278:	00db      	lsls	r3, r3, #3
 800127a:	4413      	add	r3, r2
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	440b      	add	r3, r1
 8001280:	3354      	adds	r3, #84	; 0x54
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001286:	7bfb      	ldrb	r3, [r7, #15]
 8001288:	3301      	adds	r3, #1
 800128a:	73fb      	strb	r3, [r7, #15]
 800128c:	7bfa      	ldrb	r2, [r7, #15]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	429a      	cmp	r2, r3
 8001294:	d3af      	bcc.n	80011f6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001296:	2300      	movs	r3, #0
 8001298:	73fb      	strb	r3, [r7, #15]
 800129a:	e044      	b.n	8001326 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800129c:	7bfa      	ldrb	r2, [r7, #15]
 800129e:	6879      	ldr	r1, [r7, #4]
 80012a0:	4613      	mov	r3, r2
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	4413      	add	r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	440b      	add	r3, r1
 80012aa:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80012ae:	2200      	movs	r2, #0
 80012b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80012b2:	7bfa      	ldrb	r2, [r7, #15]
 80012b4:	6879      	ldr	r1, [r7, #4]
 80012b6:	4613      	mov	r3, r2
 80012b8:	00db      	lsls	r3, r3, #3
 80012ba:	4413      	add	r3, r2
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	440b      	add	r3, r1
 80012c0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80012c4:	7bfa      	ldrb	r2, [r7, #15]
 80012c6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012c8:	7bfa      	ldrb	r2, [r7, #15]
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	4613      	mov	r3, r2
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	4413      	add	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	440b      	add	r3, r1
 80012d6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80012da:	2200      	movs	r2, #0
 80012dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80012de:	7bfa      	ldrb	r2, [r7, #15]
 80012e0:	6879      	ldr	r1, [r7, #4]
 80012e2:	4613      	mov	r3, r2
 80012e4:	00db      	lsls	r3, r3, #3
 80012e6:	4413      	add	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	440b      	add	r3, r1
 80012ec:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80012f4:	7bfa      	ldrb	r2, [r7, #15]
 80012f6:	6879      	ldr	r1, [r7, #4]
 80012f8:	4613      	mov	r3, r2
 80012fa:	00db      	lsls	r3, r3, #3
 80012fc:	4413      	add	r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	440b      	add	r3, r1
 8001302:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800130a:	7bfa      	ldrb	r2, [r7, #15]
 800130c:	6879      	ldr	r1, [r7, #4]
 800130e:	4613      	mov	r3, r2
 8001310:	00db      	lsls	r3, r3, #3
 8001312:	4413      	add	r3, r2
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	440b      	add	r3, r1
 8001318:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001320:	7bfb      	ldrb	r3, [r7, #15]
 8001322:	3301      	adds	r3, #1
 8001324:	73fb      	strb	r3, [r7, #15]
 8001326:	7bfa      	ldrb	r2, [r7, #15]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	429a      	cmp	r2, r3
 800132e:	d3b5      	bcc.n	800129c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	603b      	str	r3, [r7, #0]
 8001336:	687e      	ldr	r6, [r7, #4]
 8001338:	466d      	mov	r5, sp
 800133a:	f106 0410 	add.w	r4, r6, #16
 800133e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001340:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001342:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001344:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001346:	e894 0003 	ldmia.w	r4, {r0, r1}
 800134a:	e885 0003 	stmia.w	r5, {r0, r1}
 800134e:	1d33      	adds	r3, r6, #4
 8001350:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001352:	6838      	ldr	r0, [r7, #0]
 8001354:	f002 f8de 	bl	8003514 <USB_DevInit>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d005      	beq.n	800136a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2202      	movs	r2, #2
 8001362:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e00d      	b.n	8001386 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2201      	movs	r2, #1
 8001376:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4618      	mov	r0, r3
 8001380:	f003 fa2d 	bl	80047de <USB_DevDisconnect>

  return HAL_OK;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800138e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b084      	sub	sp, #16
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d101      	bne.n	80013aa <HAL_PCD_Start+0x1c>
 80013a6:	2302      	movs	r3, #2
 80013a8:	e020      	b.n	80013ec <HAL_PCD_Start+0x5e>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2201      	movs	r2, #1
 80013ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d109      	bne.n	80013ce <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d005      	beq.n	80013ce <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013c6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f002 f830 	bl	8003438 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f003 f9dd 	bl	800479c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80013ea:	2300      	movs	r3, #0
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80013f4:	b590      	push	{r4, r7, lr}
 80013f6:	b08d      	sub	sp, #52	; 0x34
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001402:	6a3b      	ldr	r3, [r7, #32]
 8001404:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f003 fa9b 	bl	8004946 <USB_GetMode>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	f040 848a 	bne.w	8001d2c <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4618      	mov	r0, r3
 800141e:	f003 f9ff 	bl	8004820 <USB_ReadInterrupts>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	f000 8480 	beq.w	8001d2a <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	0a1b      	lsrs	r3, r3, #8
 8001434:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4618      	mov	r0, r3
 8001444:	f003 f9ec 	bl	8004820 <USB_ReadInterrupts>
 8001448:	4603      	mov	r3, r0
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b02      	cmp	r3, #2
 8001450:	d107      	bne.n	8001462 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	695a      	ldr	r2, [r3, #20]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f002 0202 	and.w	r2, r2, #2
 8001460:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4618      	mov	r0, r3
 8001468:	f003 f9da 	bl	8004820 <USB_ReadInterrupts>
 800146c:	4603      	mov	r3, r0
 800146e:	f003 0310 	and.w	r3, r3, #16
 8001472:	2b10      	cmp	r3, #16
 8001474:	d161      	bne.n	800153a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	699a      	ldr	r2, [r3, #24]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f022 0210 	bic.w	r2, r2, #16
 8001484:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001486:	6a3b      	ldr	r3, [r7, #32]
 8001488:	6a1b      	ldr	r3, [r3, #32]
 800148a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	f003 020f 	and.w	r2, r3, #15
 8001492:	4613      	mov	r3, r2
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	4413      	add	r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	4413      	add	r3, r2
 80014a2:	3304      	adds	r3, #4
 80014a4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	0c5b      	lsrs	r3, r3, #17
 80014aa:	f003 030f 	and.w	r3, r3, #15
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d124      	bne.n	80014fc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80014b8:	4013      	ands	r3, r2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d035      	beq.n	800152a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	091b      	lsrs	r3, r3, #4
 80014c6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80014c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	461a      	mov	r2, r3
 80014d0:	6a38      	ldr	r0, [r7, #32]
 80014d2:	f003 f811 	bl	80044f8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	691a      	ldr	r2, [r3, #16]
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	091b      	lsrs	r3, r3, #4
 80014de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014e2:	441a      	add	r2, r3
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	6a1a      	ldr	r2, [r3, #32]
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	091b      	lsrs	r3, r3, #4
 80014f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014f4:	441a      	add	r2, r3
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	621a      	str	r2, [r3, #32]
 80014fa:	e016      	b.n	800152a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	0c5b      	lsrs	r3, r3, #17
 8001500:	f003 030f 	and.w	r3, r3, #15
 8001504:	2b06      	cmp	r3, #6
 8001506:	d110      	bne.n	800152a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800150e:	2208      	movs	r2, #8
 8001510:	4619      	mov	r1, r3
 8001512:	6a38      	ldr	r0, [r7, #32]
 8001514:	f002 fff0 	bl	80044f8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	6a1a      	ldr	r2, [r3, #32]
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	091b      	lsrs	r3, r3, #4
 8001520:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001524:	441a      	add	r2, r3
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	699a      	ldr	r2, [r3, #24]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f042 0210 	orr.w	r2, r2, #16
 8001538:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f003 f96e 	bl	8004820 <USB_ReadInterrupts>
 8001544:	4603      	mov	r3, r0
 8001546:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800154a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800154e:	f040 80a7 	bne.w	80016a0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001552:	2300      	movs	r3, #0
 8001554:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f003 f973 	bl	8004846 <USB_ReadDevAllOutEpInterrupt>
 8001560:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001562:	e099      	b.n	8001698 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	2b00      	cmp	r3, #0
 800156c:	f000 808e 	beq.w	800168c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001576:	b2d2      	uxtb	r2, r2
 8001578:	4611      	mov	r1, r2
 800157a:	4618      	mov	r0, r3
 800157c:	f003 f997 	bl	80048ae <USB_ReadDevOutEPInterrupt>
 8001580:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	f003 0301 	and.w	r3, r3, #1
 8001588:	2b00      	cmp	r3, #0
 800158a:	d00c      	beq.n	80015a6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158e:	015a      	lsls	r2, r3, #5
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	4413      	add	r3, r2
 8001594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001598:	461a      	mov	r2, r3
 800159a:	2301      	movs	r3, #1
 800159c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800159e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f000 fec3 	bl	800232c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	f003 0308 	and.w	r3, r3, #8
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d00c      	beq.n	80015ca <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80015b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b2:	015a      	lsls	r2, r3, #5
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	4413      	add	r3, r2
 80015b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015bc:	461a      	mov	r2, r3
 80015be:	2308      	movs	r3, #8
 80015c0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80015c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f000 ff99 	bl	80024fc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	f003 0310 	and.w	r3, r3, #16
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d008      	beq.n	80015e6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80015d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d6:	015a      	lsls	r2, r3, #5
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	4413      	add	r3, r2
 80015dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015e0:	461a      	mov	r2, r3
 80015e2:	2310      	movs	r3, #16
 80015e4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d030      	beq.n	8001652 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80015f0:	6a3b      	ldr	r3, [r7, #32]
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015f8:	2b80      	cmp	r3, #128	; 0x80
 80015fa:	d109      	bne.n	8001610 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	69fa      	ldr	r2, [r7, #28]
 8001606:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800160a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800160e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001612:	4613      	mov	r3, r2
 8001614:	00db      	lsls	r3, r3, #3
 8001616:	4413      	add	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	4413      	add	r3, r2
 8001622:	3304      	adds	r3, #4
 8001624:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	78db      	ldrb	r3, [r3, #3]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d108      	bne.n	8001640 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	2200      	movs	r2, #0
 8001632:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001636:	b2db      	uxtb	r3, r3
 8001638:	4619      	mov	r1, r3
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f005 fd1a 	bl	8007074 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001642:	015a      	lsls	r2, r3, #5
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	4413      	add	r3, r2
 8001648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800164c:	461a      	mov	r2, r3
 800164e:	2302      	movs	r3, #2
 8001650:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	f003 0320 	and.w	r3, r3, #32
 8001658:	2b00      	cmp	r3, #0
 800165a:	d008      	beq.n	800166e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165e:	015a      	lsls	r2, r3, #5
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	4413      	add	r3, r2
 8001664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001668:	461a      	mov	r2, r3
 800166a:	2320      	movs	r3, #32
 800166c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d009      	beq.n	800168c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167a:	015a      	lsls	r2, r3, #5
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	4413      	add	r3, r2
 8001680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001684:	461a      	mov	r2, r3
 8001686:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800168a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800168c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168e:	3301      	adds	r3, #1
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001694:	085b      	lsrs	r3, r3, #1
 8001696:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800169a:	2b00      	cmp	r3, #0
 800169c:	f47f af62 	bne.w	8001564 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f003 f8bb 	bl	8004820 <USB_ReadInterrupts>
 80016aa:	4603      	mov	r3, r0
 80016ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80016b4:	f040 80db 	bne.w	800186e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4618      	mov	r0, r3
 80016be:	f003 f8dc 	bl	800487a <USB_ReadDevAllInEpInterrupt>
 80016c2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80016c4:	2300      	movs	r3, #0
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80016c8:	e0cd      	b.n	8001866 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80016ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 80c2 	beq.w	800185a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016dc:	b2d2      	uxtb	r2, r2
 80016de:	4611      	mov	r1, r2
 80016e0:	4618      	mov	r0, r3
 80016e2:	f003 f902 	bl	80048ea <USB_ReadDevInEPInterrupt>
 80016e6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d057      	beq.n	80017a2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f4:	f003 030f 	and.w	r3, r3, #15
 80016f8:	2201      	movs	r2, #1
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001706:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	43db      	mvns	r3, r3
 800170c:	69f9      	ldr	r1, [r7, #28]
 800170e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001712:	4013      	ands	r3, r2
 8001714:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	015a      	lsls	r2, r3, #5
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	4413      	add	r3, r2
 800171e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001722:	461a      	mov	r2, r3
 8001724:	2301      	movs	r3, #1
 8001726:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d132      	bne.n	8001796 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001730:	6879      	ldr	r1, [r7, #4]
 8001732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001734:	4613      	mov	r3, r2
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	4413      	add	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	440b      	add	r3, r1
 800173e:	334c      	adds	r3, #76	; 0x4c
 8001740:	6819      	ldr	r1, [r3, #0]
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001746:	4613      	mov	r3, r2
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	4413      	add	r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4403      	add	r3, r0
 8001750:	3348      	adds	r3, #72	; 0x48
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4419      	add	r1, r3
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800175a:	4613      	mov	r3, r2
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	4413      	add	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4403      	add	r3, r0
 8001764:	334c      	adds	r3, #76	; 0x4c
 8001766:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176a:	2b00      	cmp	r3, #0
 800176c:	d113      	bne.n	8001796 <HAL_PCD_IRQHandler+0x3a2>
 800176e:	6879      	ldr	r1, [r7, #4]
 8001770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001772:	4613      	mov	r3, r2
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	4413      	add	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	440b      	add	r3, r1
 800177c:	3354      	adds	r3, #84	; 0x54
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d108      	bne.n	8001796 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6818      	ldr	r0, [r3, #0]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800178e:	461a      	mov	r2, r3
 8001790:	2101      	movs	r1, #1
 8001792:	f003 f909 	bl	80049a8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001798:	b2db      	uxtb	r3, r3
 800179a:	4619      	mov	r1, r3
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f005 fbe4 	bl	8006f6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	f003 0308 	and.w	r3, r3, #8
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d008      	beq.n	80017be <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80017ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ae:	015a      	lsls	r2, r3, #5
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	4413      	add	r3, r2
 80017b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017b8:	461a      	mov	r2, r3
 80017ba:	2308      	movs	r3, #8
 80017bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	f003 0310 	and.w	r3, r3, #16
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d008      	beq.n	80017da <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80017c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ca:	015a      	lsls	r2, r3, #5
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	4413      	add	r3, r2
 80017d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017d4:	461a      	mov	r2, r3
 80017d6:	2310      	movs	r3, #16
 80017d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d008      	beq.n	80017f6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80017e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e6:	015a      	lsls	r2, r3, #5
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	4413      	add	r3, r2
 80017ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017f0:	461a      	mov	r2, r3
 80017f2:	2340      	movs	r3, #64	; 0x40
 80017f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d023      	beq.n	8001848 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001800:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001802:	6a38      	ldr	r0, [r7, #32]
 8001804:	f001 ffea 	bl	80037dc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800180a:	4613      	mov	r3, r2
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	4413      	add	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	3338      	adds	r3, #56	; 0x38
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	4413      	add	r3, r2
 8001818:	3304      	adds	r3, #4
 800181a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	78db      	ldrb	r3, [r3, #3]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d108      	bne.n	8001836 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	2200      	movs	r2, #0
 8001828:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182c:	b2db      	uxtb	r3, r3
 800182e:	4619      	mov	r1, r3
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f005 fc31 	bl	8007098 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	015a      	lsls	r2, r3, #5
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	4413      	add	r3, r2
 800183e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001842:	461a      	mov	r2, r3
 8001844:	2302      	movs	r3, #2
 8001846:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001852:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f000 fcdb 	bl	8002210 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185c:	3301      	adds	r3, #1
 800185e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001862:	085b      	lsrs	r3, r3, #1
 8001864:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001868:	2b00      	cmp	r3, #0
 800186a:	f47f af2e 	bne.w	80016ca <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f002 ffd4 	bl	8004820 <USB_ReadInterrupts>
 8001878:	4603      	mov	r3, r0
 800187a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800187e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001882:	d122      	bne.n	80018ca <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	69fa      	ldr	r2, [r7, #28]
 800188e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001892:	f023 0301 	bic.w	r3, r3, #1
 8001896:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d108      	bne.n	80018b4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80018aa:	2100      	movs	r1, #0
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f000 fec3 	bl	8002638 <HAL_PCDEx_LPM_Callback>
 80018b2:	e002      	b.n	80018ba <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f005 fbcf 	bl	8007058 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	695a      	ldr	r2, [r3, #20]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80018c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f002 ffa6 	bl	8004820 <USB_ReadInterrupts>
 80018d4:	4603      	mov	r3, r0
 80018d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018de:	d112      	bne.n	8001906 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d102      	bne.n	80018f6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f005 fb8b 	bl	800700c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	695a      	ldr	r2, [r3, #20]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001904:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f002 ff88 	bl	8004820 <USB_ReadInterrupts>
 8001910:	4603      	mov	r3, r0
 8001912:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001916:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800191a:	f040 80b7 	bne.w	8001a8c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	69fa      	ldr	r2, [r7, #28]
 8001928:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800192c:	f023 0301 	bic.w	r3, r3, #1
 8001930:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2110      	movs	r1, #16
 8001938:	4618      	mov	r0, r3
 800193a:	f001 ff4f 	bl	80037dc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800193e:	2300      	movs	r3, #0
 8001940:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001942:	e046      	b.n	80019d2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001946:	015a      	lsls	r2, r3, #5
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	4413      	add	r3, r2
 800194c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001950:	461a      	mov	r2, r3
 8001952:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001956:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800195a:	015a      	lsls	r2, r3, #5
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	4413      	add	r3, r2
 8001960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001968:	0151      	lsls	r1, r2, #5
 800196a:	69fa      	ldr	r2, [r7, #28]
 800196c:	440a      	add	r2, r1
 800196e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001972:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001976:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800197a:	015a      	lsls	r2, r3, #5
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	4413      	add	r3, r2
 8001980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001984:	461a      	mov	r2, r3
 8001986:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800198a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800198c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800198e:	015a      	lsls	r2, r3, #5
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	4413      	add	r3, r2
 8001994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800199c:	0151      	lsls	r1, r2, #5
 800199e:	69fa      	ldr	r2, [r7, #28]
 80019a0:	440a      	add	r2, r1
 80019a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80019a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80019aa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80019ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ae:	015a      	lsls	r2, r3, #5
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	4413      	add	r3, r2
 80019b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019bc:	0151      	lsls	r1, r2, #5
 80019be:	69fa      	ldr	r2, [r7, #28]
 80019c0:	440a      	add	r2, r1
 80019c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80019c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80019ca:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ce:	3301      	adds	r3, #1
 80019d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019d8:	429a      	cmp	r2, r3
 80019da:	d3b3      	bcc.n	8001944 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019e2:	69db      	ldr	r3, [r3, #28]
 80019e4:	69fa      	ldr	r2, [r7, #28]
 80019e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019ea:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80019ee:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d016      	beq.n	8001a26 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a02:	69fa      	ldr	r2, [r7, #28]
 8001a04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a08:	f043 030b 	orr.w	r3, r3, #11
 8001a0c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a18:	69fa      	ldr	r2, [r7, #28]
 8001a1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a1e:	f043 030b 	orr.w	r3, r3, #11
 8001a22:	6453      	str	r3, [r2, #68]	; 0x44
 8001a24:	e015      	b.n	8001a52 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	69fa      	ldr	r2, [r7, #28]
 8001a30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a34:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a38:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001a3c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	69fa      	ldr	r2, [r7, #28]
 8001a48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a4c:	f043 030b 	orr.w	r3, r3, #11
 8001a50:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	69fa      	ldr	r2, [r7, #28]
 8001a5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a60:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001a64:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6818      	ldr	r0, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a76:	461a      	mov	r2, r3
 8001a78:	f002 ff96 	bl	80049a8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	695a      	ldr	r2, [r3, #20]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001a8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f002 fec5 	bl	8004820 <USB_ReadInterrupts>
 8001a96:	4603      	mov	r3, r0
 8001a98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001aa0:	d124      	bne.n	8001aec <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f002 ff5b 	bl	8004962 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f001 ff10 	bl	80038d6 <USB_GetDevSpeed>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	461a      	mov	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681c      	ldr	r4, [r3, #0]
 8001ac2:	f001 fa29 	bl	8002f18 <HAL_RCC_GetHCLKFreq>
 8001ac6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	461a      	mov	r2, r3
 8001ad0:	4620      	mov	r0, r4
 8001ad2:	f001 fc0f 	bl	80032f4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f005 fa6f 	bl	8006fba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	695a      	ldr	r2, [r3, #20]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001aea:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f002 fe95 	bl	8004820 <USB_ReadInterrupts>
 8001af6:	4603      	mov	r3, r0
 8001af8:	f003 0308 	and.w	r3, r3, #8
 8001afc:	2b08      	cmp	r3, #8
 8001afe:	d10a      	bne.n	8001b16 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f005 fa4c 	bl	8006f9e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	695a      	ldr	r2, [r3, #20]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f002 0208 	and.w	r2, r2, #8
 8001b14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f002 fe80 	bl	8004820 <USB_ReadInterrupts>
 8001b20:	4603      	mov	r3, r0
 8001b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b26:	2b80      	cmp	r3, #128	; 0x80
 8001b28:	d122      	bne.n	8001b70 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001b2a:	6a3b      	ldr	r3, [r7, #32]
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b32:	6a3b      	ldr	r3, [r7, #32]
 8001b34:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b36:	2301      	movs	r3, #1
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
 8001b3a:	e014      	b.n	8001b66 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001b3c:	6879      	ldr	r1, [r7, #4]
 8001b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b40:	4613      	mov	r3, r2
 8001b42:	00db      	lsls	r3, r3, #3
 8001b44:	4413      	add	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	440b      	add	r3, r1
 8001b4a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d105      	bne.n	8001b60 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	4619      	mov	r1, r3
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 fb27 	bl	80021ae <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b62:	3301      	adds	r3, #1
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d3e5      	bcc.n	8001b3c <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f002 fe53 	bl	8004820 <USB_ReadInterrupts>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b84:	d13b      	bne.n	8001bfe <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b86:	2301      	movs	r3, #1
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
 8001b8a:	e02b      	b.n	8001be4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8e:	015a      	lsls	r2, r3, #5
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	4413      	add	r3, r2
 8001b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b9c:	6879      	ldr	r1, [r7, #4]
 8001b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	4413      	add	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	440b      	add	r3, r1
 8001baa:	3340      	adds	r3, #64	; 0x40
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d115      	bne.n	8001bde <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001bb2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	da12      	bge.n	8001bde <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001bb8:	6879      	ldr	r1, [r7, #4]
 8001bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	4413      	add	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	333f      	adds	r3, #63	; 0x3f
 8001bc8:	2201      	movs	r2, #1
 8001bca:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 fae8 	bl	80021ae <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be0:	3301      	adds	r3, #1
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d3ce      	bcc.n	8001b8c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	695a      	ldr	r2, [r3, #20]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001bfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f002 fe0c 	bl	8004820 <USB_ReadInterrupts>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c12:	d155      	bne.n	8001cc0 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c14:	2301      	movs	r3, #1
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
 8001c18:	e045      	b.n	8001ca6 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	015a      	lsls	r2, r3, #5
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	4413      	add	r3, r2
 8001c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c2e:	4613      	mov	r3, r2
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	4413      	add	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	440b      	add	r3, r1
 8001c38:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d12e      	bne.n	8001ca0 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001c42:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	da2b      	bge.n	8001ca0 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001c54:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d121      	bne.n	8001ca0 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001c5c:	6879      	ldr	r1, [r7, #4]
 8001c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c60:	4613      	mov	r3, r2
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	4413      	add	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	440b      	add	r3, r1
 8001c6a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001c6e:	2201      	movs	r2, #1
 8001c70:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001c72:	6a3b      	ldr	r3, [r7, #32]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001c7a:	6a3b      	ldr	r3, [r7, #32]
 8001c7c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001c7e:	6a3b      	ldr	r3, [r7, #32]
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d10a      	bne.n	8001ca0 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	69fa      	ldr	r2, [r7, #28]
 8001c94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c9c:	6053      	str	r3, [r2, #4]
            break;
 8001c9e:	e007      	b.n	8001cb0 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d3b4      	bcc.n	8001c1a <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	695a      	ldr	r2, [r3, #20]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001cbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f002 fdab 	bl	8004820 <USB_ReadInterrupts>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cd4:	d10a      	bne.n	8001cec <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f005 f9f0 	bl	80070bc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	695a      	ldr	r2, [r3, #20]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001cea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f002 fd95 	bl	8004820 <USB_ReadInterrupts>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b04      	cmp	r3, #4
 8001cfe:	d115      	bne.n	8001d2c <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	f003 0304 	and.w	r3, r3, #4
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d002      	beq.n	8001d18 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f005 f9e0 	bl	80070d8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6859      	ldr	r1, [r3, #4]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	430a      	orrs	r2, r1
 8001d26:	605a      	str	r2, [r3, #4]
 8001d28:	e000      	b.n	8001d2c <HAL_PCD_IRQHandler+0x938>
      return;
 8001d2a:	bf00      	nop
    }
  }
}
 8001d2c:	3734      	adds	r7, #52	; 0x34
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd90      	pop	{r4, r7, pc}

08001d32 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b082      	sub	sp, #8
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d101      	bne.n	8001d4c <HAL_PCD_SetAddress+0x1a>
 8001d48:	2302      	movs	r3, #2
 8001d4a:	e013      	b.n	8001d74 <HAL_PCD_SetAddress+0x42>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	78fa      	ldrb	r2, [r7, #3]
 8001d58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	78fa      	ldrb	r2, [r7, #3]
 8001d62:	4611      	mov	r1, r2
 8001d64:	4618      	mov	r0, r3
 8001d66:	f002 fcf3 	bl	8004750 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	4608      	mov	r0, r1
 8001d86:	4611      	mov	r1, r2
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	70fb      	strb	r3, [r7, #3]
 8001d8e:	460b      	mov	r3, r1
 8001d90:	803b      	strh	r3, [r7, #0]
 8001d92:	4613      	mov	r3, r2
 8001d94:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d96:	2300      	movs	r3, #0
 8001d98:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	da0f      	bge.n	8001dc2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001da2:	78fb      	ldrb	r3, [r7, #3]
 8001da4:	f003 020f 	and.w	r2, r3, #15
 8001da8:	4613      	mov	r3, r2
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	4413      	add	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	3338      	adds	r3, #56	; 0x38
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	4413      	add	r3, r2
 8001db6:	3304      	adds	r3, #4
 8001db8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	705a      	strb	r2, [r3, #1]
 8001dc0:	e00f      	b.n	8001de2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dc2:	78fb      	ldrb	r3, [r7, #3]
 8001dc4:	f003 020f 	and.w	r2, r3, #15
 8001dc8:	4613      	mov	r3, r2
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	4413      	add	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	3304      	adds	r3, #4
 8001dda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2200      	movs	r2, #0
 8001de0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001de2:	78fb      	ldrb	r3, [r7, #3]
 8001de4:	f003 030f 	and.w	r3, r3, #15
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001dee:	883a      	ldrh	r2, [r7, #0]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	78ba      	ldrb	r2, [r7, #2]
 8001df8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	785b      	ldrb	r3, [r3, #1]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d004      	beq.n	8001e0c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e0c:	78bb      	ldrb	r3, [r7, #2]
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d102      	bne.n	8001e18 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2200      	movs	r2, #0
 8001e16:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d101      	bne.n	8001e26 <HAL_PCD_EP_Open+0xaa>
 8001e22:	2302      	movs	r3, #2
 8001e24:	e00e      	b.n	8001e44 <HAL_PCD_EP_Open+0xc8>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68f9      	ldr	r1, [r7, #12]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f001 fd73 	bl	8003920 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001e42:	7afb      	ldrb	r3, [r7, #11]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	460b      	mov	r3, r1
 8001e56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	da0f      	bge.n	8001e80 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e60:	78fb      	ldrb	r3, [r7, #3]
 8001e62:	f003 020f 	and.w	r2, r3, #15
 8001e66:	4613      	mov	r3, r2
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	4413      	add	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	3338      	adds	r3, #56	; 0x38
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	4413      	add	r3, r2
 8001e74:	3304      	adds	r3, #4
 8001e76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	705a      	strb	r2, [r3, #1]
 8001e7e:	e00f      	b.n	8001ea0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e80:	78fb      	ldrb	r3, [r7, #3]
 8001e82:	f003 020f 	and.w	r2, r3, #15
 8001e86:	4613      	mov	r3, r2
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	4413      	add	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	4413      	add	r3, r2
 8001e96:	3304      	adds	r3, #4
 8001e98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d101      	bne.n	8001eba <HAL_PCD_EP_Close+0x6e>
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	e00e      	b.n	8001ed8 <HAL_PCD_EP_Close+0x8c>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68f9      	ldr	r1, [r7, #12]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f001 fdb1 	bl	8003a30 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	607a      	str	r2, [r7, #4]
 8001eea:	603b      	str	r3, [r7, #0]
 8001eec:	460b      	mov	r3, r1
 8001eee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ef0:	7afb      	ldrb	r3, [r7, #11]
 8001ef2:	f003 020f 	and.w	r2, r3, #15
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	4413      	add	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	4413      	add	r3, r2
 8001f06:	3304      	adds	r3, #4
 8001f08:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f22:	7afb      	ldrb	r3, [r7, #11]
 8001f24:	f003 030f 	and.w	r3, r3, #15
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d102      	bne.n	8001f3c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f3c:	7afb      	ldrb	r3, [r7, #11]
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d109      	bne.n	8001f5a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6818      	ldr	r0, [r3, #0]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	461a      	mov	r2, r3
 8001f52:	6979      	ldr	r1, [r7, #20]
 8001f54:	f002 f890 	bl	8004078 <USB_EP0StartXfer>
 8001f58:	e008      	b.n	8001f6c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6818      	ldr	r0, [r3, #0]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	461a      	mov	r2, r3
 8001f66:	6979      	ldr	r1, [r7, #20]
 8001f68:	f001 fe3e 	bl	8003be8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3718      	adds	r7, #24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
 8001f7e:	460b      	mov	r3, r1
 8001f80:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f82:	78fb      	ldrb	r3, [r7, #3]
 8001f84:	f003 020f 	and.w	r2, r3, #15
 8001f88:	6879      	ldr	r1, [r7, #4]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	4413      	add	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	440b      	add	r3, r1
 8001f94:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001f98:	681b      	ldr	r3, [r3, #0]
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b086      	sub	sp, #24
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	60f8      	str	r0, [r7, #12]
 8001fae:	607a      	str	r2, [r7, #4]
 8001fb0:	603b      	str	r3, [r7, #0]
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fb6:	7afb      	ldrb	r3, [r7, #11]
 8001fb8:	f003 020f 	and.w	r2, r3, #15
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	4413      	add	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	3338      	adds	r3, #56	; 0x38
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	4413      	add	r3, r2
 8001fca:	3304      	adds	r3, #4
 8001fcc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fe6:	7afb      	ldrb	r3, [r7, #11]
 8001fe8:	f003 030f 	and.w	r3, r3, #15
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d102      	bne.n	8002000 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002000:	7afb      	ldrb	r3, [r7, #11]
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	2b00      	cmp	r3, #0
 8002008:	d109      	bne.n	800201e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6818      	ldr	r0, [r3, #0]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	b2db      	uxtb	r3, r3
 8002014:	461a      	mov	r2, r3
 8002016:	6979      	ldr	r1, [r7, #20]
 8002018:	f002 f82e 	bl	8004078 <USB_EP0StartXfer>
 800201c:	e008      	b.n	8002030 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6818      	ldr	r0, [r3, #0]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	b2db      	uxtb	r3, r3
 8002028:	461a      	mov	r2, r3
 800202a:	6979      	ldr	r1, [r7, #20]
 800202c:	f001 fddc 	bl	8003be8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3718      	adds	r7, #24
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b084      	sub	sp, #16
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
 8002042:	460b      	mov	r3, r1
 8002044:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002046:	78fb      	ldrb	r3, [r7, #3]
 8002048:	f003 020f 	and.w	r2, r3, #15
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	429a      	cmp	r2, r3
 8002052:	d901      	bls.n	8002058 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e050      	b.n	80020fa <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002058:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800205c:	2b00      	cmp	r3, #0
 800205e:	da0f      	bge.n	8002080 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002060:	78fb      	ldrb	r3, [r7, #3]
 8002062:	f003 020f 	and.w	r2, r3, #15
 8002066:	4613      	mov	r3, r2
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	4413      	add	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	3338      	adds	r3, #56	; 0x38
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	4413      	add	r3, r2
 8002074:	3304      	adds	r3, #4
 8002076:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2201      	movs	r2, #1
 800207c:	705a      	strb	r2, [r3, #1]
 800207e:	e00d      	b.n	800209c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002080:	78fa      	ldrb	r2, [r7, #3]
 8002082:	4613      	mov	r3, r2
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	4413      	add	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	4413      	add	r3, r2
 8002092:	3304      	adds	r3, #4
 8002094:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2200      	movs	r2, #0
 800209a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2201      	movs	r2, #1
 80020a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020a2:	78fb      	ldrb	r3, [r7, #3]
 80020a4:	f003 030f 	and.w	r3, r3, #15
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d101      	bne.n	80020bc <HAL_PCD_EP_SetStall+0x82>
 80020b8:	2302      	movs	r3, #2
 80020ba:	e01e      	b.n	80020fa <HAL_PCD_EP_SetStall+0xc0>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68f9      	ldr	r1, [r7, #12]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f002 fa6c 	bl	80045a8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020d0:	78fb      	ldrb	r3, [r7, #3]
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10a      	bne.n	80020f0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6818      	ldr	r0, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	b2d9      	uxtb	r1, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80020ea:	461a      	mov	r2, r3
 80020ec:	f002 fc5c 	bl	80049a8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b084      	sub	sp, #16
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	460b      	mov	r3, r1
 800210c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800210e:	78fb      	ldrb	r3, [r7, #3]
 8002110:	f003 020f 	and.w	r2, r3, #15
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	429a      	cmp	r2, r3
 800211a:	d901      	bls.n	8002120 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e042      	b.n	80021a6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002120:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002124:	2b00      	cmp	r3, #0
 8002126:	da0f      	bge.n	8002148 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002128:	78fb      	ldrb	r3, [r7, #3]
 800212a:	f003 020f 	and.w	r2, r3, #15
 800212e:	4613      	mov	r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	4413      	add	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	3338      	adds	r3, #56	; 0x38
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	4413      	add	r3, r2
 800213c:	3304      	adds	r3, #4
 800213e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2201      	movs	r2, #1
 8002144:	705a      	strb	r2, [r3, #1]
 8002146:	e00f      	b.n	8002168 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002148:	78fb      	ldrb	r3, [r7, #3]
 800214a:	f003 020f 	and.w	r2, r3, #15
 800214e:	4613      	mov	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	4413      	add	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	4413      	add	r3, r2
 800215e:	3304      	adds	r3, #4
 8002160:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800216e:	78fb      	ldrb	r3, [r7, #3]
 8002170:	f003 030f 	and.w	r3, r3, #15
 8002174:	b2da      	uxtb	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002180:	2b01      	cmp	r3, #1
 8002182:	d101      	bne.n	8002188 <HAL_PCD_EP_ClrStall+0x86>
 8002184:	2302      	movs	r3, #2
 8002186:	e00e      	b.n	80021a6 <HAL_PCD_EP_ClrStall+0xa4>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68f9      	ldr	r1, [r7, #12]
 8002196:	4618      	mov	r0, r3
 8002198:	f002 fa74 	bl	8004684 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b084      	sub	sp, #16
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
 80021b6:	460b      	mov	r3, r1
 80021b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80021ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	da0c      	bge.n	80021dc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021c2:	78fb      	ldrb	r3, [r7, #3]
 80021c4:	f003 020f 	and.w	r2, r3, #15
 80021c8:	4613      	mov	r3, r2
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	4413      	add	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	3338      	adds	r3, #56	; 0x38
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	4413      	add	r3, r2
 80021d6:	3304      	adds	r3, #4
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	e00c      	b.n	80021f6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021dc:	78fb      	ldrb	r3, [r7, #3]
 80021de:	f003 020f 	and.w	r2, r3, #15
 80021e2:	4613      	mov	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	4413      	add	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	4413      	add	r3, r2
 80021f2:	3304      	adds	r3, #4
 80021f4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68f9      	ldr	r1, [r7, #12]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f002 f893 	bl	8004328 <USB_EPStopXfer>
 8002202:	4603      	mov	r3, r0
 8002204:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002206:	7afb      	ldrb	r3, [r7, #11]
}
 8002208:	4618      	mov	r0, r3
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b08a      	sub	sp, #40	; 0x28
 8002214:	af02      	add	r7, sp, #8
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	4613      	mov	r3, r2
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	4413      	add	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	3338      	adds	r3, #56	; 0x38
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	4413      	add	r3, r2
 8002234:	3304      	adds	r3, #4
 8002236:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6a1a      	ldr	r2, [r3, #32]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	429a      	cmp	r2, r3
 8002242:	d901      	bls.n	8002248 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e06c      	b.n	8002322 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	699a      	ldr	r2, [r3, #24]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	69fa      	ldr	r2, [r7, #28]
 800225a:	429a      	cmp	r2, r3
 800225c:	d902      	bls.n	8002264 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	3303      	adds	r3, #3
 8002268:	089b      	lsrs	r3, r3, #2
 800226a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800226c:	e02b      	b.n	80022c6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	699a      	ldr	r2, [r3, #24]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6a1b      	ldr	r3, [r3, #32]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	69fa      	ldr	r2, [r7, #28]
 8002280:	429a      	cmp	r2, r3
 8002282:	d902      	bls.n	800228a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	3303      	adds	r3, #3
 800228e:	089b      	lsrs	r3, r3, #2
 8002290:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6919      	ldr	r1, [r3, #16]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	b2da      	uxtb	r2, r3
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	4603      	mov	r3, r0
 80022a8:	6978      	ldr	r0, [r7, #20]
 80022aa:	f002 f8e7 	bl	800447c <USB_WritePacket>

    ep->xfer_buff  += len;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	691a      	ldr	r2, [r3, #16]
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	441a      	add	r2, r3
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6a1a      	ldr	r2, [r3, #32]
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	441a      	add	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	015a      	lsls	r2, r3, #5
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	4413      	add	r3, r2
 80022ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d809      	bhi.n	80022f0 <PCD_WriteEmptyTxFifo+0xe0>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6a1a      	ldr	r2, [r3, #32]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d203      	bcs.n	80022f0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1be      	bne.n	800226e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	699a      	ldr	r2, [r3, #24]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d811      	bhi.n	8002320 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	f003 030f 	and.w	r3, r3, #15
 8002302:	2201      	movs	r2, #1
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002310:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	43db      	mvns	r3, r3
 8002316:	6939      	ldr	r1, [r7, #16]
 8002318:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800231c:	4013      	ands	r3, r2
 800231e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3720      	adds	r7, #32
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
	...

0800232c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b088      	sub	sp, #32
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	333c      	adds	r3, #60	; 0x3c
 8002344:	3304      	adds	r3, #4
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	015a      	lsls	r2, r3, #5
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	4413      	add	r3, r2
 8002352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d17b      	bne.n	800245a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	f003 0308 	and.w	r3, r3, #8
 8002368:	2b00      	cmp	r3, #0
 800236a:	d015      	beq.n	8002398 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	4a61      	ldr	r2, [pc, #388]	; (80024f4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002370:	4293      	cmp	r3, r2
 8002372:	f240 80b9 	bls.w	80024e8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800237c:	2b00      	cmp	r3, #0
 800237e:	f000 80b3 	beq.w	80024e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	015a      	lsls	r2, r3, #5
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	4413      	add	r3, r2
 800238a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800238e:	461a      	mov	r2, r3
 8002390:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002394:	6093      	str	r3, [r2, #8]
 8002396:	e0a7      	b.n	80024e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	f003 0320 	and.w	r3, r3, #32
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d009      	beq.n	80023b6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	015a      	lsls	r2, r3, #5
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	4413      	add	r3, r2
 80023aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023ae:	461a      	mov	r2, r3
 80023b0:	2320      	movs	r3, #32
 80023b2:	6093      	str	r3, [r2, #8]
 80023b4:	e098      	b.n	80024e8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f040 8093 	bne.w	80024e8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	4a4b      	ldr	r2, [pc, #300]	; (80024f4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d90f      	bls.n	80023ea <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d00a      	beq.n	80023ea <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	015a      	lsls	r2, r3, #5
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	4413      	add	r3, r2
 80023dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023e0:	461a      	mov	r2, r3
 80023e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023e6:	6093      	str	r3, [r2, #8]
 80023e8:	e07e      	b.n	80024e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	4613      	mov	r3, r2
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	4413      	add	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	4413      	add	r3, r2
 80023fc:	3304      	adds	r3, #4
 80023fe:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	69da      	ldr	r2, [r3, #28]
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	0159      	lsls	r1, r3, #5
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	440b      	add	r3, r1
 800240c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002416:	1ad2      	subs	r2, r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d114      	bne.n	800244c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d109      	bne.n	800243e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6818      	ldr	r0, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002434:	461a      	mov	r2, r3
 8002436:	2101      	movs	r1, #1
 8002438:	f002 fab6 	bl	80049a8 <USB_EP0_OutStart>
 800243c:	e006      	b.n	800244c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	691a      	ldr	r2, [r3, #16]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	441a      	add	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	b2db      	uxtb	r3, r3
 8002450:	4619      	mov	r1, r3
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f004 fd6e 	bl	8006f34 <HAL_PCD_DataOutStageCallback>
 8002458:	e046      	b.n	80024e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	4a26      	ldr	r2, [pc, #152]	; (80024f8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d124      	bne.n	80024ac <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00a      	beq.n	8002482 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	015a      	lsls	r2, r3, #5
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	4413      	add	r3, r2
 8002474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002478:	461a      	mov	r2, r3
 800247a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800247e:	6093      	str	r3, [r2, #8]
 8002480:	e032      	b.n	80024e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	f003 0320 	and.w	r3, r3, #32
 8002488:	2b00      	cmp	r3, #0
 800248a:	d008      	beq.n	800249e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	015a      	lsls	r2, r3, #5
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	4413      	add	r3, r2
 8002494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002498:	461a      	mov	r2, r3
 800249a:	2320      	movs	r3, #32
 800249c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	4619      	mov	r1, r3
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f004 fd45 	bl	8006f34 <HAL_PCD_DataOutStageCallback>
 80024aa:	e01d      	b.n	80024e8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d114      	bne.n	80024dc <PCD_EP_OutXfrComplete_int+0x1b0>
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	4613      	mov	r3, r2
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	4413      	add	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	440b      	add	r3, r1
 80024c0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d108      	bne.n	80024dc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6818      	ldr	r0, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80024d4:	461a      	mov	r2, r3
 80024d6:	2100      	movs	r1, #0
 80024d8:	f002 fa66 	bl	80049a8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	4619      	mov	r1, r3
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f004 fd26 	bl	8006f34 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3720      	adds	r7, #32
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	4f54300a 	.word	0x4f54300a
 80024f8:	4f54310a 	.word	0x4f54310a

080024fc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	333c      	adds	r3, #60	; 0x3c
 8002514:	3304      	adds	r3, #4
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	015a      	lsls	r2, r3, #5
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	4413      	add	r3, r2
 8002522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	4a15      	ldr	r2, [pc, #84]	; (8002584 <PCD_EP_OutSetupPacket_int+0x88>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d90e      	bls.n	8002550 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002538:	2b00      	cmp	r3, #0
 800253a:	d009      	beq.n	8002550 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	015a      	lsls	r2, r3, #5
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	4413      	add	r3, r2
 8002544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002548:	461a      	mov	r2, r3
 800254a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800254e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f004 fcdd 	bl	8006f10 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	4a0a      	ldr	r2, [pc, #40]	; (8002584 <PCD_EP_OutSetupPacket_int+0x88>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d90c      	bls.n	8002578 <PCD_EP_OutSetupPacket_int+0x7c>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d108      	bne.n	8002578 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6818      	ldr	r0, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002570:	461a      	mov	r2, r3
 8002572:	2101      	movs	r1, #1
 8002574:	f002 fa18 	bl	80049a8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3718      	adds	r7, #24
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	4f54300a 	.word	0x4f54300a

08002588 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	460b      	mov	r3, r1
 8002592:	70fb      	strb	r3, [r7, #3]
 8002594:	4613      	mov	r3, r2
 8002596:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80025a0:	78fb      	ldrb	r3, [r7, #3]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d107      	bne.n	80025b6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80025a6:	883b      	ldrh	r3, [r7, #0]
 80025a8:	0419      	lsls	r1, r3, #16
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68ba      	ldr	r2, [r7, #8]
 80025b0:	430a      	orrs	r2, r1
 80025b2:	629a      	str	r2, [r3, #40]	; 0x28
 80025b4:	e028      	b.n	8002608 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025bc:	0c1b      	lsrs	r3, r3, #16
 80025be:	68ba      	ldr	r2, [r7, #8]
 80025c0:	4413      	add	r3, r2
 80025c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80025c4:	2300      	movs	r3, #0
 80025c6:	73fb      	strb	r3, [r7, #15]
 80025c8:	e00d      	b.n	80025e6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	7bfb      	ldrb	r3, [r7, #15]
 80025d0:	3340      	adds	r3, #64	; 0x40
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	0c1b      	lsrs	r3, r3, #16
 80025da:	68ba      	ldr	r2, [r7, #8]
 80025dc:	4413      	add	r3, r2
 80025de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
 80025e2:	3301      	adds	r3, #1
 80025e4:	73fb      	strb	r3, [r7, #15]
 80025e6:	7bfa      	ldrb	r2, [r7, #15]
 80025e8:	78fb      	ldrb	r3, [r7, #3]
 80025ea:	3b01      	subs	r3, #1
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d3ec      	bcc.n	80025ca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80025f0:	883b      	ldrh	r3, [r7, #0]
 80025f2:	0418      	lsls	r0, r3, #16
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6819      	ldr	r1, [r3, #0]
 80025f8:	78fb      	ldrb	r3, [r7, #3]
 80025fa:	3b01      	subs	r3, #1
 80025fc:	68ba      	ldr	r2, [r7, #8]
 80025fe:	4302      	orrs	r2, r0
 8002600:	3340      	adds	r3, #64	; 0x40
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	440b      	add	r3, r1
 8002606:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3714      	adds	r7, #20
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002616:	b480      	push	{r7}
 8002618:	b083      	sub	sp, #12
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
 800261e:	460b      	mov	r3, r1
 8002620:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	887a      	ldrh	r2, [r7, #2]
 8002628:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	460b      	mov	r3, r1
 8002642:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e267      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d075      	beq.n	800275a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800266e:	4b88      	ldr	r3, [pc, #544]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 030c 	and.w	r3, r3, #12
 8002676:	2b04      	cmp	r3, #4
 8002678:	d00c      	beq.n	8002694 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800267a:	4b85      	ldr	r3, [pc, #532]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002682:	2b08      	cmp	r3, #8
 8002684:	d112      	bne.n	80026ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002686:	4b82      	ldr	r3, [pc, #520]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800268e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002692:	d10b      	bne.n	80026ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002694:	4b7e      	ldr	r3, [pc, #504]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d05b      	beq.n	8002758 <HAL_RCC_OscConfig+0x108>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d157      	bne.n	8002758 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e242      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026b4:	d106      	bne.n	80026c4 <HAL_RCC_OscConfig+0x74>
 80026b6:	4b76      	ldr	r3, [pc, #472]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a75      	ldr	r2, [pc, #468]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 80026bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c0:	6013      	str	r3, [r2, #0]
 80026c2:	e01d      	b.n	8002700 <HAL_RCC_OscConfig+0xb0>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026cc:	d10c      	bne.n	80026e8 <HAL_RCC_OscConfig+0x98>
 80026ce:	4b70      	ldr	r3, [pc, #448]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a6f      	ldr	r2, [pc, #444]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 80026d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026d8:	6013      	str	r3, [r2, #0]
 80026da:	4b6d      	ldr	r3, [pc, #436]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a6c      	ldr	r2, [pc, #432]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 80026e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e4:	6013      	str	r3, [r2, #0]
 80026e6:	e00b      	b.n	8002700 <HAL_RCC_OscConfig+0xb0>
 80026e8:	4b69      	ldr	r3, [pc, #420]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a68      	ldr	r2, [pc, #416]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 80026ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026f2:	6013      	str	r3, [r2, #0]
 80026f4:	4b66      	ldr	r3, [pc, #408]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a65      	ldr	r2, [pc, #404]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 80026fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d013      	beq.n	8002730 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002708:	f7fe f9fc 	bl	8000b04 <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002710:	f7fe f9f8 	bl	8000b04 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b64      	cmp	r3, #100	; 0x64
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e207      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002722:	4b5b      	ldr	r3, [pc, #364]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d0f0      	beq.n	8002710 <HAL_RCC_OscConfig+0xc0>
 800272e:	e014      	b.n	800275a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002730:	f7fe f9e8 	bl	8000b04 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002738:	f7fe f9e4 	bl	8000b04 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b64      	cmp	r3, #100	; 0x64
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e1f3      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800274a:	4b51      	ldr	r3, [pc, #324]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1f0      	bne.n	8002738 <HAL_RCC_OscConfig+0xe8>
 8002756:	e000      	b.n	800275a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002758:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d063      	beq.n	800282e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002766:	4b4a      	ldr	r3, [pc, #296]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f003 030c 	and.w	r3, r3, #12
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00b      	beq.n	800278a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002772:	4b47      	ldr	r3, [pc, #284]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800277a:	2b08      	cmp	r3, #8
 800277c:	d11c      	bne.n	80027b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800277e:	4b44      	ldr	r3, [pc, #272]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d116      	bne.n	80027b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800278a:	4b41      	ldr	r3, [pc, #260]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d005      	beq.n	80027a2 <HAL_RCC_OscConfig+0x152>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d001      	beq.n	80027a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e1c7      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a2:	4b3b      	ldr	r3, [pc, #236]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	4937      	ldr	r1, [pc, #220]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027b6:	e03a      	b.n	800282e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d020      	beq.n	8002802 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027c0:	4b34      	ldr	r3, [pc, #208]	; (8002894 <HAL_RCC_OscConfig+0x244>)
 80027c2:	2201      	movs	r2, #1
 80027c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c6:	f7fe f99d 	bl	8000b04 <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027ce:	f7fe f999 	bl	8000b04 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e1a8      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e0:	4b2b      	ldr	r3, [pc, #172]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0f0      	beq.n	80027ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ec:	4b28      	ldr	r3, [pc, #160]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	4925      	ldr	r1, [pc, #148]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	600b      	str	r3, [r1, #0]
 8002800:	e015      	b.n	800282e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002802:	4b24      	ldr	r3, [pc, #144]	; (8002894 <HAL_RCC_OscConfig+0x244>)
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002808:	f7fe f97c 	bl	8000b04 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002810:	f7fe f978 	bl	8000b04 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e187      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002822:	4b1b      	ldr	r3, [pc, #108]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1f0      	bne.n	8002810 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	2b00      	cmp	r3, #0
 8002838:	d036      	beq.n	80028a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d016      	beq.n	8002870 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002842:	4b15      	ldr	r3, [pc, #84]	; (8002898 <HAL_RCC_OscConfig+0x248>)
 8002844:	2201      	movs	r2, #1
 8002846:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002848:	f7fe f95c 	bl	8000b04 <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002850:	f7fe f958 	bl	8000b04 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e167      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002862:	4b0b      	ldr	r3, [pc, #44]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 8002864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0f0      	beq.n	8002850 <HAL_RCC_OscConfig+0x200>
 800286e:	e01b      	b.n	80028a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002870:	4b09      	ldr	r3, [pc, #36]	; (8002898 <HAL_RCC_OscConfig+0x248>)
 8002872:	2200      	movs	r2, #0
 8002874:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002876:	f7fe f945 	bl	8000b04 <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800287c:	e00e      	b.n	800289c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800287e:	f7fe f941 	bl	8000b04 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d907      	bls.n	800289c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e150      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e2>
 8002890:	40023800 	.word	0x40023800
 8002894:	42470000 	.word	0x42470000
 8002898:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800289c:	4b88      	ldr	r3, [pc, #544]	; (8002ac0 <HAL_RCC_OscConfig+0x470>)
 800289e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1ea      	bne.n	800287e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 8097 	beq.w	80029e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028b6:	2300      	movs	r3, #0
 80028b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ba:	4b81      	ldr	r3, [pc, #516]	; (8002ac0 <HAL_RCC_OscConfig+0x470>)
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10f      	bne.n	80028e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	60bb      	str	r3, [r7, #8]
 80028ca:	4b7d      	ldr	r3, [pc, #500]	; (8002ac0 <HAL_RCC_OscConfig+0x470>)
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	4a7c      	ldr	r2, [pc, #496]	; (8002ac0 <HAL_RCC_OscConfig+0x470>)
 80028d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028d4:	6413      	str	r3, [r2, #64]	; 0x40
 80028d6:	4b7a      	ldr	r3, [pc, #488]	; (8002ac0 <HAL_RCC_OscConfig+0x470>)
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028de:	60bb      	str	r3, [r7, #8]
 80028e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028e2:	2301      	movs	r3, #1
 80028e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e6:	4b77      	ldr	r3, [pc, #476]	; (8002ac4 <HAL_RCC_OscConfig+0x474>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d118      	bne.n	8002924 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028f2:	4b74      	ldr	r3, [pc, #464]	; (8002ac4 <HAL_RCC_OscConfig+0x474>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a73      	ldr	r2, [pc, #460]	; (8002ac4 <HAL_RCC_OscConfig+0x474>)
 80028f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028fe:	f7fe f901 	bl	8000b04 <HAL_GetTick>
 8002902:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002904:	e008      	b.n	8002918 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002906:	f7fe f8fd 	bl	8000b04 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e10c      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002918:	4b6a      	ldr	r3, [pc, #424]	; (8002ac4 <HAL_RCC_OscConfig+0x474>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002920:	2b00      	cmp	r3, #0
 8002922:	d0f0      	beq.n	8002906 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d106      	bne.n	800293a <HAL_RCC_OscConfig+0x2ea>
 800292c:	4b64      	ldr	r3, [pc, #400]	; (8002ac0 <HAL_RCC_OscConfig+0x470>)
 800292e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002930:	4a63      	ldr	r2, [pc, #396]	; (8002ac0 <HAL_RCC_OscConfig+0x470>)
 8002932:	f043 0301 	orr.w	r3, r3, #1
 8002936:	6713      	str	r3, [r2, #112]	; 0x70
 8002938:	e01c      	b.n	8002974 <HAL_RCC_OscConfig+0x324>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	2b05      	cmp	r3, #5
 8002940:	d10c      	bne.n	800295c <HAL_RCC_OscConfig+0x30c>
 8002942:	4b5f      	ldr	r3, [pc, #380]	; (8002ac0 <HAL_RCC_OscConfig+0x470>)
 8002944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002946:	4a5e      	ldr	r2, [pc, #376]	; (8002ac0 <HAL_RCC_OscConfig+0x470>)
 8002948:	f043 0304 	orr.w	r3, r3, #4
 800294c:	6713      	str	r3, [r2, #112]	; 0x70
 800294e:	4b5c      	ldr	r3, [pc, #368]	; (8002ac0 <HAL_RCC_OscConfig+0x470>)
 8002950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002952:	4a5b      	ldr	r2, [pc, #364]	; (8002ac0 <HAL_RCC_OscConfig+0x470>)
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	6713      	str	r3, [r2, #112]	; 0x70
 800295a:	e00b      	b.n	8002974 <HAL_RCC_OscConfig+0x324>
 800295c:	4b58      	ldr	r3, [pc, #352]	; (8002ac0 <HAL_RCC_OscConfig+0x470>)
 800295e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002960:	4a57      	ldr	r2, [pc, #348]	; (8002ac0 <HAL_RCC_OscConfig+0x470>)
 8002962:	f023 0301 	bic.w	r3, r3, #1
 8002966:	6713      	str	r3, [r2, #112]	; 0x70
 8002968:	4b55      	ldr	r3, [pc, #340]	; (8002ac0 <HAL_RCC_OscConfig+0x470>)
 800296a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296c:	4a54      	ldr	r2, [pc, #336]	; (8002ac0 <HAL_RCC_OscConfig+0x470>)
 800296e:	f023 0304 	bic.w	r3, r3, #4
 8002972:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d015      	beq.n	80029a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800297c:	f7fe f8c2 	bl	8000b04 <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002982:	e00a      	b.n	800299a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002984:	f7fe f8be 	bl	8000b04 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002992:	4293      	cmp	r3, r2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e0cb      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800299a:	4b49      	ldr	r3, [pc, #292]	; (8002ac0 <HAL_RCC_OscConfig+0x470>)
 800299c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d0ee      	beq.n	8002984 <HAL_RCC_OscConfig+0x334>
 80029a6:	e014      	b.n	80029d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a8:	f7fe f8ac 	bl	8000b04 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ae:	e00a      	b.n	80029c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029b0:	f7fe f8a8 	bl	8000b04 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80029be:	4293      	cmp	r3, r2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e0b5      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029c6:	4b3e      	ldr	r3, [pc, #248]	; (8002ac0 <HAL_RCC_OscConfig+0x470>)
 80029c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1ee      	bne.n	80029b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029d2:	7dfb      	ldrb	r3, [r7, #23]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d105      	bne.n	80029e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029d8:	4b39      	ldr	r3, [pc, #228]	; (8002ac0 <HAL_RCC_OscConfig+0x470>)
 80029da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029dc:	4a38      	ldr	r2, [pc, #224]	; (8002ac0 <HAL_RCC_OscConfig+0x470>)
 80029de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 80a1 	beq.w	8002b30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029ee:	4b34      	ldr	r3, [pc, #208]	; (8002ac0 <HAL_RCC_OscConfig+0x470>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 030c 	and.w	r3, r3, #12
 80029f6:	2b08      	cmp	r3, #8
 80029f8:	d05c      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d141      	bne.n	8002a86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a02:	4b31      	ldr	r3, [pc, #196]	; (8002ac8 <HAL_RCC_OscConfig+0x478>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a08:	f7fe f87c 	bl	8000b04 <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a10:	f7fe f878 	bl	8000b04 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e087      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a22:	4b27      	ldr	r3, [pc, #156]	; (8002ac0 <HAL_RCC_OscConfig+0x470>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1f0      	bne.n	8002a10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	69da      	ldr	r2, [r3, #28]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	431a      	orrs	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	019b      	lsls	r3, r3, #6
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a44:	085b      	lsrs	r3, r3, #1
 8002a46:	3b01      	subs	r3, #1
 8002a48:	041b      	lsls	r3, r3, #16
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a50:	061b      	lsls	r3, r3, #24
 8002a52:	491b      	ldr	r1, [pc, #108]	; (8002ac0 <HAL_RCC_OscConfig+0x470>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a58:	4b1b      	ldr	r3, [pc, #108]	; (8002ac8 <HAL_RCC_OscConfig+0x478>)
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5e:	f7fe f851 	bl	8000b04 <HAL_GetTick>
 8002a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a64:	e008      	b.n	8002a78 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a66:	f7fe f84d 	bl	8000b04 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e05c      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a78:	4b11      	ldr	r3, [pc, #68]	; (8002ac0 <HAL_RCC_OscConfig+0x470>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d0f0      	beq.n	8002a66 <HAL_RCC_OscConfig+0x416>
 8002a84:	e054      	b.n	8002b30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a86:	4b10      	ldr	r3, [pc, #64]	; (8002ac8 <HAL_RCC_OscConfig+0x478>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8c:	f7fe f83a 	bl	8000b04 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a94:	f7fe f836 	bl	8000b04 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e045      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aa6:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <HAL_RCC_OscConfig+0x470>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1f0      	bne.n	8002a94 <HAL_RCC_OscConfig+0x444>
 8002ab2:	e03d      	b.n	8002b30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d107      	bne.n	8002acc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e038      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e2>
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	40007000 	.word	0x40007000
 8002ac8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002acc:	4b1b      	ldr	r3, [pc, #108]	; (8002b3c <HAL_RCC_OscConfig+0x4ec>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d028      	beq.n	8002b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d121      	bne.n	8002b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d11a      	bne.n	8002b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002afc:	4013      	ands	r3, r2
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d111      	bne.n	8002b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b12:	085b      	lsrs	r3, r3, #1
 8002b14:	3b01      	subs	r3, #1
 8002b16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d107      	bne.n	8002b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d001      	beq.n	8002b30 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e000      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3718      	adds	r7, #24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40023800 	.word	0x40023800

08002b40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d101      	bne.n	8002b54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e0cc      	b.n	8002cee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b54:	4b68      	ldr	r3, [pc, #416]	; (8002cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0307 	and.w	r3, r3, #7
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d90c      	bls.n	8002b7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b62:	4b65      	ldr	r3, [pc, #404]	; (8002cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	b2d2      	uxtb	r2, r2
 8002b68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b6a:	4b63      	ldr	r3, [pc, #396]	; (8002cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0307 	and.w	r3, r3, #7
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d001      	beq.n	8002b7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e0b8      	b.n	8002cee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d020      	beq.n	8002bca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0304 	and.w	r3, r3, #4
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d005      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b94:	4b59      	ldr	r3, [pc, #356]	; (8002cfc <HAL_RCC_ClockConfig+0x1bc>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	4a58      	ldr	r2, [pc, #352]	; (8002cfc <HAL_RCC_ClockConfig+0x1bc>)
 8002b9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0308 	and.w	r3, r3, #8
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d005      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bac:	4b53      	ldr	r3, [pc, #332]	; (8002cfc <HAL_RCC_ClockConfig+0x1bc>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	4a52      	ldr	r2, [pc, #328]	; (8002cfc <HAL_RCC_ClockConfig+0x1bc>)
 8002bb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bb8:	4b50      	ldr	r3, [pc, #320]	; (8002cfc <HAL_RCC_ClockConfig+0x1bc>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	494d      	ldr	r1, [pc, #308]	; (8002cfc <HAL_RCC_ClockConfig+0x1bc>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d044      	beq.n	8002c60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d107      	bne.n	8002bee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bde:	4b47      	ldr	r3, [pc, #284]	; (8002cfc <HAL_RCC_ClockConfig+0x1bc>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d119      	bne.n	8002c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e07f      	b.n	8002cee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d003      	beq.n	8002bfe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bfa:	2b03      	cmp	r3, #3
 8002bfc:	d107      	bne.n	8002c0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bfe:	4b3f      	ldr	r3, [pc, #252]	; (8002cfc <HAL_RCC_ClockConfig+0x1bc>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d109      	bne.n	8002c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e06f      	b.n	8002cee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c0e:	4b3b      	ldr	r3, [pc, #236]	; (8002cfc <HAL_RCC_ClockConfig+0x1bc>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e067      	b.n	8002cee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c1e:	4b37      	ldr	r3, [pc, #220]	; (8002cfc <HAL_RCC_ClockConfig+0x1bc>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f023 0203 	bic.w	r2, r3, #3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	4934      	ldr	r1, [pc, #208]	; (8002cfc <HAL_RCC_ClockConfig+0x1bc>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c30:	f7fd ff68 	bl	8000b04 <HAL_GetTick>
 8002c34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c36:	e00a      	b.n	8002c4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c38:	f7fd ff64 	bl	8000b04 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e04f      	b.n	8002cee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c4e:	4b2b      	ldr	r3, [pc, #172]	; (8002cfc <HAL_RCC_ClockConfig+0x1bc>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 020c 	and.w	r2, r3, #12
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d1eb      	bne.n	8002c38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c60:	4b25      	ldr	r3, [pc, #148]	; (8002cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0307 	and.w	r3, r3, #7
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d20c      	bcs.n	8002c88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c6e:	4b22      	ldr	r3, [pc, #136]	; (8002cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	b2d2      	uxtb	r2, r2
 8002c74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c76:	4b20      	ldr	r3, [pc, #128]	; (8002cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0307 	and.w	r3, r3, #7
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d001      	beq.n	8002c88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e032      	b.n	8002cee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0304 	and.w	r3, r3, #4
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d008      	beq.n	8002ca6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c94:	4b19      	ldr	r3, [pc, #100]	; (8002cfc <HAL_RCC_ClockConfig+0x1bc>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	4916      	ldr	r1, [pc, #88]	; (8002cfc <HAL_RCC_ClockConfig+0x1bc>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0308 	and.w	r3, r3, #8
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d009      	beq.n	8002cc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cb2:	4b12      	ldr	r3, [pc, #72]	; (8002cfc <HAL_RCC_ClockConfig+0x1bc>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	490e      	ldr	r1, [pc, #56]	; (8002cfc <HAL_RCC_ClockConfig+0x1bc>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cc6:	f000 f821 	bl	8002d0c <HAL_RCC_GetSysClockFreq>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	4b0b      	ldr	r3, [pc, #44]	; (8002cfc <HAL_RCC_ClockConfig+0x1bc>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	091b      	lsrs	r3, r3, #4
 8002cd2:	f003 030f 	and.w	r3, r3, #15
 8002cd6:	490a      	ldr	r1, [pc, #40]	; (8002d00 <HAL_RCC_ClockConfig+0x1c0>)
 8002cd8:	5ccb      	ldrb	r3, [r1, r3]
 8002cda:	fa22 f303 	lsr.w	r3, r2, r3
 8002cde:	4a09      	ldr	r2, [pc, #36]	; (8002d04 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ce2:	4b09      	ldr	r3, [pc, #36]	; (8002d08 <HAL_RCC_ClockConfig+0x1c8>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7fd fec8 	bl	8000a7c <HAL_InitTick>

  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40023c00 	.word	0x40023c00
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	08007e50 	.word	0x08007e50
 8002d04:	20000000 	.word	0x20000000
 8002d08:	20000004 	.word	0x20000004

08002d0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d10:	b094      	sub	sp, #80	; 0x50
 8002d12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	647b      	str	r3, [r7, #68]	; 0x44
 8002d18:	2300      	movs	r3, #0
 8002d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002d20:	2300      	movs	r3, #0
 8002d22:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d24:	4b79      	ldr	r3, [pc, #484]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f003 030c 	and.w	r3, r3, #12
 8002d2c:	2b08      	cmp	r3, #8
 8002d2e:	d00d      	beq.n	8002d4c <HAL_RCC_GetSysClockFreq+0x40>
 8002d30:	2b08      	cmp	r3, #8
 8002d32:	f200 80e1 	bhi.w	8002ef8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d002      	beq.n	8002d40 <HAL_RCC_GetSysClockFreq+0x34>
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	d003      	beq.n	8002d46 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d3e:	e0db      	b.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d40:	4b73      	ldr	r3, [pc, #460]	; (8002f10 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d42:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002d44:	e0db      	b.n	8002efe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d46:	4b73      	ldr	r3, [pc, #460]	; (8002f14 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d4a:	e0d8      	b.n	8002efe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d4c:	4b6f      	ldr	r3, [pc, #444]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d54:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d56:	4b6d      	ldr	r3, [pc, #436]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d063      	beq.n	8002e2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d62:	4b6a      	ldr	r3, [pc, #424]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	099b      	lsrs	r3, r3, #6
 8002d68:	2200      	movs	r2, #0
 8002d6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d6c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d74:	633b      	str	r3, [r7, #48]	; 0x30
 8002d76:	2300      	movs	r3, #0
 8002d78:	637b      	str	r3, [r7, #52]	; 0x34
 8002d7a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d7e:	4622      	mov	r2, r4
 8002d80:	462b      	mov	r3, r5
 8002d82:	f04f 0000 	mov.w	r0, #0
 8002d86:	f04f 0100 	mov.w	r1, #0
 8002d8a:	0159      	lsls	r1, r3, #5
 8002d8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d90:	0150      	lsls	r0, r2, #5
 8002d92:	4602      	mov	r2, r0
 8002d94:	460b      	mov	r3, r1
 8002d96:	4621      	mov	r1, r4
 8002d98:	1a51      	subs	r1, r2, r1
 8002d9a:	6139      	str	r1, [r7, #16]
 8002d9c:	4629      	mov	r1, r5
 8002d9e:	eb63 0301 	sbc.w	r3, r3, r1
 8002da2:	617b      	str	r3, [r7, #20]
 8002da4:	f04f 0200 	mov.w	r2, #0
 8002da8:	f04f 0300 	mov.w	r3, #0
 8002dac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002db0:	4659      	mov	r1, fp
 8002db2:	018b      	lsls	r3, r1, #6
 8002db4:	4651      	mov	r1, sl
 8002db6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dba:	4651      	mov	r1, sl
 8002dbc:	018a      	lsls	r2, r1, #6
 8002dbe:	4651      	mov	r1, sl
 8002dc0:	ebb2 0801 	subs.w	r8, r2, r1
 8002dc4:	4659      	mov	r1, fp
 8002dc6:	eb63 0901 	sbc.w	r9, r3, r1
 8002dca:	f04f 0200 	mov.w	r2, #0
 8002dce:	f04f 0300 	mov.w	r3, #0
 8002dd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002dd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002dda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002dde:	4690      	mov	r8, r2
 8002de0:	4699      	mov	r9, r3
 8002de2:	4623      	mov	r3, r4
 8002de4:	eb18 0303 	adds.w	r3, r8, r3
 8002de8:	60bb      	str	r3, [r7, #8]
 8002dea:	462b      	mov	r3, r5
 8002dec:	eb49 0303 	adc.w	r3, r9, r3
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	f04f 0200 	mov.w	r2, #0
 8002df6:	f04f 0300 	mov.w	r3, #0
 8002dfa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002dfe:	4629      	mov	r1, r5
 8002e00:	024b      	lsls	r3, r1, #9
 8002e02:	4621      	mov	r1, r4
 8002e04:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e08:	4621      	mov	r1, r4
 8002e0a:	024a      	lsls	r2, r1, #9
 8002e0c:	4610      	mov	r0, r2
 8002e0e:	4619      	mov	r1, r3
 8002e10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e12:	2200      	movs	r2, #0
 8002e14:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e1c:	f7fd fa30 	bl	8000280 <__aeabi_uldivmod>
 8002e20:	4602      	mov	r2, r0
 8002e22:	460b      	mov	r3, r1
 8002e24:	4613      	mov	r3, r2
 8002e26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e28:	e058      	b.n	8002edc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e2a:	4b38      	ldr	r3, [pc, #224]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	099b      	lsrs	r3, r3, #6
 8002e30:	2200      	movs	r2, #0
 8002e32:	4618      	mov	r0, r3
 8002e34:	4611      	mov	r1, r2
 8002e36:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e3a:	623b      	str	r3, [r7, #32]
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e44:	4642      	mov	r2, r8
 8002e46:	464b      	mov	r3, r9
 8002e48:	f04f 0000 	mov.w	r0, #0
 8002e4c:	f04f 0100 	mov.w	r1, #0
 8002e50:	0159      	lsls	r1, r3, #5
 8002e52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e56:	0150      	lsls	r0, r2, #5
 8002e58:	4602      	mov	r2, r0
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	4641      	mov	r1, r8
 8002e5e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e62:	4649      	mov	r1, r9
 8002e64:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e68:	f04f 0200 	mov.w	r2, #0
 8002e6c:	f04f 0300 	mov.w	r3, #0
 8002e70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e7c:	ebb2 040a 	subs.w	r4, r2, sl
 8002e80:	eb63 050b 	sbc.w	r5, r3, fp
 8002e84:	f04f 0200 	mov.w	r2, #0
 8002e88:	f04f 0300 	mov.w	r3, #0
 8002e8c:	00eb      	lsls	r3, r5, #3
 8002e8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e92:	00e2      	lsls	r2, r4, #3
 8002e94:	4614      	mov	r4, r2
 8002e96:	461d      	mov	r5, r3
 8002e98:	4643      	mov	r3, r8
 8002e9a:	18e3      	adds	r3, r4, r3
 8002e9c:	603b      	str	r3, [r7, #0]
 8002e9e:	464b      	mov	r3, r9
 8002ea0:	eb45 0303 	adc.w	r3, r5, r3
 8002ea4:	607b      	str	r3, [r7, #4]
 8002ea6:	f04f 0200 	mov.w	r2, #0
 8002eaa:	f04f 0300 	mov.w	r3, #0
 8002eae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002eb2:	4629      	mov	r1, r5
 8002eb4:	028b      	lsls	r3, r1, #10
 8002eb6:	4621      	mov	r1, r4
 8002eb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ebc:	4621      	mov	r1, r4
 8002ebe:	028a      	lsls	r2, r1, #10
 8002ec0:	4610      	mov	r0, r2
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	61bb      	str	r3, [r7, #24]
 8002eca:	61fa      	str	r2, [r7, #28]
 8002ecc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ed0:	f7fd f9d6 	bl	8000280 <__aeabi_uldivmod>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	4613      	mov	r3, r2
 8002eda:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002edc:	4b0b      	ldr	r3, [pc, #44]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	0c1b      	lsrs	r3, r3, #16
 8002ee2:	f003 0303 	and.w	r3, r3, #3
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002eec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002eee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ef6:	e002      	b.n	8002efe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ef8:	4b05      	ldr	r3, [pc, #20]	; (8002f10 <HAL_RCC_GetSysClockFreq+0x204>)
 8002efa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002efc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002efe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3750      	adds	r7, #80	; 0x50
 8002f04:	46bd      	mov	sp, r7
 8002f06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	00f42400 	.word	0x00f42400
 8002f14:	007a1200 	.word	0x007a1200

08002f18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f1c:	4b03      	ldr	r3, [pc, #12]	; (8002f2c <HAL_RCC_GetHCLKFreq+0x14>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	20000000 	.word	0x20000000

08002f30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e041      	b.n	8002fc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d106      	bne.n	8002f5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7fd fc9e 	bl	8000898 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2202      	movs	r2, #2
 8002f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	3304      	adds	r3, #4
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4610      	mov	r0, r2
 8002f70:	f000 f8be 	bl	80030f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
	...

08002fd0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d001      	beq.n	8002fe8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e046      	b.n	8003076 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2202      	movs	r2, #2
 8002fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a23      	ldr	r2, [pc, #140]	; (8003084 <HAL_TIM_Base_Start+0xb4>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d022      	beq.n	8003040 <HAL_TIM_Base_Start+0x70>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003002:	d01d      	beq.n	8003040 <HAL_TIM_Base_Start+0x70>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a1f      	ldr	r2, [pc, #124]	; (8003088 <HAL_TIM_Base_Start+0xb8>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d018      	beq.n	8003040 <HAL_TIM_Base_Start+0x70>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a1e      	ldr	r2, [pc, #120]	; (800308c <HAL_TIM_Base_Start+0xbc>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d013      	beq.n	8003040 <HAL_TIM_Base_Start+0x70>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a1c      	ldr	r2, [pc, #112]	; (8003090 <HAL_TIM_Base_Start+0xc0>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d00e      	beq.n	8003040 <HAL_TIM_Base_Start+0x70>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a1b      	ldr	r2, [pc, #108]	; (8003094 <HAL_TIM_Base_Start+0xc4>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d009      	beq.n	8003040 <HAL_TIM_Base_Start+0x70>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a19      	ldr	r2, [pc, #100]	; (8003098 <HAL_TIM_Base_Start+0xc8>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d004      	beq.n	8003040 <HAL_TIM_Base_Start+0x70>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a18      	ldr	r2, [pc, #96]	; (800309c <HAL_TIM_Base_Start+0xcc>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d111      	bne.n	8003064 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 0307 	and.w	r3, r3, #7
 800304a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2b06      	cmp	r3, #6
 8003050:	d010      	beq.n	8003074 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f042 0201 	orr.w	r2, r2, #1
 8003060:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003062:	e007      	b.n	8003074 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f042 0201 	orr.w	r2, r2, #1
 8003072:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3714      	adds	r7, #20
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	40010000 	.word	0x40010000
 8003088:	40000400 	.word	0x40000400
 800308c:	40000800 	.word	0x40000800
 8003090:	40000c00 	.word	0x40000c00
 8003094:	40010400 	.word	0x40010400
 8003098:	40014000 	.word	0x40014000
 800309c:	40001800 	.word	0x40001800

080030a0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6a1a      	ldr	r2, [r3, #32]
 80030ae:	f241 1311 	movw	r3, #4369	; 0x1111
 80030b2:	4013      	ands	r3, r2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10f      	bne.n	80030d8 <HAL_TIM_Base_Stop+0x38>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6a1a      	ldr	r2, [r3, #32]
 80030be:	f240 4344 	movw	r3, #1092	; 0x444
 80030c2:	4013      	ands	r3, r2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d107      	bne.n	80030d8 <HAL_TIM_Base_Stop+0x38>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 0201 	bic.w	r2, r2, #1
 80030d6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
	...

080030f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a40      	ldr	r2, [pc, #256]	; (8003204 <TIM_Base_SetConfig+0x114>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d013      	beq.n	8003130 <TIM_Base_SetConfig+0x40>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800310e:	d00f      	beq.n	8003130 <TIM_Base_SetConfig+0x40>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a3d      	ldr	r2, [pc, #244]	; (8003208 <TIM_Base_SetConfig+0x118>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d00b      	beq.n	8003130 <TIM_Base_SetConfig+0x40>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a3c      	ldr	r2, [pc, #240]	; (800320c <TIM_Base_SetConfig+0x11c>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d007      	beq.n	8003130 <TIM_Base_SetConfig+0x40>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a3b      	ldr	r2, [pc, #236]	; (8003210 <TIM_Base_SetConfig+0x120>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d003      	beq.n	8003130 <TIM_Base_SetConfig+0x40>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a3a      	ldr	r2, [pc, #232]	; (8003214 <TIM_Base_SetConfig+0x124>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d108      	bne.n	8003142 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003136:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	4313      	orrs	r3, r2
 8003140:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a2f      	ldr	r2, [pc, #188]	; (8003204 <TIM_Base_SetConfig+0x114>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d02b      	beq.n	80031a2 <TIM_Base_SetConfig+0xb2>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003150:	d027      	beq.n	80031a2 <TIM_Base_SetConfig+0xb2>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a2c      	ldr	r2, [pc, #176]	; (8003208 <TIM_Base_SetConfig+0x118>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d023      	beq.n	80031a2 <TIM_Base_SetConfig+0xb2>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a2b      	ldr	r2, [pc, #172]	; (800320c <TIM_Base_SetConfig+0x11c>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d01f      	beq.n	80031a2 <TIM_Base_SetConfig+0xb2>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a2a      	ldr	r2, [pc, #168]	; (8003210 <TIM_Base_SetConfig+0x120>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d01b      	beq.n	80031a2 <TIM_Base_SetConfig+0xb2>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a29      	ldr	r2, [pc, #164]	; (8003214 <TIM_Base_SetConfig+0x124>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d017      	beq.n	80031a2 <TIM_Base_SetConfig+0xb2>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a28      	ldr	r2, [pc, #160]	; (8003218 <TIM_Base_SetConfig+0x128>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d013      	beq.n	80031a2 <TIM_Base_SetConfig+0xb2>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a27      	ldr	r2, [pc, #156]	; (800321c <TIM_Base_SetConfig+0x12c>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d00f      	beq.n	80031a2 <TIM_Base_SetConfig+0xb2>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a26      	ldr	r2, [pc, #152]	; (8003220 <TIM_Base_SetConfig+0x130>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d00b      	beq.n	80031a2 <TIM_Base_SetConfig+0xb2>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a25      	ldr	r2, [pc, #148]	; (8003224 <TIM_Base_SetConfig+0x134>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d007      	beq.n	80031a2 <TIM_Base_SetConfig+0xb2>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a24      	ldr	r2, [pc, #144]	; (8003228 <TIM_Base_SetConfig+0x138>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d003      	beq.n	80031a2 <TIM_Base_SetConfig+0xb2>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a23      	ldr	r2, [pc, #140]	; (800322c <TIM_Base_SetConfig+0x13c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d108      	bne.n	80031b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	4313      	orrs	r3, r2
 80031c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a0a      	ldr	r2, [pc, #40]	; (8003204 <TIM_Base_SetConfig+0x114>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d003      	beq.n	80031e8 <TIM_Base_SetConfig+0xf8>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a0c      	ldr	r2, [pc, #48]	; (8003214 <TIM_Base_SetConfig+0x124>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d103      	bne.n	80031f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	691a      	ldr	r2, [r3, #16]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	615a      	str	r2, [r3, #20]
}
 80031f6:	bf00      	nop
 80031f8:	3714      	adds	r7, #20
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	40010000 	.word	0x40010000
 8003208:	40000400 	.word	0x40000400
 800320c:	40000800 	.word	0x40000800
 8003210:	40000c00 	.word	0x40000c00
 8003214:	40010400 	.word	0x40010400
 8003218:	40014000 	.word	0x40014000
 800321c:	40014400 	.word	0x40014400
 8003220:	40014800 	.word	0x40014800
 8003224:	40001800 	.word	0x40001800
 8003228:	40001c00 	.word	0x40001c00
 800322c:	40002000 	.word	0x40002000

08003230 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003230:	b084      	sub	sp, #16
 8003232:	b580      	push	{r7, lr}
 8003234:	b084      	sub	sp, #16
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
 800323a:	f107 001c 	add.w	r0, r7, #28
 800323e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003244:	2b01      	cmp	r3, #1
 8003246:	d122      	bne.n	800328e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800325c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003272:	2b01      	cmp	r3, #1
 8003274:	d105      	bne.n	8003282 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f001 fbee 	bl	8004a64 <USB_CoreReset>
 8003288:	4603      	mov	r3, r0
 800328a:	73fb      	strb	r3, [r7, #15]
 800328c:	e01a      	b.n	80032c4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f001 fbe2 	bl	8004a64 <USB_CoreReset>
 80032a0:	4603      	mov	r3, r0
 80032a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80032a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d106      	bne.n	80032b8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	639a      	str	r2, [r3, #56]	; 0x38
 80032b6:	e005      	b.n	80032c4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80032c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d10b      	bne.n	80032e2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f043 0206 	orr.w	r2, r3, #6
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f043 0220 	orr.w	r2, r3, #32
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80032e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80032ee:	b004      	add	sp, #16
 80032f0:	4770      	bx	lr
	...

080032f4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b087      	sub	sp, #28
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	4613      	mov	r3, r2
 8003300:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003302:	79fb      	ldrb	r3, [r7, #7]
 8003304:	2b02      	cmp	r3, #2
 8003306:	d165      	bne.n	80033d4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	4a41      	ldr	r2, [pc, #260]	; (8003410 <USB_SetTurnaroundTime+0x11c>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d906      	bls.n	800331e <USB_SetTurnaroundTime+0x2a>
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	4a40      	ldr	r2, [pc, #256]	; (8003414 <USB_SetTurnaroundTime+0x120>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d202      	bcs.n	800331e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003318:	230f      	movs	r3, #15
 800331a:	617b      	str	r3, [r7, #20]
 800331c:	e062      	b.n	80033e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	4a3c      	ldr	r2, [pc, #240]	; (8003414 <USB_SetTurnaroundTime+0x120>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d306      	bcc.n	8003334 <USB_SetTurnaroundTime+0x40>
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	4a3b      	ldr	r2, [pc, #236]	; (8003418 <USB_SetTurnaroundTime+0x124>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d202      	bcs.n	8003334 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800332e:	230e      	movs	r3, #14
 8003330:	617b      	str	r3, [r7, #20]
 8003332:	e057      	b.n	80033e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	4a38      	ldr	r2, [pc, #224]	; (8003418 <USB_SetTurnaroundTime+0x124>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d306      	bcc.n	800334a <USB_SetTurnaroundTime+0x56>
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	4a37      	ldr	r2, [pc, #220]	; (800341c <USB_SetTurnaroundTime+0x128>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d202      	bcs.n	800334a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003344:	230d      	movs	r3, #13
 8003346:	617b      	str	r3, [r7, #20]
 8003348:	e04c      	b.n	80033e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	4a33      	ldr	r2, [pc, #204]	; (800341c <USB_SetTurnaroundTime+0x128>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d306      	bcc.n	8003360 <USB_SetTurnaroundTime+0x6c>
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	4a32      	ldr	r2, [pc, #200]	; (8003420 <USB_SetTurnaroundTime+0x12c>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d802      	bhi.n	8003360 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800335a:	230c      	movs	r3, #12
 800335c:	617b      	str	r3, [r7, #20]
 800335e:	e041      	b.n	80033e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	4a2f      	ldr	r2, [pc, #188]	; (8003420 <USB_SetTurnaroundTime+0x12c>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d906      	bls.n	8003376 <USB_SetTurnaroundTime+0x82>
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	4a2e      	ldr	r2, [pc, #184]	; (8003424 <USB_SetTurnaroundTime+0x130>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d802      	bhi.n	8003376 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003370:	230b      	movs	r3, #11
 8003372:	617b      	str	r3, [r7, #20]
 8003374:	e036      	b.n	80033e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	4a2a      	ldr	r2, [pc, #168]	; (8003424 <USB_SetTurnaroundTime+0x130>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d906      	bls.n	800338c <USB_SetTurnaroundTime+0x98>
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	4a29      	ldr	r2, [pc, #164]	; (8003428 <USB_SetTurnaroundTime+0x134>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d802      	bhi.n	800338c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003386:	230a      	movs	r3, #10
 8003388:	617b      	str	r3, [r7, #20]
 800338a:	e02b      	b.n	80033e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	4a26      	ldr	r2, [pc, #152]	; (8003428 <USB_SetTurnaroundTime+0x134>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d906      	bls.n	80033a2 <USB_SetTurnaroundTime+0xae>
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	4a25      	ldr	r2, [pc, #148]	; (800342c <USB_SetTurnaroundTime+0x138>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d202      	bcs.n	80033a2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800339c:	2309      	movs	r3, #9
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	e020      	b.n	80033e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	4a21      	ldr	r2, [pc, #132]	; (800342c <USB_SetTurnaroundTime+0x138>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d306      	bcc.n	80033b8 <USB_SetTurnaroundTime+0xc4>
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	4a20      	ldr	r2, [pc, #128]	; (8003430 <USB_SetTurnaroundTime+0x13c>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d802      	bhi.n	80033b8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80033b2:	2308      	movs	r3, #8
 80033b4:	617b      	str	r3, [r7, #20]
 80033b6:	e015      	b.n	80033e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	4a1d      	ldr	r2, [pc, #116]	; (8003430 <USB_SetTurnaroundTime+0x13c>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d906      	bls.n	80033ce <USB_SetTurnaroundTime+0xda>
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	4a1c      	ldr	r2, [pc, #112]	; (8003434 <USB_SetTurnaroundTime+0x140>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d202      	bcs.n	80033ce <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80033c8:	2307      	movs	r3, #7
 80033ca:	617b      	str	r3, [r7, #20]
 80033cc:	e00a      	b.n	80033e4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80033ce:	2306      	movs	r3, #6
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	e007      	b.n	80033e4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80033d4:	79fb      	ldrb	r3, [r7, #7]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d102      	bne.n	80033e0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80033da:	2309      	movs	r3, #9
 80033dc:	617b      	str	r3, [r7, #20]
 80033de:	e001      	b.n	80033e4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80033e0:	2309      	movs	r3, #9
 80033e2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	68da      	ldr	r2, [r3, #12]
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	029b      	lsls	r3, r3, #10
 80033f8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80033fc:	431a      	orrs	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	371c      	adds	r7, #28
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	00d8acbf 	.word	0x00d8acbf
 8003414:	00e4e1c0 	.word	0x00e4e1c0
 8003418:	00f42400 	.word	0x00f42400
 800341c:	01067380 	.word	0x01067380
 8003420:	011a499f 	.word	0x011a499f
 8003424:	01312cff 	.word	0x01312cff
 8003428:	014ca43f 	.word	0x014ca43f
 800342c:	016e3600 	.word	0x016e3600
 8003430:	01a6ab1f 	.word	0x01a6ab1f
 8003434:	01e84800 	.word	0x01e84800

08003438 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f043 0201 	orr.w	r2, r3, #1
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f023 0201 	bic.w	r2, r3, #1
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	460b      	mov	r3, r1
 8003486:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003488:	2300      	movs	r3, #0
 800348a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003498:	78fb      	ldrb	r3, [r7, #3]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d115      	bne.n	80034ca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80034aa:	2001      	movs	r0, #1
 80034ac:	f7fd fb36 	bl	8000b1c <HAL_Delay>
      ms++;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	3301      	adds	r3, #1
 80034b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f001 fa45 	bl	8004946 <USB_GetMode>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d01e      	beq.n	8003500 <USB_SetCurrentMode+0x84>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2b31      	cmp	r3, #49	; 0x31
 80034c6:	d9f0      	bls.n	80034aa <USB_SetCurrentMode+0x2e>
 80034c8:	e01a      	b.n	8003500 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80034ca:	78fb      	ldrb	r3, [r7, #3]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d115      	bne.n	80034fc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80034dc:	2001      	movs	r0, #1
 80034de:	f7fd fb1d 	bl	8000b1c <HAL_Delay>
      ms++;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	3301      	adds	r3, #1
 80034e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f001 fa2c 	bl	8004946 <USB_GetMode>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d005      	beq.n	8003500 <USB_SetCurrentMode+0x84>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2b31      	cmp	r3, #49	; 0x31
 80034f8:	d9f0      	bls.n	80034dc <USB_SetCurrentMode+0x60>
 80034fa:	e001      	b.n	8003500 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e005      	b.n	800350c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2b32      	cmp	r3, #50	; 0x32
 8003504:	d101      	bne.n	800350a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e000      	b.n	800350c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003514:	b084      	sub	sp, #16
 8003516:	b580      	push	{r7, lr}
 8003518:	b086      	sub	sp, #24
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
 800351e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003522:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003526:	2300      	movs	r3, #0
 8003528:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800352e:	2300      	movs	r3, #0
 8003530:	613b      	str	r3, [r7, #16]
 8003532:	e009      	b.n	8003548 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	3340      	adds	r3, #64	; 0x40
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4413      	add	r3, r2
 800353e:	2200      	movs	r2, #0
 8003540:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	3301      	adds	r3, #1
 8003546:	613b      	str	r3, [r7, #16]
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	2b0e      	cmp	r3, #14
 800354c:	d9f2      	bls.n	8003534 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800354e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003550:	2b00      	cmp	r3, #0
 8003552:	d11c      	bne.n	800358e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003562:	f043 0302 	orr.w	r3, r3, #2
 8003566:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003578:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003584:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	639a      	str	r2, [r3, #56]	; 0x38
 800358c:	e00b      	b.n	80035a6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003592:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80035ac:	461a      	mov	r2, r3
 80035ae:	2300      	movs	r3, #0
 80035b0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035b8:	4619      	mov	r1, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035c0:	461a      	mov	r2, r3
 80035c2:	680b      	ldr	r3, [r1, #0]
 80035c4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80035c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d10c      	bne.n	80035e6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80035cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d104      	bne.n	80035dc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80035d2:	2100      	movs	r1, #0
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 f965 	bl	80038a4 <USB_SetDevSpeed>
 80035da:	e008      	b.n	80035ee <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80035dc:	2101      	movs	r1, #1
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f960 	bl	80038a4 <USB_SetDevSpeed>
 80035e4:	e003      	b.n	80035ee <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80035e6:	2103      	movs	r1, #3
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 f95b 	bl	80038a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80035ee:	2110      	movs	r1, #16
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 f8f3 	bl	80037dc <USB_FlushTxFifo>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 f91f 	bl	8003844 <USB_FlushRxFifo>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003616:	461a      	mov	r2, r3
 8003618:	2300      	movs	r3, #0
 800361a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003622:	461a      	mov	r2, r3
 8003624:	2300      	movs	r3, #0
 8003626:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800362e:	461a      	mov	r2, r3
 8003630:	2300      	movs	r3, #0
 8003632:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003634:	2300      	movs	r3, #0
 8003636:	613b      	str	r3, [r7, #16]
 8003638:	e043      	b.n	80036c2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	015a      	lsls	r2, r3, #5
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	4413      	add	r3, r2
 8003642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800364c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003650:	d118      	bne.n	8003684 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10a      	bne.n	800366e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	015a      	lsls	r2, r3, #5
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	4413      	add	r3, r2
 8003660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003664:	461a      	mov	r2, r3
 8003666:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800366a:	6013      	str	r3, [r2, #0]
 800366c:	e013      	b.n	8003696 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	015a      	lsls	r2, r3, #5
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	4413      	add	r3, r2
 8003676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800367a:	461a      	mov	r2, r3
 800367c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003680:	6013      	str	r3, [r2, #0]
 8003682:	e008      	b.n	8003696 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	015a      	lsls	r2, r3, #5
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	4413      	add	r3, r2
 800368c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003690:	461a      	mov	r2, r3
 8003692:	2300      	movs	r3, #0
 8003694:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	015a      	lsls	r2, r3, #5
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	4413      	add	r3, r2
 800369e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036a2:	461a      	mov	r2, r3
 80036a4:	2300      	movs	r3, #0
 80036a6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	015a      	lsls	r2, r3, #5
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	4413      	add	r3, r2
 80036b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036b4:	461a      	mov	r2, r3
 80036b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80036ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	3301      	adds	r3, #1
 80036c0:	613b      	str	r3, [r7, #16]
 80036c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d3b7      	bcc.n	800363a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80036ca:	2300      	movs	r3, #0
 80036cc:	613b      	str	r3, [r7, #16]
 80036ce:	e043      	b.n	8003758 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	015a      	lsls	r2, r3, #5
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	4413      	add	r3, r2
 80036d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80036e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036e6:	d118      	bne.n	800371a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10a      	bne.n	8003704 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	015a      	lsls	r2, r3, #5
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	4413      	add	r3, r2
 80036f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036fa:	461a      	mov	r2, r3
 80036fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003700:	6013      	str	r3, [r2, #0]
 8003702:	e013      	b.n	800372c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	015a      	lsls	r2, r3, #5
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4413      	add	r3, r2
 800370c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003710:	461a      	mov	r2, r3
 8003712:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003716:	6013      	str	r3, [r2, #0]
 8003718:	e008      	b.n	800372c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	015a      	lsls	r2, r3, #5
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	4413      	add	r3, r2
 8003722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003726:	461a      	mov	r2, r3
 8003728:	2300      	movs	r3, #0
 800372a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	015a      	lsls	r2, r3, #5
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	4413      	add	r3, r2
 8003734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003738:	461a      	mov	r2, r3
 800373a:	2300      	movs	r3, #0
 800373c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	015a      	lsls	r2, r3, #5
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	4413      	add	r3, r2
 8003746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800374a:	461a      	mov	r2, r3
 800374c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003750:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	3301      	adds	r3, #1
 8003756:	613b      	str	r3, [r7, #16]
 8003758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	429a      	cmp	r2, r3
 800375e:	d3b7      	bcc.n	80036d0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800376e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003772:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003780:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003784:	2b00      	cmp	r3, #0
 8003786:	d105      	bne.n	8003794 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	f043 0210 	orr.w	r2, r3, #16
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	699a      	ldr	r2, [r3, #24]
 8003798:	4b0f      	ldr	r3, [pc, #60]	; (80037d8 <USB_DevInit+0x2c4>)
 800379a:	4313      	orrs	r3, r2
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80037a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d005      	beq.n	80037b2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	f043 0208 	orr.w	r2, r3, #8
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80037b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d107      	bne.n	80037c8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80037c0:	f043 0304 	orr.w	r3, r3, #4
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80037c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3718      	adds	r7, #24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80037d4:	b004      	add	sp, #16
 80037d6:	4770      	bx	lr
 80037d8:	803c3800 	.word	0x803c3800

080037dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	3301      	adds	r3, #1
 80037ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4a13      	ldr	r2, [pc, #76]	; (8003840 <USB_FlushTxFifo+0x64>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d901      	bls.n	80037fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e01b      	b.n	8003834 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	2b00      	cmp	r3, #0
 8003802:	daf2      	bge.n	80037ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003804:	2300      	movs	r3, #0
 8003806:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	019b      	lsls	r3, r3, #6
 800380c:	f043 0220 	orr.w	r2, r3, #32
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	3301      	adds	r3, #1
 8003818:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	4a08      	ldr	r2, [pc, #32]	; (8003840 <USB_FlushTxFifo+0x64>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d901      	bls.n	8003826 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e006      	b.n	8003834 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	f003 0320 	and.w	r3, r3, #32
 800382e:	2b20      	cmp	r3, #32
 8003830:	d0f0      	beq.n	8003814 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3714      	adds	r7, #20
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr
 8003840:	00030d40 	.word	0x00030d40

08003844 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800384c:	2300      	movs	r3, #0
 800384e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	3301      	adds	r3, #1
 8003854:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	4a11      	ldr	r2, [pc, #68]	; (80038a0 <USB_FlushRxFifo+0x5c>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d901      	bls.n	8003862 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e018      	b.n	8003894 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	2b00      	cmp	r3, #0
 8003868:	daf2      	bge.n	8003850 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800386a:	2300      	movs	r3, #0
 800386c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2210      	movs	r2, #16
 8003872:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	3301      	adds	r3, #1
 8003878:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	4a08      	ldr	r2, [pc, #32]	; (80038a0 <USB_FlushRxFifo+0x5c>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d901      	bls.n	8003886 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e006      	b.n	8003894 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	f003 0310 	and.w	r3, r3, #16
 800388e:	2b10      	cmp	r3, #16
 8003890:	d0f0      	beq.n	8003874 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3714      	adds	r7, #20
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	00030d40 	.word	0x00030d40

080038a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	460b      	mov	r3, r1
 80038ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	78fb      	ldrb	r3, [r7, #3]
 80038be:	68f9      	ldr	r1, [r7, #12]
 80038c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038c4:	4313      	orrs	r3, r2
 80038c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3714      	adds	r7, #20
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr

080038d6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80038d6:	b480      	push	{r7}
 80038d8:	b087      	sub	sp, #28
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 0306 	and.w	r3, r3, #6
 80038ee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d102      	bne.n	80038fc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80038f6:	2300      	movs	r3, #0
 80038f8:	75fb      	strb	r3, [r7, #23]
 80038fa:	e00a      	b.n	8003912 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d002      	beq.n	8003908 <USB_GetDevSpeed+0x32>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2b06      	cmp	r3, #6
 8003906:	d102      	bne.n	800390e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003908:	2302      	movs	r3, #2
 800390a:	75fb      	strb	r3, [r7, #23]
 800390c:	e001      	b.n	8003912 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800390e:	230f      	movs	r3, #15
 8003910:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003912:	7dfb      	ldrb	r3, [r7, #23]
}
 8003914:	4618      	mov	r0, r3
 8003916:	371c      	adds	r7, #28
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	785b      	ldrb	r3, [r3, #1]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d13a      	bne.n	80039b2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003942:	69da      	ldr	r2, [r3, #28]
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	f003 030f 	and.w	r3, r3, #15
 800394c:	2101      	movs	r1, #1
 800394e:	fa01 f303 	lsl.w	r3, r1, r3
 8003952:	b29b      	uxth	r3, r3
 8003954:	68f9      	ldr	r1, [r7, #12]
 8003956:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800395a:	4313      	orrs	r3, r2
 800395c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	015a      	lsls	r2, r3, #5
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	4413      	add	r3, r2
 8003966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d155      	bne.n	8003a20 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	015a      	lsls	r2, r3, #5
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	4413      	add	r3, r2
 800397c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	791b      	ldrb	r3, [r3, #4]
 800398e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003990:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	059b      	lsls	r3, r3, #22
 8003996:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003998:	4313      	orrs	r3, r2
 800399a:	68ba      	ldr	r2, [r7, #8]
 800399c:	0151      	lsls	r1, r2, #5
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	440a      	add	r2, r1
 80039a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039ae:	6013      	str	r3, [r2, #0]
 80039b0:	e036      	b.n	8003a20 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039b8:	69da      	ldr	r2, [r3, #28]
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	2101      	movs	r1, #1
 80039c4:	fa01 f303 	lsl.w	r3, r1, r3
 80039c8:	041b      	lsls	r3, r3, #16
 80039ca:	68f9      	ldr	r1, [r7, #12]
 80039cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039d0:	4313      	orrs	r3, r2
 80039d2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	015a      	lsls	r2, r3, #5
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	4413      	add	r3, r2
 80039dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d11a      	bne.n	8003a20 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	015a      	lsls	r2, r3, #5
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	4413      	add	r3, r2
 80039f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	791b      	ldrb	r3, [r3, #4]
 8003a04:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003a06:	430b      	orrs	r3, r1
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	0151      	lsls	r1, r2, #5
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	440a      	add	r2, r1
 8003a12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a1e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3714      	adds	r7, #20
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
	...

08003a30 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	785b      	ldrb	r3, [r3, #1]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d161      	bne.n	8003b10 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	015a      	lsls	r2, r3, #5
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	4413      	add	r3, r2
 8003a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a62:	d11f      	bne.n	8003aa4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	015a      	lsls	r2, r3, #5
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	0151      	lsls	r1, r2, #5
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	440a      	add	r2, r1
 8003a7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a82:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	015a      	lsls	r2, r3, #5
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68ba      	ldr	r2, [r7, #8]
 8003a94:	0151      	lsls	r1, r2, #5
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	440a      	add	r2, r1
 8003a9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003aa2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	f003 030f 	and.w	r3, r3, #15
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	43db      	mvns	r3, r3
 8003abe:	68f9      	ldr	r1, [r7, #12]
 8003ac0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ace:	69da      	ldr	r2, [r3, #28]
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	f003 030f 	and.w	r3, r3, #15
 8003ad8:	2101      	movs	r1, #1
 8003ada:	fa01 f303 	lsl.w	r3, r1, r3
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	68f9      	ldr	r1, [r7, #12]
 8003ae4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ae8:	4013      	ands	r3, r2
 8003aea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	015a      	lsls	r2, r3, #5
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4413      	add	r3, r2
 8003af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	0159      	lsls	r1, r3, #5
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	440b      	add	r3, r1
 8003b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b06:	4619      	mov	r1, r3
 8003b08:	4b35      	ldr	r3, [pc, #212]	; (8003be0 <USB_DeactivateEndpoint+0x1b0>)
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	600b      	str	r3, [r1, #0]
 8003b0e:	e060      	b.n	8003bd2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	015a      	lsls	r2, r3, #5
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	4413      	add	r3, r2
 8003b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b26:	d11f      	bne.n	8003b68 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	015a      	lsls	r2, r3, #5
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	4413      	add	r3, r2
 8003b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	0151      	lsls	r1, r2, #5
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	440a      	add	r2, r1
 8003b3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b46:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	015a      	lsls	r2, r3, #5
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	4413      	add	r3, r2
 8003b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68ba      	ldr	r2, [r7, #8]
 8003b58:	0151      	lsls	r1, r2, #5
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	440a      	add	r2, r1
 8003b5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b66:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	f003 030f 	and.w	r3, r3, #15
 8003b78:	2101      	movs	r1, #1
 8003b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b7e:	041b      	lsls	r3, r3, #16
 8003b80:	43db      	mvns	r3, r3
 8003b82:	68f9      	ldr	r1, [r7, #12]
 8003b84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b88:	4013      	ands	r3, r2
 8003b8a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b92:	69da      	ldr	r2, [r3, #28]
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	f003 030f 	and.w	r3, r3, #15
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba2:	041b      	lsls	r3, r3, #16
 8003ba4:	43db      	mvns	r3, r3
 8003ba6:	68f9      	ldr	r1, [r7, #12]
 8003ba8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bac:	4013      	ands	r3, r2
 8003bae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	0159      	lsls	r1, r3, #5
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	440b      	add	r3, r1
 8003bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bca:	4619      	mov	r1, r3
 8003bcc:	4b05      	ldr	r3, [pc, #20]	; (8003be4 <USB_DeactivateEndpoint+0x1b4>)
 8003bce:	4013      	ands	r3, r2
 8003bd0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3714      	adds	r7, #20
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr
 8003be0:	ec337800 	.word	0xec337800
 8003be4:	eff37800 	.word	0xeff37800

08003be8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b08a      	sub	sp, #40	; 0x28
 8003bec:	af02      	add	r7, sp, #8
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	785b      	ldrb	r3, [r3, #1]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	f040 815c 	bne.w	8003ec2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d132      	bne.n	8003c78 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	015a      	lsls	r2, r3, #5
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	4413      	add	r3, r2
 8003c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	0151      	lsls	r1, r2, #5
 8003c24:	69fa      	ldr	r2, [r7, #28]
 8003c26:	440a      	add	r2, r1
 8003c28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c2c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003c30:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003c34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	015a      	lsls	r2, r3, #5
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	0151      	lsls	r1, r2, #5
 8003c48:	69fa      	ldr	r2, [r7, #28]
 8003c4a:	440a      	add	r2, r1
 8003c4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	015a      	lsls	r2, r3, #5
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	69ba      	ldr	r2, [r7, #24]
 8003c66:	0151      	lsls	r1, r2, #5
 8003c68:	69fa      	ldr	r2, [r7, #28]
 8003c6a:	440a      	add	r2, r1
 8003c6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c70:	0cdb      	lsrs	r3, r3, #19
 8003c72:	04db      	lsls	r3, r3, #19
 8003c74:	6113      	str	r3, [r2, #16]
 8003c76:	e074      	b.n	8003d62 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	015a      	lsls	r2, r3, #5
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	4413      	add	r3, r2
 8003c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	0151      	lsls	r1, r2, #5
 8003c8a:	69fa      	ldr	r2, [r7, #28]
 8003c8c:	440a      	add	r2, r1
 8003c8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c92:	0cdb      	lsrs	r3, r3, #19
 8003c94:	04db      	lsls	r3, r3, #19
 8003c96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	015a      	lsls	r2, r3, #5
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	0151      	lsls	r1, r2, #5
 8003caa:	69fa      	ldr	r2, [r7, #28]
 8003cac:	440a      	add	r2, r1
 8003cae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cb2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003cb6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003cba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	015a      	lsls	r2, r3, #5
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cc8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	6999      	ldr	r1, [r3, #24]
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	440b      	add	r3, r1
 8003cd4:	1e59      	subs	r1, r3, #1
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cde:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003ce0:	4b9d      	ldr	r3, [pc, #628]	; (8003f58 <USB_EPStartXfer+0x370>)
 8003ce2:	400b      	ands	r3, r1
 8003ce4:	69b9      	ldr	r1, [r7, #24]
 8003ce6:	0148      	lsls	r0, r1, #5
 8003ce8:	69f9      	ldr	r1, [r7, #28]
 8003cea:	4401      	add	r1, r0
 8003cec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	015a      	lsls	r2, r3, #5
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d00:	691a      	ldr	r2, [r3, #16]
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d0a:	69b9      	ldr	r1, [r7, #24]
 8003d0c:	0148      	lsls	r0, r1, #5
 8003d0e:	69f9      	ldr	r1, [r7, #28]
 8003d10:	4401      	add	r1, r0
 8003d12:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003d16:	4313      	orrs	r3, r2
 8003d18:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	791b      	ldrb	r3, [r3, #4]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d11f      	bne.n	8003d62 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	015a      	lsls	r2, r3, #5
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	4413      	add	r3, r2
 8003d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	0151      	lsls	r1, r2, #5
 8003d34:	69fa      	ldr	r2, [r7, #28]
 8003d36:	440a      	add	r2, r1
 8003d38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d3c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003d40:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	015a      	lsls	r2, r3, #5
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	4413      	add	r3, r2
 8003d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	0151      	lsls	r1, r2, #5
 8003d54:	69fa      	ldr	r2, [r7, #28]
 8003d56:	440a      	add	r2, r1
 8003d58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003d60:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003d62:	79fb      	ldrb	r3, [r7, #7]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d14b      	bne.n	8003e00 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d009      	beq.n	8003d84 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	015a      	lsls	r2, r3, #5
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	4413      	add	r3, r2
 8003d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	791b      	ldrb	r3, [r3, #4]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d128      	bne.n	8003dde <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d110      	bne.n	8003dbe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	015a      	lsls	r2, r3, #5
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	4413      	add	r3, r2
 8003da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	0151      	lsls	r1, r2, #5
 8003dae:	69fa      	ldr	r2, [r7, #28]
 8003db0:	440a      	add	r2, r1
 8003db2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003db6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003dba:	6013      	str	r3, [r2, #0]
 8003dbc:	e00f      	b.n	8003dde <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	015a      	lsls	r2, r3, #5
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	0151      	lsls	r1, r2, #5
 8003dd0:	69fa      	ldr	r2, [r7, #28]
 8003dd2:	440a      	add	r2, r1
 8003dd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ddc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	015a      	lsls	r2, r3, #5
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	4413      	add	r3, r2
 8003de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	0151      	lsls	r1, r2, #5
 8003df0:	69fa      	ldr	r2, [r7, #28]
 8003df2:	440a      	add	r2, r1
 8003df4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003df8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003dfc:	6013      	str	r3, [r2, #0]
 8003dfe:	e133      	b.n	8004068 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	015a      	lsls	r2, r3, #5
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	4413      	add	r3, r2
 8003e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	0151      	lsls	r1, r2, #5
 8003e12:	69fa      	ldr	r2, [r7, #28]
 8003e14:	440a      	add	r2, r1
 8003e16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003e1e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	791b      	ldrb	r3, [r3, #4]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d015      	beq.n	8003e54 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 811b 	beq.w	8004068 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	f003 030f 	and.w	r3, r3, #15
 8003e42:	2101      	movs	r1, #1
 8003e44:	fa01 f303 	lsl.w	r3, r1, r3
 8003e48:	69f9      	ldr	r1, [r7, #28]
 8003e4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	634b      	str	r3, [r1, #52]	; 0x34
 8003e52:	e109      	b.n	8004068 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d110      	bne.n	8003e86 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	015a      	lsls	r2, r3, #5
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	0151      	lsls	r1, r2, #5
 8003e76:	69fa      	ldr	r2, [r7, #28]
 8003e78:	440a      	add	r2, r1
 8003e7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e82:	6013      	str	r3, [r2, #0]
 8003e84:	e00f      	b.n	8003ea6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	015a      	lsls	r2, r3, #5
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	0151      	lsls	r1, r2, #5
 8003e98:	69fa      	ldr	r2, [r7, #28]
 8003e9a:	440a      	add	r2, r1
 8003e9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ea4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	6919      	ldr	r1, [r3, #16]
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	781a      	ldrb	r2, [r3, #0]
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	b298      	uxth	r0, r3
 8003eb4:	79fb      	ldrb	r3, [r7, #7]
 8003eb6:	9300      	str	r3, [sp, #0]
 8003eb8:	4603      	mov	r3, r0
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f000 fade 	bl	800447c <USB_WritePacket>
 8003ec0:	e0d2      	b.n	8004068 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	015a      	lsls	r2, r3, #5
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	4413      	add	r3, r2
 8003eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	0151      	lsls	r1, r2, #5
 8003ed4:	69fa      	ldr	r2, [r7, #28]
 8003ed6:	440a      	add	r2, r1
 8003ed8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003edc:	0cdb      	lsrs	r3, r3, #19
 8003ede:	04db      	lsls	r3, r3, #19
 8003ee0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	015a      	lsls	r2, r3, #5
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	4413      	add	r3, r2
 8003eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	0151      	lsls	r1, r2, #5
 8003ef4:	69fa      	ldr	r2, [r7, #28]
 8003ef6:	440a      	add	r2, r1
 8003ef8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003efc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003f00:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003f04:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d126      	bne.n	8003f5c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	015a      	lsls	r2, r3, #5
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	4413      	add	r3, r2
 8003f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f1a:	691a      	ldr	r2, [r3, #16]
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f24:	69b9      	ldr	r1, [r7, #24]
 8003f26:	0148      	lsls	r0, r1, #5
 8003f28:	69f9      	ldr	r1, [r7, #28]
 8003f2a:	4401      	add	r1, r0
 8003f2c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003f30:	4313      	orrs	r3, r2
 8003f32:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	015a      	lsls	r2, r3, #5
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	0151      	lsls	r1, r2, #5
 8003f46:	69fa      	ldr	r2, [r7, #28]
 8003f48:	440a      	add	r2, r1
 8003f4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f52:	6113      	str	r3, [r2, #16]
 8003f54:	e03a      	b.n	8003fcc <USB_EPStartXfer+0x3e4>
 8003f56:	bf00      	nop
 8003f58:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	699a      	ldr	r2, [r3, #24]
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	4413      	add	r3, r2
 8003f66:	1e5a      	subs	r2, r3, #1
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f70:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	8afa      	ldrh	r2, [r7, #22]
 8003f78:	fb03 f202 	mul.w	r2, r3, r2
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	015a      	lsls	r2, r3, #5
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	4413      	add	r3, r2
 8003f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f8c:	691a      	ldr	r2, [r3, #16]
 8003f8e:	8afb      	ldrh	r3, [r7, #22]
 8003f90:	04d9      	lsls	r1, r3, #19
 8003f92:	4b38      	ldr	r3, [pc, #224]	; (8004074 <USB_EPStartXfer+0x48c>)
 8003f94:	400b      	ands	r3, r1
 8003f96:	69b9      	ldr	r1, [r7, #24]
 8003f98:	0148      	lsls	r0, r1, #5
 8003f9a:	69f9      	ldr	r1, [r7, #28]
 8003f9c:	4401      	add	r1, r0
 8003f9e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	015a      	lsls	r2, r3, #5
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	4413      	add	r3, r2
 8003fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fb2:	691a      	ldr	r2, [r3, #16]
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	69db      	ldr	r3, [r3, #28]
 8003fb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fbc:	69b9      	ldr	r1, [r7, #24]
 8003fbe:	0148      	lsls	r0, r1, #5
 8003fc0:	69f9      	ldr	r1, [r7, #28]
 8003fc2:	4401      	add	r1, r0
 8003fc4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003fcc:	79fb      	ldrb	r3, [r7, #7]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d10d      	bne.n	8003fee <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d009      	beq.n	8003fee <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	6919      	ldr	r1, [r3, #16]
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	015a      	lsls	r2, r3, #5
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fea:	460a      	mov	r2, r1
 8003fec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	791b      	ldrb	r3, [r3, #4]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d128      	bne.n	8004048 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004002:	2b00      	cmp	r3, #0
 8004004:	d110      	bne.n	8004028 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	015a      	lsls	r2, r3, #5
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	4413      	add	r3, r2
 800400e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	0151      	lsls	r1, r2, #5
 8004018:	69fa      	ldr	r2, [r7, #28]
 800401a:	440a      	add	r2, r1
 800401c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004020:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004024:	6013      	str	r3, [r2, #0]
 8004026:	e00f      	b.n	8004048 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	015a      	lsls	r2, r3, #5
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	4413      	add	r3, r2
 8004030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	0151      	lsls	r1, r2, #5
 800403a:	69fa      	ldr	r2, [r7, #28]
 800403c:	440a      	add	r2, r1
 800403e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004042:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004046:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	015a      	lsls	r2, r3, #5
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	4413      	add	r3, r2
 8004050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	0151      	lsls	r1, r2, #5
 800405a:	69fa      	ldr	r2, [r7, #28]
 800405c:	440a      	add	r2, r1
 800405e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004062:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004066:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3720      	adds	r7, #32
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	1ff80000 	.word	0x1ff80000

08004078 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004078:	b480      	push	{r7}
 800407a:	b087      	sub	sp, #28
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	4613      	mov	r3, r2
 8004084:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	785b      	ldrb	r3, [r3, #1]
 8004094:	2b01      	cmp	r3, #1
 8004096:	f040 80ce 	bne.w	8004236 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d132      	bne.n	8004108 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	015a      	lsls	r2, r3, #5
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	4413      	add	r3, r2
 80040aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	0151      	lsls	r1, r2, #5
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	440a      	add	r2, r1
 80040b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80040c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80040c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	015a      	lsls	r2, r3, #5
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	4413      	add	r3, r2
 80040ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	0151      	lsls	r1, r2, #5
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	440a      	add	r2, r1
 80040dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80040e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	015a      	lsls	r2, r3, #5
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	4413      	add	r3, r2
 80040ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	0151      	lsls	r1, r2, #5
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	440a      	add	r2, r1
 80040fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004100:	0cdb      	lsrs	r3, r3, #19
 8004102:	04db      	lsls	r3, r3, #19
 8004104:	6113      	str	r3, [r2, #16]
 8004106:	e04e      	b.n	80041a6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	015a      	lsls	r2, r3, #5
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	4413      	add	r3, r2
 8004110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	0151      	lsls	r1, r2, #5
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	440a      	add	r2, r1
 800411e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004122:	0cdb      	lsrs	r3, r3, #19
 8004124:	04db      	lsls	r3, r3, #19
 8004126:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	015a      	lsls	r2, r3, #5
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	4413      	add	r3, r2
 8004130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	0151      	lsls	r1, r2, #5
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	440a      	add	r2, r1
 800413e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004142:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004146:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800414a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	699a      	ldr	r2, [r3, #24]
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	429a      	cmp	r2, r3
 8004156:	d903      	bls.n	8004160 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	68da      	ldr	r2, [r3, #12]
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	015a      	lsls	r2, r3, #5
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	4413      	add	r3, r2
 8004168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	0151      	lsls	r1, r2, #5
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	440a      	add	r2, r1
 8004176:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800417a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800417e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	015a      	lsls	r2, r3, #5
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	4413      	add	r3, r2
 8004188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800418c:	691a      	ldr	r2, [r3, #16]
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004196:	6939      	ldr	r1, [r7, #16]
 8004198:	0148      	lsls	r0, r1, #5
 800419a:	6979      	ldr	r1, [r7, #20]
 800419c:	4401      	add	r1, r0
 800419e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80041a2:	4313      	orrs	r3, r2
 80041a4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80041a6:	79fb      	ldrb	r3, [r7, #7]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d11e      	bne.n	80041ea <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d009      	beq.n	80041c8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041c0:	461a      	mov	r2, r3
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	015a      	lsls	r2, r3, #5
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	0151      	lsls	r1, r2, #5
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	440a      	add	r2, r1
 80041de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80041e6:	6013      	str	r3, [r2, #0]
 80041e8:	e097      	b.n	800431a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	015a      	lsls	r2, r3, #5
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	4413      	add	r3, r2
 80041f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	0151      	lsls	r1, r2, #5
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	440a      	add	r2, r1
 8004200:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004204:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004208:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	2b00      	cmp	r3, #0
 8004210:	f000 8083 	beq.w	800431a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800421a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	f003 030f 	and.w	r3, r3, #15
 8004224:	2101      	movs	r1, #1
 8004226:	fa01 f303 	lsl.w	r3, r1, r3
 800422a:	6979      	ldr	r1, [r7, #20]
 800422c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004230:	4313      	orrs	r3, r2
 8004232:	634b      	str	r3, [r1, #52]	; 0x34
 8004234:	e071      	b.n	800431a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	015a      	lsls	r2, r3, #5
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	4413      	add	r3, r2
 800423e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	0151      	lsls	r1, r2, #5
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	440a      	add	r2, r1
 800424c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004250:	0cdb      	lsrs	r3, r3, #19
 8004252:	04db      	lsls	r3, r3, #19
 8004254:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	015a      	lsls	r2, r3, #5
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	4413      	add	r3, r2
 800425e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	0151      	lsls	r1, r2, #5
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	440a      	add	r2, r1
 800426c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004270:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004274:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004278:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d003      	beq.n	800428a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	68da      	ldr	r2, [r3, #12]
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	68da      	ldr	r2, [r3, #12]
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	015a      	lsls	r2, r3, #5
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	4413      	add	r3, r2
 800429a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	0151      	lsls	r1, r2, #5
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	440a      	add	r2, r1
 80042a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	015a      	lsls	r2, r3, #5
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	4413      	add	r3, r2
 80042ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042be:	691a      	ldr	r2, [r3, #16]
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	69db      	ldr	r3, [r3, #28]
 80042c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042c8:	6939      	ldr	r1, [r7, #16]
 80042ca:	0148      	lsls	r0, r1, #5
 80042cc:	6979      	ldr	r1, [r7, #20]
 80042ce:	4401      	add	r1, r0
 80042d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80042d4:	4313      	orrs	r3, r2
 80042d6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80042d8:	79fb      	ldrb	r3, [r7, #7]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d10d      	bne.n	80042fa <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d009      	beq.n	80042fa <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	6919      	ldr	r1, [r3, #16]
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	015a      	lsls	r2, r3, #5
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	4413      	add	r3, r2
 80042f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f6:	460a      	mov	r2, r1
 80042f8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	015a      	lsls	r2, r3, #5
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	4413      	add	r3, r2
 8004302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	0151      	lsls	r1, r2, #5
 800430c:	697a      	ldr	r2, [r7, #20]
 800430e:	440a      	add	r2, r1
 8004310:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004314:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004318:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	371c      	adds	r7, #28
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004328:	b480      	push	{r7}
 800432a:	b087      	sub	sp, #28
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004332:	2300      	movs	r3, #0
 8004334:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004336:	2300      	movs	r3, #0
 8004338:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	785b      	ldrb	r3, [r3, #1]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d14a      	bne.n	80043dc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	015a      	lsls	r2, r3, #5
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	4413      	add	r3, r2
 8004350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800435a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800435e:	f040 8086 	bne.w	800446e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	015a      	lsls	r2, r3, #5
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	4413      	add	r3, r2
 800436c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	683a      	ldr	r2, [r7, #0]
 8004374:	7812      	ldrb	r2, [r2, #0]
 8004376:	0151      	lsls	r1, r2, #5
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	440a      	add	r2, r1
 800437c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004380:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004384:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	015a      	lsls	r2, r3, #5
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	4413      	add	r3, r2
 8004390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	683a      	ldr	r2, [r7, #0]
 8004398:	7812      	ldrb	r2, [r2, #0]
 800439a:	0151      	lsls	r1, r2, #5
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	440a      	add	r2, r1
 80043a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	3301      	adds	r3, #1
 80043ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d902      	bls.n	80043c0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	75fb      	strb	r3, [r7, #23]
          break;
 80043be:	e056      	b.n	800446e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	015a      	lsls	r2, r3, #5
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	4413      	add	r3, r2
 80043ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043d8:	d0e7      	beq.n	80043aa <USB_EPStopXfer+0x82>
 80043da:	e048      	b.n	800446e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	015a      	lsls	r2, r3, #5
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	4413      	add	r3, r2
 80043e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043f4:	d13b      	bne.n	800446e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	015a      	lsls	r2, r3, #5
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	4413      	add	r3, r2
 8004400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	7812      	ldrb	r2, [r2, #0]
 800440a:	0151      	lsls	r1, r2, #5
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	440a      	add	r2, r1
 8004410:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004414:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004418:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	015a      	lsls	r2, r3, #5
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	4413      	add	r3, r2
 8004424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	683a      	ldr	r2, [r7, #0]
 800442c:	7812      	ldrb	r2, [r2, #0]
 800442e:	0151      	lsls	r1, r2, #5
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	440a      	add	r2, r1
 8004434:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004438:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800443c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	3301      	adds	r3, #1
 8004442:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f242 7210 	movw	r2, #10000	; 0x2710
 800444a:	4293      	cmp	r3, r2
 800444c:	d902      	bls.n	8004454 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	75fb      	strb	r3, [r7, #23]
          break;
 8004452:	e00c      	b.n	800446e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	015a      	lsls	r2, r3, #5
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	4413      	add	r3, r2
 800445e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004468:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800446c:	d0e7      	beq.n	800443e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800446e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004470:	4618      	mov	r0, r3
 8004472:	371c      	adds	r7, #28
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800447c:	b480      	push	{r7}
 800447e:	b089      	sub	sp, #36	; 0x24
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	4611      	mov	r1, r2
 8004488:	461a      	mov	r2, r3
 800448a:	460b      	mov	r3, r1
 800448c:	71fb      	strb	r3, [r7, #7]
 800448e:	4613      	mov	r3, r2
 8004490:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800449a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d123      	bne.n	80044ea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80044a2:	88bb      	ldrh	r3, [r7, #4]
 80044a4:	3303      	adds	r3, #3
 80044a6:	089b      	lsrs	r3, r3, #2
 80044a8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80044aa:	2300      	movs	r3, #0
 80044ac:	61bb      	str	r3, [r7, #24]
 80044ae:	e018      	b.n	80044e2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80044b0:	79fb      	ldrb	r3, [r7, #7]
 80044b2:	031a      	lsls	r2, r3, #12
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	4413      	add	r3, r2
 80044b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044bc:	461a      	mov	r2, r3
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	3301      	adds	r3, #1
 80044c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	3301      	adds	r3, #1
 80044ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	3301      	adds	r3, #1
 80044d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	3301      	adds	r3, #1
 80044da:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	3301      	adds	r3, #1
 80044e0:	61bb      	str	r3, [r7, #24]
 80044e2:	69ba      	ldr	r2, [r7, #24]
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d3e2      	bcc.n	80044b0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3724      	adds	r7, #36	; 0x24
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b08b      	sub	sp, #44	; 0x2c
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	4613      	mov	r3, r2
 8004504:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800450e:	88fb      	ldrh	r3, [r7, #6]
 8004510:	089b      	lsrs	r3, r3, #2
 8004512:	b29b      	uxth	r3, r3
 8004514:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004516:	88fb      	ldrh	r3, [r7, #6]
 8004518:	f003 0303 	and.w	r3, r3, #3
 800451c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800451e:	2300      	movs	r3, #0
 8004520:	623b      	str	r3, [r7, #32]
 8004522:	e014      	b.n	800454e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452e:	601a      	str	r2, [r3, #0]
    pDest++;
 8004530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004532:	3301      	adds	r3, #1
 8004534:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	3301      	adds	r3, #1
 800453a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800453c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453e:	3301      	adds	r3, #1
 8004540:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004544:	3301      	adds	r3, #1
 8004546:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004548:	6a3b      	ldr	r3, [r7, #32]
 800454a:	3301      	adds	r3, #1
 800454c:	623b      	str	r3, [r7, #32]
 800454e:	6a3a      	ldr	r2, [r7, #32]
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	429a      	cmp	r2, r3
 8004554:	d3e6      	bcc.n	8004524 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004556:	8bfb      	ldrh	r3, [r7, #30]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d01e      	beq.n	800459a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800455c:	2300      	movs	r3, #0
 800455e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004566:	461a      	mov	r2, r3
 8004568:	f107 0310 	add.w	r3, r7, #16
 800456c:	6812      	ldr	r2, [r2, #0]
 800456e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	6a3b      	ldr	r3, [r7, #32]
 8004574:	b2db      	uxtb	r3, r3
 8004576:	00db      	lsls	r3, r3, #3
 8004578:	fa22 f303 	lsr.w	r3, r2, r3
 800457c:	b2da      	uxtb	r2, r3
 800457e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004580:	701a      	strb	r2, [r3, #0]
      i++;
 8004582:	6a3b      	ldr	r3, [r7, #32]
 8004584:	3301      	adds	r3, #1
 8004586:	623b      	str	r3, [r7, #32]
      pDest++;
 8004588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458a:	3301      	adds	r3, #1
 800458c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800458e:	8bfb      	ldrh	r3, [r7, #30]
 8004590:	3b01      	subs	r3, #1
 8004592:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004594:	8bfb      	ldrh	r3, [r7, #30]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1ea      	bne.n	8004570 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800459a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800459c:	4618      	mov	r0, r3
 800459e:	372c      	adds	r7, #44	; 0x2c
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	785b      	ldrb	r3, [r3, #1]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d12c      	bne.n	800461e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	015a      	lsls	r2, r3, #5
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	4413      	add	r3, r2
 80045cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	db12      	blt.n	80045fc <USB_EPSetStall+0x54>
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00f      	beq.n	80045fc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	015a      	lsls	r2, r3, #5
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	4413      	add	r3, r2
 80045e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	0151      	lsls	r1, r2, #5
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	440a      	add	r2, r1
 80045f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045fa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	015a      	lsls	r2, r3, #5
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	4413      	add	r3, r2
 8004604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	0151      	lsls	r1, r2, #5
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	440a      	add	r2, r1
 8004612:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004616:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800461a:	6013      	str	r3, [r2, #0]
 800461c:	e02b      	b.n	8004676 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	015a      	lsls	r2, r3, #5
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	4413      	add	r3, r2
 8004626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	db12      	blt.n	8004656 <USB_EPSetStall+0xae>
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00f      	beq.n	8004656 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	015a      	lsls	r2, r3, #5
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	4413      	add	r3, r2
 800463e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	0151      	lsls	r1, r2, #5
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	440a      	add	r2, r1
 800464c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004650:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004654:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	015a      	lsls	r2, r3, #5
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	4413      	add	r3, r2
 800465e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68ba      	ldr	r2, [r7, #8]
 8004666:	0151      	lsls	r1, r2, #5
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	440a      	add	r2, r1
 800466c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004670:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004674:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3714      	adds	r7, #20
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	785b      	ldrb	r3, [r3, #1]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d128      	bne.n	80046f2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	015a      	lsls	r2, r3, #5
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	4413      	add	r3, r2
 80046a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	0151      	lsls	r1, r2, #5
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	440a      	add	r2, r1
 80046b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80046be:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	791b      	ldrb	r3, [r3, #4]
 80046c4:	2b03      	cmp	r3, #3
 80046c6:	d003      	beq.n	80046d0 <USB_EPClearStall+0x4c>
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	791b      	ldrb	r3, [r3, #4]
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d138      	bne.n	8004742 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	015a      	lsls	r2, r3, #5
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	4413      	add	r3, r2
 80046d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68ba      	ldr	r2, [r7, #8]
 80046e0:	0151      	lsls	r1, r2, #5
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	440a      	add	r2, r1
 80046e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ee:	6013      	str	r3, [r2, #0]
 80046f0:	e027      	b.n	8004742 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	015a      	lsls	r2, r3, #5
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	4413      	add	r3, r2
 80046fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	0151      	lsls	r1, r2, #5
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	440a      	add	r2, r1
 8004708:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800470c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004710:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	791b      	ldrb	r3, [r3, #4]
 8004716:	2b03      	cmp	r3, #3
 8004718:	d003      	beq.n	8004722 <USB_EPClearStall+0x9e>
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	791b      	ldrb	r3, [r3, #4]
 800471e:	2b02      	cmp	r3, #2
 8004720:	d10f      	bne.n	8004742 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	015a      	lsls	r2, r3, #5
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	4413      	add	r3, r2
 800472a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	0151      	lsls	r1, r2, #5
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	440a      	add	r2, r1
 8004738:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800473c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004740:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3714      	adds	r7, #20
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	460b      	mov	r3, r1
 800475a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800476e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004772:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	78fb      	ldrb	r3, [r7, #3]
 800477e:	011b      	lsls	r3, r3, #4
 8004780:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004784:	68f9      	ldr	r1, [r7, #12]
 8004786:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800478a:	4313      	orrs	r3, r2
 800478c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3714      	adds	r7, #20
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80047b6:	f023 0303 	bic.w	r3, r3, #3
 80047ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047ca:	f023 0302 	bic.w	r3, r3, #2
 80047ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3714      	adds	r7, #20
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr

080047de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80047de:	b480      	push	{r7}
 80047e0:	b085      	sub	sp, #20
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80047f8:	f023 0303 	bic.w	r3, r3, #3
 80047fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800480c:	f043 0302 	orr.w	r3, r3, #2
 8004810:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3714      	adds	r7, #20
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	4013      	ands	r3, r2
 8004836:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004838:	68fb      	ldr	r3, [r7, #12]
}
 800483a:	4618      	mov	r0, r3
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004846:	b480      	push	{r7}
 8004848:	b085      	sub	sp, #20
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004862:	69db      	ldr	r3, [r3, #28]
 8004864:	68ba      	ldr	r2, [r7, #8]
 8004866:	4013      	ands	r3, r2
 8004868:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	0c1b      	lsrs	r3, r3, #16
}
 800486e:	4618      	mov	r0, r3
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800487a:	b480      	push	{r7}
 800487c:	b085      	sub	sp, #20
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004896:	69db      	ldr	r3, [r3, #28]
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	4013      	ands	r3, r2
 800489c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	b29b      	uxth	r3, r3
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3714      	adds	r7, #20
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr

080048ae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80048ae:	b480      	push	{r7}
 80048b0:	b085      	sub	sp, #20
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
 80048b6:	460b      	mov	r3, r1
 80048b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80048be:	78fb      	ldrb	r3, [r7, #3]
 80048c0:	015a      	lsls	r2, r3, #5
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	4413      	add	r3, r2
 80048c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	4013      	ands	r3, r2
 80048da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80048dc:	68bb      	ldr	r3, [r7, #8]
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80048ea:	b480      	push	{r7}
 80048ec:	b087      	sub	sp, #28
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
 80048f2:	460b      	mov	r3, r1
 80048f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800490a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800490c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800490e:	78fb      	ldrb	r3, [r7, #3]
 8004910:	f003 030f 	and.w	r3, r3, #15
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	fa22 f303 	lsr.w	r3, r2, r3
 800491a:	01db      	lsls	r3, r3, #7
 800491c:	b2db      	uxtb	r3, r3
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	4313      	orrs	r3, r2
 8004922:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004924:	78fb      	ldrb	r3, [r7, #3]
 8004926:	015a      	lsls	r2, r3, #5
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	4413      	add	r3, r2
 800492c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	4013      	ands	r3, r2
 8004936:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004938:	68bb      	ldr	r3, [r7, #8]
}
 800493a:	4618      	mov	r0, r3
 800493c:	371c      	adds	r7, #28
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr

08004946 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004946:	b480      	push	{r7}
 8004948:	b083      	sub	sp, #12
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	f003 0301 	and.w	r3, r3, #1
}
 8004956:	4618      	mov	r0, r3
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004962:	b480      	push	{r7}
 8004964:	b085      	sub	sp, #20
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800497c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004980:	f023 0307 	bic.w	r3, r3, #7
 8004984:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004998:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3714      	adds	r7, #20
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b087      	sub	sp, #28
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	460b      	mov	r3, r1
 80049b2:	607a      	str	r2, [r7, #4]
 80049b4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	333c      	adds	r3, #60	; 0x3c
 80049be:	3304      	adds	r3, #4
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	4a26      	ldr	r2, [pc, #152]	; (8004a60 <USB_EP0_OutStart+0xb8>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d90a      	bls.n	80049e2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049dc:	d101      	bne.n	80049e2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80049de:	2300      	movs	r3, #0
 80049e0:	e037      	b.n	8004a52 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e8:	461a      	mov	r2, r3
 80049ea:	2300      	movs	r3, #0
 80049ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a10:	f043 0318 	orr.w	r3, r3, #24
 8004a14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a24:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004a28:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004a2a:	7afb      	ldrb	r3, [r7, #11]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d10f      	bne.n	8004a50 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a36:	461a      	mov	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a4a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004a4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	371c      	adds	r7, #28
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	4f54300a 	.word	0x4f54300a

08004a64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	3301      	adds	r3, #1
 8004a74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	4a13      	ldr	r2, [pc, #76]	; (8004ac8 <USB_CoreReset+0x64>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d901      	bls.n	8004a82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e01b      	b.n	8004aba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	daf2      	bge.n	8004a70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	f043 0201 	orr.w	r2, r3, #1
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4a09      	ldr	r2, [pc, #36]	; (8004ac8 <USB_CoreReset+0x64>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d901      	bls.n	8004aac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e006      	b.n	8004aba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	f003 0301 	and.w	r3, r3, #1
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d0f0      	beq.n	8004a9a <USB_CoreReset+0x36>

  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3714      	adds	r7, #20
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	00030d40 	.word	0x00030d40

08004acc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004ad8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004adc:	f002 fc94 	bl	8007408 <USBD_static_malloc>
 8004ae0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d109      	bne.n	8004afc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	32b0      	adds	r2, #176	; 0xb0
 8004af2:	2100      	movs	r1, #0
 8004af4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004af8:	2302      	movs	r3, #2
 8004afa:	e0d4      	b.n	8004ca6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004afc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004b00:	2100      	movs	r1, #0
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f002 fce4 	bl	80074d0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	32b0      	adds	r2, #176	; 0xb0
 8004b12:	68f9      	ldr	r1, [r7, #12]
 8004b14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	32b0      	adds	r2, #176	; 0xb0
 8004b22:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	7c1b      	ldrb	r3, [r3, #16]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d138      	bne.n	8004ba6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004b34:	4b5e      	ldr	r3, [pc, #376]	; (8004cb0 <USBD_CDC_Init+0x1e4>)
 8004b36:	7819      	ldrb	r1, [r3, #0]
 8004b38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b3c:	2202      	movs	r2, #2
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f002 fb3f 	bl	80071c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004b44:	4b5a      	ldr	r3, [pc, #360]	; (8004cb0 <USBD_CDC_Init+0x1e4>)
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	f003 020f 	and.w	r2, r3, #15
 8004b4c:	6879      	ldr	r1, [r7, #4]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	4413      	add	r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	440b      	add	r3, r1
 8004b58:	3324      	adds	r3, #36	; 0x24
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004b5e:	4b55      	ldr	r3, [pc, #340]	; (8004cb4 <USBD_CDC_Init+0x1e8>)
 8004b60:	7819      	ldrb	r1, [r3, #0]
 8004b62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b66:	2202      	movs	r2, #2
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f002 fb2a 	bl	80071c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004b6e:	4b51      	ldr	r3, [pc, #324]	; (8004cb4 <USBD_CDC_Init+0x1e8>)
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	f003 020f 	and.w	r2, r3, #15
 8004b76:	6879      	ldr	r1, [r7, #4]
 8004b78:	4613      	mov	r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	4413      	add	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	440b      	add	r3, r1
 8004b82:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004b86:	2201      	movs	r2, #1
 8004b88:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004b8a:	4b4b      	ldr	r3, [pc, #300]	; (8004cb8 <USBD_CDC_Init+0x1ec>)
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	f003 020f 	and.w	r2, r3, #15
 8004b92:	6879      	ldr	r1, [r7, #4]
 8004b94:	4613      	mov	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4413      	add	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	440b      	add	r3, r1
 8004b9e:	3326      	adds	r3, #38	; 0x26
 8004ba0:	2210      	movs	r2, #16
 8004ba2:	801a      	strh	r2, [r3, #0]
 8004ba4:	e035      	b.n	8004c12 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004ba6:	4b42      	ldr	r3, [pc, #264]	; (8004cb0 <USBD_CDC_Init+0x1e4>)
 8004ba8:	7819      	ldrb	r1, [r3, #0]
 8004baa:	2340      	movs	r3, #64	; 0x40
 8004bac:	2202      	movs	r2, #2
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f002 fb07 	bl	80071c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004bb4:	4b3e      	ldr	r3, [pc, #248]	; (8004cb0 <USBD_CDC_Init+0x1e4>)
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	f003 020f 	and.w	r2, r3, #15
 8004bbc:	6879      	ldr	r1, [r7, #4]
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	4413      	add	r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	440b      	add	r3, r1
 8004bc8:	3324      	adds	r3, #36	; 0x24
 8004bca:	2201      	movs	r2, #1
 8004bcc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004bce:	4b39      	ldr	r3, [pc, #228]	; (8004cb4 <USBD_CDC_Init+0x1e8>)
 8004bd0:	7819      	ldrb	r1, [r3, #0]
 8004bd2:	2340      	movs	r3, #64	; 0x40
 8004bd4:	2202      	movs	r2, #2
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f002 faf3 	bl	80071c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004bdc:	4b35      	ldr	r3, [pc, #212]	; (8004cb4 <USBD_CDC_Init+0x1e8>)
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	f003 020f 	and.w	r2, r3, #15
 8004be4:	6879      	ldr	r1, [r7, #4]
 8004be6:	4613      	mov	r3, r2
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	4413      	add	r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	440b      	add	r3, r1
 8004bf0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004bf8:	4b2f      	ldr	r3, [pc, #188]	; (8004cb8 <USBD_CDC_Init+0x1ec>)
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	f003 020f 	and.w	r2, r3, #15
 8004c00:	6879      	ldr	r1, [r7, #4]
 8004c02:	4613      	mov	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	4413      	add	r3, r2
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	440b      	add	r3, r1
 8004c0c:	3326      	adds	r3, #38	; 0x26
 8004c0e:	2210      	movs	r2, #16
 8004c10:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004c12:	4b29      	ldr	r3, [pc, #164]	; (8004cb8 <USBD_CDC_Init+0x1ec>)
 8004c14:	7819      	ldrb	r1, [r3, #0]
 8004c16:	2308      	movs	r3, #8
 8004c18:	2203      	movs	r2, #3
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f002 fad1 	bl	80071c2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004c20:	4b25      	ldr	r3, [pc, #148]	; (8004cb8 <USBD_CDC_Init+0x1ec>)
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	f003 020f 	and.w	r2, r3, #15
 8004c28:	6879      	ldr	r1, [r7, #4]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	4413      	add	r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	440b      	add	r3, r1
 8004c34:	3324      	adds	r3, #36	; 0x24
 8004c36:	2201      	movs	r2, #1
 8004c38:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	33b0      	adds	r3, #176	; 0xb0
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	4413      	add	r3, r2
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d101      	bne.n	8004c74 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004c70:	2302      	movs	r3, #2
 8004c72:	e018      	b.n	8004ca6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	7c1b      	ldrb	r3, [r3, #16]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d10a      	bne.n	8004c92 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004c7c:	4b0d      	ldr	r3, [pc, #52]	; (8004cb4 <USBD_CDC_Init+0x1e8>)
 8004c7e:	7819      	ldrb	r1, [r3, #0]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004c86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f002 fb88 	bl	80073a0 <USBD_LL_PrepareReceive>
 8004c90:	e008      	b.n	8004ca4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004c92:	4b08      	ldr	r3, [pc, #32]	; (8004cb4 <USBD_CDC_Init+0x1e8>)
 8004c94:	7819      	ldrb	r1, [r3, #0]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004c9c:	2340      	movs	r3, #64	; 0x40
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f002 fb7e 	bl	80073a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	20000093 	.word	0x20000093
 8004cb4:	20000094 	.word	0x20000094
 8004cb8:	20000095 	.word	0x20000095

08004cbc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004cc8:	4b3a      	ldr	r3, [pc, #232]	; (8004db4 <USBD_CDC_DeInit+0xf8>)
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	4619      	mov	r1, r3
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f002 fa9d 	bl	800720e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004cd4:	4b37      	ldr	r3, [pc, #220]	; (8004db4 <USBD_CDC_DeInit+0xf8>)
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	f003 020f 	and.w	r2, r3, #15
 8004cdc:	6879      	ldr	r1, [r7, #4]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	4413      	add	r3, r2
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	440b      	add	r3, r1
 8004ce8:	3324      	adds	r3, #36	; 0x24
 8004cea:	2200      	movs	r2, #0
 8004cec:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004cee:	4b32      	ldr	r3, [pc, #200]	; (8004db8 <USBD_CDC_DeInit+0xfc>)
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f002 fa8a 	bl	800720e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004cfa:	4b2f      	ldr	r3, [pc, #188]	; (8004db8 <USBD_CDC_DeInit+0xfc>)
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	f003 020f 	and.w	r2, r3, #15
 8004d02:	6879      	ldr	r1, [r7, #4]
 8004d04:	4613      	mov	r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	4413      	add	r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	440b      	add	r3, r1
 8004d0e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004d12:	2200      	movs	r2, #0
 8004d14:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004d16:	4b29      	ldr	r3, [pc, #164]	; (8004dbc <USBD_CDC_DeInit+0x100>)
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f002 fa76 	bl	800720e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004d22:	4b26      	ldr	r3, [pc, #152]	; (8004dbc <USBD_CDC_DeInit+0x100>)
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	f003 020f 	and.w	r2, r3, #15
 8004d2a:	6879      	ldr	r1, [r7, #4]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4413      	add	r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	440b      	add	r3, r1
 8004d36:	3324      	adds	r3, #36	; 0x24
 8004d38:	2200      	movs	r2, #0
 8004d3a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004d3c:	4b1f      	ldr	r3, [pc, #124]	; (8004dbc <USBD_CDC_DeInit+0x100>)
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	f003 020f 	and.w	r2, r3, #15
 8004d44:	6879      	ldr	r1, [r7, #4]
 8004d46:	4613      	mov	r3, r2
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	4413      	add	r3, r2
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	440b      	add	r3, r1
 8004d50:	3326      	adds	r3, #38	; 0x26
 8004d52:	2200      	movs	r2, #0
 8004d54:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	32b0      	adds	r2, #176	; 0xb0
 8004d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d01f      	beq.n	8004da8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	33b0      	adds	r3, #176	; 0xb0
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4413      	add	r3, r2
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	32b0      	adds	r2, #176	; 0xb0
 8004d86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f002 fb4a 	bl	8007424 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	32b0      	adds	r2, #176	; 0xb0
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3708      	adds	r7, #8
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	20000093 	.word	0x20000093
 8004db8:	20000094 	.word	0x20000094
 8004dbc:	20000095 	.word	0x20000095

08004dc0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b086      	sub	sp, #24
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	32b0      	adds	r2, #176	; 0xb0
 8004dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dd8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004dde:	2300      	movs	r3, #0
 8004de0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004de2:	2300      	movs	r3, #0
 8004de4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d101      	bne.n	8004df0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e0bf      	b.n	8004f70 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d050      	beq.n	8004e9e <USBD_CDC_Setup+0xde>
 8004dfc:	2b20      	cmp	r3, #32
 8004dfe:	f040 80af 	bne.w	8004f60 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	88db      	ldrh	r3, [r3, #6]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d03a      	beq.n	8004e80 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	b25b      	sxtb	r3, r3
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	da1b      	bge.n	8004e4c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	33b0      	adds	r3, #176	; 0xb0
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	683a      	ldr	r2, [r7, #0]
 8004e28:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004e2a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004e2c:	683a      	ldr	r2, [r7, #0]
 8004e2e:	88d2      	ldrh	r2, [r2, #6]
 8004e30:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	88db      	ldrh	r3, [r3, #6]
 8004e36:	2b07      	cmp	r3, #7
 8004e38:	bf28      	it	cs
 8004e3a:	2307      	movcs	r3, #7
 8004e3c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	89fa      	ldrh	r2, [r7, #14]
 8004e42:	4619      	mov	r1, r3
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f001 fd89 	bl	800695c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004e4a:	e090      	b.n	8004f6e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	785a      	ldrb	r2, [r3, #1]
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	88db      	ldrh	r3, [r3, #6]
 8004e5a:	2b3f      	cmp	r3, #63	; 0x3f
 8004e5c:	d803      	bhi.n	8004e66 <USBD_CDC_Setup+0xa6>
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	88db      	ldrh	r3, [r3, #6]
 8004e62:	b2da      	uxtb	r2, r3
 8004e64:	e000      	b.n	8004e68 <USBD_CDC_Setup+0xa8>
 8004e66:	2240      	movs	r2, #64	; 0x40
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004e6e:	6939      	ldr	r1, [r7, #16]
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8004e76:	461a      	mov	r2, r3
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f001 fd9b 	bl	80069b4 <USBD_CtlPrepareRx>
      break;
 8004e7e:	e076      	b.n	8004f6e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	33b0      	adds	r3, #176	; 0xb0
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	4413      	add	r3, r2
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	683a      	ldr	r2, [r7, #0]
 8004e94:	7850      	ldrb	r0, [r2, #1]
 8004e96:	2200      	movs	r2, #0
 8004e98:	6839      	ldr	r1, [r7, #0]
 8004e9a:	4798      	blx	r3
      break;
 8004e9c:	e067      	b.n	8004f6e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	785b      	ldrb	r3, [r3, #1]
 8004ea2:	2b0b      	cmp	r3, #11
 8004ea4:	d851      	bhi.n	8004f4a <USBD_CDC_Setup+0x18a>
 8004ea6:	a201      	add	r2, pc, #4	; (adr r2, 8004eac <USBD_CDC_Setup+0xec>)
 8004ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eac:	08004edd 	.word	0x08004edd
 8004eb0:	08004f59 	.word	0x08004f59
 8004eb4:	08004f4b 	.word	0x08004f4b
 8004eb8:	08004f4b 	.word	0x08004f4b
 8004ebc:	08004f4b 	.word	0x08004f4b
 8004ec0:	08004f4b 	.word	0x08004f4b
 8004ec4:	08004f4b 	.word	0x08004f4b
 8004ec8:	08004f4b 	.word	0x08004f4b
 8004ecc:	08004f4b 	.word	0x08004f4b
 8004ed0:	08004f4b 	.word	0x08004f4b
 8004ed4:	08004f07 	.word	0x08004f07
 8004ed8:	08004f31 	.word	0x08004f31
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b03      	cmp	r3, #3
 8004ee6:	d107      	bne.n	8004ef8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004ee8:	f107 030a 	add.w	r3, r7, #10
 8004eec:	2202      	movs	r2, #2
 8004eee:	4619      	mov	r1, r3
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f001 fd33 	bl	800695c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004ef6:	e032      	b.n	8004f5e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004ef8:	6839      	ldr	r1, [r7, #0]
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f001 fcbd 	bl	800687a <USBD_CtlError>
            ret = USBD_FAIL;
 8004f00:	2303      	movs	r3, #3
 8004f02:	75fb      	strb	r3, [r7, #23]
          break;
 8004f04:	e02b      	b.n	8004f5e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b03      	cmp	r3, #3
 8004f10:	d107      	bne.n	8004f22 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004f12:	f107 030d 	add.w	r3, r7, #13
 8004f16:	2201      	movs	r2, #1
 8004f18:	4619      	mov	r1, r3
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f001 fd1e 	bl	800695c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004f20:	e01d      	b.n	8004f5e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004f22:	6839      	ldr	r1, [r7, #0]
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f001 fca8 	bl	800687a <USBD_CtlError>
            ret = USBD_FAIL;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	75fb      	strb	r3, [r7, #23]
          break;
 8004f2e:	e016      	b.n	8004f5e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	2b03      	cmp	r3, #3
 8004f3a:	d00f      	beq.n	8004f5c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004f3c:	6839      	ldr	r1, [r7, #0]
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f001 fc9b 	bl	800687a <USBD_CtlError>
            ret = USBD_FAIL;
 8004f44:	2303      	movs	r3, #3
 8004f46:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004f48:	e008      	b.n	8004f5c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004f4a:	6839      	ldr	r1, [r7, #0]
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f001 fc94 	bl	800687a <USBD_CtlError>
          ret = USBD_FAIL;
 8004f52:	2303      	movs	r3, #3
 8004f54:	75fb      	strb	r3, [r7, #23]
          break;
 8004f56:	e002      	b.n	8004f5e <USBD_CDC_Setup+0x19e>
          break;
 8004f58:	bf00      	nop
 8004f5a:	e008      	b.n	8004f6e <USBD_CDC_Setup+0x1ae>
          break;
 8004f5c:	bf00      	nop
      }
      break;
 8004f5e:	e006      	b.n	8004f6e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8004f60:	6839      	ldr	r1, [r7, #0]
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f001 fc89 	bl	800687a <USBD_CtlError>
      ret = USBD_FAIL;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	75fb      	strb	r3, [r7, #23]
      break;
 8004f6c:	bf00      	nop
  }

  return (uint8_t)ret;
 8004f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3718      	adds	r7, #24
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	460b      	mov	r3, r1
 8004f82:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8004f8a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	32b0      	adds	r2, #176	; 0xb0
 8004f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e065      	b.n	800506e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	32b0      	adds	r2, #176	; 0xb0
 8004fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fb0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004fb2:	78fb      	ldrb	r3, [r7, #3]
 8004fb4:	f003 020f 	and.w	r2, r3, #15
 8004fb8:	6879      	ldr	r1, [r7, #4]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	4413      	add	r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	440b      	add	r3, r1
 8004fc4:	3318      	adds	r3, #24
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d02f      	beq.n	800502c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8004fcc:	78fb      	ldrb	r3, [r7, #3]
 8004fce:	f003 020f 	and.w	r2, r3, #15
 8004fd2:	6879      	ldr	r1, [r7, #4]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	4413      	add	r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	440b      	add	r3, r1
 8004fde:	3318      	adds	r3, #24
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	78fb      	ldrb	r3, [r7, #3]
 8004fe4:	f003 010f 	and.w	r1, r3, #15
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	460b      	mov	r3, r1
 8004fec:	00db      	lsls	r3, r3, #3
 8004fee:	440b      	add	r3, r1
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4403      	add	r3, r0
 8004ff4:	3348      	adds	r3, #72	; 0x48
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	fbb2 f1f3 	udiv	r1, r2, r3
 8004ffc:	fb01 f303 	mul.w	r3, r1, r3
 8005000:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005002:	2b00      	cmp	r3, #0
 8005004:	d112      	bne.n	800502c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005006:	78fb      	ldrb	r3, [r7, #3]
 8005008:	f003 020f 	and.w	r2, r3, #15
 800500c:	6879      	ldr	r1, [r7, #4]
 800500e:	4613      	mov	r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4413      	add	r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	440b      	add	r3, r1
 8005018:	3318      	adds	r3, #24
 800501a:	2200      	movs	r2, #0
 800501c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800501e:	78f9      	ldrb	r1, [r7, #3]
 8005020:	2300      	movs	r3, #0
 8005022:	2200      	movs	r2, #0
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f002 f99a 	bl	800735e <USBD_LL_Transmit>
 800502a:	e01f      	b.n	800506c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	2200      	movs	r2, #0
 8005030:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	33b0      	adds	r3, #176	; 0xb0
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	4413      	add	r3, r2
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d010      	beq.n	800506c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	33b0      	adds	r3, #176	; 0xb0
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	4413      	add	r3, r2
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005068:	78fa      	ldrb	r2, [r7, #3]
 800506a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}

08005076 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005076:	b580      	push	{r7, lr}
 8005078:	b084      	sub	sp, #16
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
 800507e:	460b      	mov	r3, r1
 8005080:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	32b0      	adds	r2, #176	; 0xb0
 800508c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005090:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	32b0      	adds	r2, #176	; 0xb0
 800509c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d101      	bne.n	80050a8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e01a      	b.n	80050de <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80050a8:	78fb      	ldrb	r3, [r7, #3]
 80050aa:	4619      	mov	r1, r3
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f002 f998 	bl	80073e2 <USBD_LL_GetRxDataSize>
 80050b2:	4602      	mov	r2, r0
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	33b0      	adds	r3, #176	; 0xb0
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4413      	add	r3, r2
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80050d8:	4611      	mov	r1, r2
 80050da:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b084      	sub	sp, #16
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	32b0      	adds	r2, #176	; 0xb0
 80050f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050fc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d101      	bne.n	8005108 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005104:	2303      	movs	r3, #3
 8005106:	e025      	b.n	8005154 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	33b0      	adds	r3, #176	; 0xb0
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	4413      	add	r3, r2
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d01a      	beq.n	8005152 <USBD_CDC_EP0_RxReady+0x6c>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005122:	2bff      	cmp	r3, #255	; 0xff
 8005124:	d015      	beq.n	8005152 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	33b0      	adds	r3, #176	; 0xb0
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4413      	add	r3, r2
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800513e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005146:	b292      	uxth	r2, r2
 8005148:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	22ff      	movs	r2, #255	; 0xff
 800514e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3710      	adds	r7, #16
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b086      	sub	sp, #24
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005164:	2182      	movs	r1, #130	; 0x82
 8005166:	4818      	ldr	r0, [pc, #96]	; (80051c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005168:	f000 fd4f 	bl	8005c0a <USBD_GetEpDesc>
 800516c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800516e:	2101      	movs	r1, #1
 8005170:	4815      	ldr	r0, [pc, #84]	; (80051c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005172:	f000 fd4a 	bl	8005c0a <USBD_GetEpDesc>
 8005176:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005178:	2181      	movs	r1, #129	; 0x81
 800517a:	4813      	ldr	r0, [pc, #76]	; (80051c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800517c:	f000 fd45 	bl	8005c0a <USBD_GetEpDesc>
 8005180:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d002      	beq.n	800518e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	2210      	movs	r2, #16
 800518c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d006      	beq.n	80051a2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	2200      	movs	r2, #0
 8005198:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800519c:	711a      	strb	r2, [r3, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d006      	beq.n	80051b6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051b0:	711a      	strb	r2, [r3, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2243      	movs	r2, #67	; 0x43
 80051ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80051bc:	4b02      	ldr	r3, [pc, #8]	; (80051c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3718      	adds	r7, #24
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	20000050 	.word	0x20000050

080051cc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b086      	sub	sp, #24
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80051d4:	2182      	movs	r1, #130	; 0x82
 80051d6:	4818      	ldr	r0, [pc, #96]	; (8005238 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80051d8:	f000 fd17 	bl	8005c0a <USBD_GetEpDesc>
 80051dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80051de:	2101      	movs	r1, #1
 80051e0:	4815      	ldr	r0, [pc, #84]	; (8005238 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80051e2:	f000 fd12 	bl	8005c0a <USBD_GetEpDesc>
 80051e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80051e8:	2181      	movs	r1, #129	; 0x81
 80051ea:	4813      	ldr	r0, [pc, #76]	; (8005238 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80051ec:	f000 fd0d 	bl	8005c0a <USBD_GetEpDesc>
 80051f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d002      	beq.n	80051fe <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	2210      	movs	r2, #16
 80051fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d006      	beq.n	8005212 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	2200      	movs	r2, #0
 8005208:	711a      	strb	r2, [r3, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	f042 0202 	orr.w	r2, r2, #2
 8005210:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d006      	beq.n	8005226 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	711a      	strb	r2, [r3, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f042 0202 	orr.w	r2, r2, #2
 8005224:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2243      	movs	r2, #67	; 0x43
 800522a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800522c:	4b02      	ldr	r3, [pc, #8]	; (8005238 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800522e:	4618      	mov	r0, r3
 8005230:	3718      	adds	r7, #24
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	20000050 	.word	0x20000050

0800523c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005244:	2182      	movs	r1, #130	; 0x82
 8005246:	4818      	ldr	r0, [pc, #96]	; (80052a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005248:	f000 fcdf 	bl	8005c0a <USBD_GetEpDesc>
 800524c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800524e:	2101      	movs	r1, #1
 8005250:	4815      	ldr	r0, [pc, #84]	; (80052a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005252:	f000 fcda 	bl	8005c0a <USBD_GetEpDesc>
 8005256:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005258:	2181      	movs	r1, #129	; 0x81
 800525a:	4813      	ldr	r0, [pc, #76]	; (80052a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800525c:	f000 fcd5 	bl	8005c0a <USBD_GetEpDesc>
 8005260:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d002      	beq.n	800526e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	2210      	movs	r2, #16
 800526c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d006      	beq.n	8005282 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	2200      	movs	r2, #0
 8005278:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800527c:	711a      	strb	r2, [r3, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d006      	beq.n	8005296 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2200      	movs	r2, #0
 800528c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005290:	711a      	strb	r2, [r3, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2243      	movs	r2, #67	; 0x43
 800529a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800529c:	4b02      	ldr	r3, [pc, #8]	; (80052a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3718      	adds	r7, #24
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	20000050 	.word	0x20000050

080052ac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	220a      	movs	r2, #10
 80052b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80052ba:	4b03      	ldr	r3, [pc, #12]	; (80052c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80052bc:	4618      	mov	r0, r3
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr
 80052c8:	2000000c 	.word	0x2000000c

080052cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d101      	bne.n	80052e0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80052dc:	2303      	movs	r3, #3
 80052de:	e009      	b.n	80052f4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	33b0      	adds	r3, #176	; 0xb0
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4413      	add	r3, r2
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005300:	b480      	push	{r7}
 8005302:	b087      	sub	sp, #28
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	32b0      	adds	r2, #176	; 0xb0
 8005316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800531a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005322:	2303      	movs	r3, #3
 8005324:	e008      	b.n	8005338 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	68ba      	ldr	r2, [r7, #8]
 800532a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	371c      	adds	r7, #28
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	32b0      	adds	r2, #176	; 0xb0
 8005358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800535c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d101      	bne.n	8005368 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005364:	2303      	movs	r3, #3
 8005366:	e004      	b.n	8005372 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	683a      	ldr	r2, [r7, #0]
 800536c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3714      	adds	r7, #20
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
	...

08005380 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	32b0      	adds	r2, #176	; 0xb0
 8005392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005396:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005398:	2301      	movs	r3, #1
 800539a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	32b0      	adds	r2, #176	; 0xb0
 80053a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d101      	bne.n	80053b2 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e025      	b.n	80053fe <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d11f      	bne.n	80053fc <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	2201      	movs	r2, #1
 80053c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80053c4:	4b10      	ldr	r3, [pc, #64]	; (8005408 <USBD_CDC_TransmitPacket+0x88>)
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	f003 020f 	and.w	r2, r3, #15
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	4613      	mov	r3, r2
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	4413      	add	r3, r2
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	4403      	add	r3, r0
 80053de:	3318      	adds	r3, #24
 80053e0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80053e2:	4b09      	ldr	r3, [pc, #36]	; (8005408 <USBD_CDC_TransmitPacket+0x88>)
 80053e4:	7819      	ldrb	r1, [r3, #0]
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f001 ffb3 	bl	800735e <USBD_LL_Transmit>

    ret = USBD_OK;
 80053f8:	2300      	movs	r3, #0
 80053fa:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80053fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	20000093 	.word	0x20000093

0800540c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	32b0      	adds	r2, #176	; 0xb0
 800541e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005422:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	32b0      	adds	r2, #176	; 0xb0
 800542e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005436:	2303      	movs	r3, #3
 8005438:	e018      	b.n	800546c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	7c1b      	ldrb	r3, [r3, #16]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d10a      	bne.n	8005458 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005442:	4b0c      	ldr	r3, [pc, #48]	; (8005474 <USBD_CDC_ReceivePacket+0x68>)
 8005444:	7819      	ldrb	r1, [r3, #0]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800544c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f001 ffa5 	bl	80073a0 <USBD_LL_PrepareReceive>
 8005456:	e008      	b.n	800546a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005458:	4b06      	ldr	r3, [pc, #24]	; (8005474 <USBD_CDC_ReceivePacket+0x68>)
 800545a:	7819      	ldrb	r1, [r3, #0]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005462:	2340      	movs	r3, #64	; 0x40
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f001 ff9b 	bl	80073a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3710      	adds	r7, #16
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	20000094 	.word	0x20000094

08005478 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	4613      	mov	r3, r2
 8005484:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d101      	bne.n	8005490 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800548c:	2303      	movs	r3, #3
 800548e:	e01f      	b.n	80054d0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d003      	beq.n	80054b6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	79fa      	ldrb	r2, [r7, #7]
 80054c2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	f001 fe15 	bl	80070f4 <USBD_LL_Init>
 80054ca:	4603      	mov	r3, r0
 80054cc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80054ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3718      	adds	r7, #24
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80054e2:	2300      	movs	r3, #0
 80054e4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d101      	bne.n	80054f0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e025      	b.n	800553c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	683a      	ldr	r2, [r7, #0]
 80054f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	32ae      	adds	r2, #174	; 0xae
 8005502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005508:	2b00      	cmp	r3, #0
 800550a:	d00f      	beq.n	800552c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	32ae      	adds	r2, #174	; 0xae
 8005516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800551a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551c:	f107 020e 	add.w	r2, r7, #14
 8005520:	4610      	mov	r0, r2
 8005522:	4798      	blx	r3
 8005524:	4602      	mov	r2, r0
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005532:	1c5a      	adds	r2, r3, #1
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3710      	adds	r7, #16
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f001 fe1d 	bl	800718c <USBD_LL_Start>
 8005552:	4603      	mov	r3, r0
}
 8005554:	4618      	mov	r0, r3
 8005556:	3708      	adds	r7, #8
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005564:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005566:	4618      	mov	r0, r3
 8005568:	370c      	adds	r7, #12
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr

08005572 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005572:	b580      	push	{r7, lr}
 8005574:	b084      	sub	sp, #16
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
 800557a:	460b      	mov	r3, r1
 800557c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800557e:	2300      	movs	r3, #0
 8005580:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005588:	2b00      	cmp	r3, #0
 800558a:	d009      	beq.n	80055a0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	78fa      	ldrb	r2, [r7, #3]
 8005596:	4611      	mov	r1, r2
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	4798      	blx	r3
 800559c:	4603      	mov	r3, r0
 800559e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80055a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3710      	adds	r7, #16
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}

080055aa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b084      	sub	sp, #16
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
 80055b2:	460b      	mov	r3, r1
 80055b4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80055b6:	2300      	movs	r3, #0
 80055b8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	78fa      	ldrb	r2, [r7, #3]
 80055c4:	4611      	mov	r1, r2
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	4798      	blx	r3
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d001      	beq.n	80055d4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80055d0:	2303      	movs	r3, #3
 80055d2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80055d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b084      	sub	sp, #16
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
 80055e6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80055ee:	6839      	ldr	r1, [r7, #0]
 80055f0:	4618      	mov	r0, r3
 80055f2:	f001 f908 	bl	8006806 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2201      	movs	r2, #1
 80055fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005604:	461a      	mov	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005612:	f003 031f 	and.w	r3, r3, #31
 8005616:	2b02      	cmp	r3, #2
 8005618:	d01a      	beq.n	8005650 <USBD_LL_SetupStage+0x72>
 800561a:	2b02      	cmp	r3, #2
 800561c:	d822      	bhi.n	8005664 <USBD_LL_SetupStage+0x86>
 800561e:	2b00      	cmp	r3, #0
 8005620:	d002      	beq.n	8005628 <USBD_LL_SetupStage+0x4a>
 8005622:	2b01      	cmp	r3, #1
 8005624:	d00a      	beq.n	800563c <USBD_LL_SetupStage+0x5e>
 8005626:	e01d      	b.n	8005664 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800562e:	4619      	mov	r1, r3
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 fb5f 	bl	8005cf4 <USBD_StdDevReq>
 8005636:	4603      	mov	r3, r0
 8005638:	73fb      	strb	r3, [r7, #15]
      break;
 800563a:	e020      	b.n	800567e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005642:	4619      	mov	r1, r3
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 fbc7 	bl	8005dd8 <USBD_StdItfReq>
 800564a:	4603      	mov	r3, r0
 800564c:	73fb      	strb	r3, [r7, #15]
      break;
 800564e:	e016      	b.n	800567e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005656:	4619      	mov	r1, r3
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 fc29 	bl	8005eb0 <USBD_StdEPReq>
 800565e:	4603      	mov	r3, r0
 8005660:	73fb      	strb	r3, [r7, #15]
      break;
 8005662:	e00c      	b.n	800567e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800566a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800566e:	b2db      	uxtb	r3, r3
 8005670:	4619      	mov	r1, r3
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f001 fdea 	bl	800724c <USBD_LL_StallEP>
 8005678:	4603      	mov	r3, r0
 800567a:	73fb      	strb	r3, [r7, #15]
      break;
 800567c:	bf00      	nop
  }

  return ret;
 800567e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005680:	4618      	mov	r0, r3
 8005682:	3710      	adds	r7, #16
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b086      	sub	sp, #24
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	460b      	mov	r3, r1
 8005692:	607a      	str	r2, [r7, #4]
 8005694:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005696:	2300      	movs	r3, #0
 8005698:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800569a:	7afb      	ldrb	r3, [r7, #11]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d16e      	bne.n	800577e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80056a6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80056ae:	2b03      	cmp	r3, #3
 80056b0:	f040 8098 	bne.w	80057e4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	689a      	ldr	r2, [r3, #8]
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d913      	bls.n	80056e8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	689a      	ldr	r2, [r3, #8]
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	1ad2      	subs	r2, r2, r3
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	68da      	ldr	r2, [r3, #12]
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	4293      	cmp	r3, r2
 80056d8:	bf28      	it	cs
 80056da:	4613      	movcs	r3, r2
 80056dc:	461a      	mov	r2, r3
 80056de:	6879      	ldr	r1, [r7, #4]
 80056e0:	68f8      	ldr	r0, [r7, #12]
 80056e2:	f001 f984 	bl	80069ee <USBD_CtlContinueRx>
 80056e6:	e07d      	b.n	80057e4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80056ee:	f003 031f 	and.w	r3, r3, #31
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d014      	beq.n	8005720 <USBD_LL_DataOutStage+0x98>
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d81d      	bhi.n	8005736 <USBD_LL_DataOutStage+0xae>
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d002      	beq.n	8005704 <USBD_LL_DataOutStage+0x7c>
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d003      	beq.n	800570a <USBD_LL_DataOutStage+0x82>
 8005702:	e018      	b.n	8005736 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005704:	2300      	movs	r3, #0
 8005706:	75bb      	strb	r3, [r7, #22]
            break;
 8005708:	e018      	b.n	800573c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005710:	b2db      	uxtb	r3, r3
 8005712:	4619      	mov	r1, r3
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f000 fa5e 	bl	8005bd6 <USBD_CoreFindIF>
 800571a:	4603      	mov	r3, r0
 800571c:	75bb      	strb	r3, [r7, #22]
            break;
 800571e:	e00d      	b.n	800573c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005726:	b2db      	uxtb	r3, r3
 8005728:	4619      	mov	r1, r3
 800572a:	68f8      	ldr	r0, [r7, #12]
 800572c:	f000 fa60 	bl	8005bf0 <USBD_CoreFindEP>
 8005730:	4603      	mov	r3, r0
 8005732:	75bb      	strb	r3, [r7, #22]
            break;
 8005734:	e002      	b.n	800573c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005736:	2300      	movs	r3, #0
 8005738:	75bb      	strb	r3, [r7, #22]
            break;
 800573a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800573c:	7dbb      	ldrb	r3, [r7, #22]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d119      	bne.n	8005776 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b03      	cmp	r3, #3
 800574c:	d113      	bne.n	8005776 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800574e:	7dba      	ldrb	r2, [r7, #22]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	32ae      	adds	r2, #174	; 0xae
 8005754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00b      	beq.n	8005776 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800575e:	7dba      	ldrb	r2, [r7, #22]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005766:	7dba      	ldrb	r2, [r7, #22]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	32ae      	adds	r2, #174	; 0xae
 800576c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f001 f94a 	bl	8006a10 <USBD_CtlSendStatus>
 800577c:	e032      	b.n	80057e4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800577e:	7afb      	ldrb	r3, [r7, #11]
 8005780:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005784:	b2db      	uxtb	r3, r3
 8005786:	4619      	mov	r1, r3
 8005788:	68f8      	ldr	r0, [r7, #12]
 800578a:	f000 fa31 	bl	8005bf0 <USBD_CoreFindEP>
 800578e:	4603      	mov	r3, r0
 8005790:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005792:	7dbb      	ldrb	r3, [r7, #22]
 8005794:	2bff      	cmp	r3, #255	; 0xff
 8005796:	d025      	beq.n	80057e4 <USBD_LL_DataOutStage+0x15c>
 8005798:	7dbb      	ldrb	r3, [r7, #22]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d122      	bne.n	80057e4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	2b03      	cmp	r3, #3
 80057a8:	d117      	bne.n	80057da <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80057aa:	7dba      	ldrb	r2, [r7, #22]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	32ae      	adds	r2, #174	; 0xae
 80057b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00f      	beq.n	80057da <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80057ba:	7dba      	ldrb	r2, [r7, #22]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80057c2:	7dba      	ldrb	r2, [r7, #22]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	32ae      	adds	r2, #174	; 0xae
 80057c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	7afa      	ldrb	r2, [r7, #11]
 80057d0:	4611      	mov	r1, r2
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	4798      	blx	r3
 80057d6:	4603      	mov	r3, r0
 80057d8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80057da:	7dfb      	ldrb	r3, [r7, #23]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d001      	beq.n	80057e4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80057e0:	7dfb      	ldrb	r3, [r7, #23]
 80057e2:	e000      	b.n	80057e6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3718      	adds	r7, #24
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}

080057ee <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b086      	sub	sp, #24
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	60f8      	str	r0, [r7, #12]
 80057f6:	460b      	mov	r3, r1
 80057f8:	607a      	str	r2, [r7, #4]
 80057fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80057fc:	7afb      	ldrb	r3, [r7, #11]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d16f      	bne.n	80058e2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	3314      	adds	r3, #20
 8005806:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800580e:	2b02      	cmp	r3, #2
 8005810:	d15a      	bne.n	80058c8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	689a      	ldr	r2, [r3, #8]
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	429a      	cmp	r2, r3
 800581c:	d914      	bls.n	8005848 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	689a      	ldr	r2, [r3, #8]
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	1ad2      	subs	r2, r2, r3
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	461a      	mov	r2, r3
 8005832:	6879      	ldr	r1, [r7, #4]
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f001 f8ac 	bl	8006992 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800583a:	2300      	movs	r3, #0
 800583c:	2200      	movs	r2, #0
 800583e:	2100      	movs	r1, #0
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f001 fdad 	bl	80073a0 <USBD_LL_PrepareReceive>
 8005846:	e03f      	b.n	80058c8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	68da      	ldr	r2, [r3, #12]
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	429a      	cmp	r2, r3
 8005852:	d11c      	bne.n	800588e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	685a      	ldr	r2, [r3, #4]
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800585c:	429a      	cmp	r2, r3
 800585e:	d316      	bcc.n	800588e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	685a      	ldr	r2, [r3, #4]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800586a:	429a      	cmp	r2, r3
 800586c:	d20f      	bcs.n	800588e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800586e:	2200      	movs	r2, #0
 8005870:	2100      	movs	r1, #0
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	f001 f88d 	bl	8006992 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005880:	2300      	movs	r3, #0
 8005882:	2200      	movs	r2, #0
 8005884:	2100      	movs	r1, #0
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f001 fd8a 	bl	80073a0 <USBD_LL_PrepareReceive>
 800588c:	e01c      	b.n	80058c8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b03      	cmp	r3, #3
 8005898:	d10f      	bne.n	80058ba <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d009      	beq.n	80058ba <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80058ba:	2180      	movs	r1, #128	; 0x80
 80058bc:	68f8      	ldr	r0, [r7, #12]
 80058be:	f001 fcc5 	bl	800724c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	f001 f8b7 	bl	8006a36 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d03a      	beq.n	8005948 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80058d2:	68f8      	ldr	r0, [r7, #12]
 80058d4:	f7ff fe42 	bl	800555c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80058e0:	e032      	b.n	8005948 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80058e2:	7afb      	ldrb	r3, [r7, #11]
 80058e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	4619      	mov	r1, r3
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f000 f97f 	bl	8005bf0 <USBD_CoreFindEP>
 80058f2:	4603      	mov	r3, r0
 80058f4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80058f6:	7dfb      	ldrb	r3, [r7, #23]
 80058f8:	2bff      	cmp	r3, #255	; 0xff
 80058fa:	d025      	beq.n	8005948 <USBD_LL_DataInStage+0x15a>
 80058fc:	7dfb      	ldrb	r3, [r7, #23]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d122      	bne.n	8005948 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b03      	cmp	r3, #3
 800590c:	d11c      	bne.n	8005948 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800590e:	7dfa      	ldrb	r2, [r7, #23]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	32ae      	adds	r2, #174	; 0xae
 8005914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d014      	beq.n	8005948 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800591e:	7dfa      	ldrb	r2, [r7, #23]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005926:	7dfa      	ldrb	r2, [r7, #23]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	32ae      	adds	r2, #174	; 0xae
 800592c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	7afa      	ldrb	r2, [r7, #11]
 8005934:	4611      	mov	r1, r2
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	4798      	blx	r3
 800593a:	4603      	mov	r3, r0
 800593c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800593e:	7dbb      	ldrb	r3, [r7, #22]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d001      	beq.n	8005948 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005944:	7dbb      	ldrb	r3, [r7, #22]
 8005946:	e000      	b.n	800594a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3718      	adds	r7, #24
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}

08005952 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005952:	b580      	push	{r7, lr}
 8005954:	b084      	sub	sp, #16
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800595a:	2300      	movs	r3, #0
 800595c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800598a:	2b00      	cmp	r3, #0
 800598c:	d014      	beq.n	80059b8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00e      	beq.n	80059b8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	6852      	ldr	r2, [r2, #4]
 80059a6:	b2d2      	uxtb	r2, r2
 80059a8:	4611      	mov	r1, r2
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	4798      	blx	r3
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d001      	beq.n	80059b8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80059b4:	2303      	movs	r3, #3
 80059b6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80059b8:	2340      	movs	r3, #64	; 0x40
 80059ba:	2200      	movs	r2, #0
 80059bc:	2100      	movs	r1, #0
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f001 fbff 	bl	80071c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2240      	movs	r2, #64	; 0x40
 80059d0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80059d4:	2340      	movs	r3, #64	; 0x40
 80059d6:	2200      	movs	r2, #0
 80059d8:	2180      	movs	r1, #128	; 0x80
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f001 fbf1 	bl	80071c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2240      	movs	r2, #64	; 0x40
 80059ea:	621a      	str	r2, [r3, #32]

  return ret;
 80059ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80059f6:	b480      	push	{r7}
 80059f8:	b083      	sub	sp, #12
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
 80059fe:	460b      	mov	r3, r1
 8005a00:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	78fa      	ldrb	r2, [r7, #3]
 8005a06:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	370c      	adds	r7, #12
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr

08005a16 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005a16:	b480      	push	{r7}
 8005a18:	b083      	sub	sp, #12
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a24:	b2da      	uxtb	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2204      	movs	r2, #4
 8005a30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	370c      	adds	r7, #12
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005a42:	b480      	push	{r7}
 8005a44:	b083      	sub	sp, #12
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	2b04      	cmp	r3, #4
 8005a54:	d106      	bne.n	8005a64 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005a5c:	b2da      	uxtb	r2, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr

08005a72 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b082      	sub	sp, #8
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b03      	cmp	r3, #3
 8005a84:	d110      	bne.n	8005aa8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00b      	beq.n	8005aa8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a96:	69db      	ldr	r3, [r3, #28]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d005      	beq.n	8005aa8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005aa2:	69db      	ldr	r3, [r3, #28]
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3708      	adds	r7, #8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005ab2:	b580      	push	{r7, lr}
 8005ab4:	b082      	sub	sp, #8
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
 8005aba:	460b      	mov	r3, r1
 8005abc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	32ae      	adds	r2, #174	; 0xae
 8005ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d101      	bne.n	8005ad4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e01c      	b.n	8005b0e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	2b03      	cmp	r3, #3
 8005ade:	d115      	bne.n	8005b0c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	32ae      	adds	r2, #174	; 0xae
 8005aea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aee:	6a1b      	ldr	r3, [r3, #32]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d00b      	beq.n	8005b0c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	32ae      	adds	r2, #174	; 0xae
 8005afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b02:	6a1b      	ldr	r3, [r3, #32]
 8005b04:	78fa      	ldrb	r2, [r7, #3]
 8005b06:	4611      	mov	r1, r2
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3708      	adds	r7, #8
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b082      	sub	sp, #8
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
 8005b1e:	460b      	mov	r3, r1
 8005b20:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	32ae      	adds	r2, #174	; 0xae
 8005b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d101      	bne.n	8005b38 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e01c      	b.n	8005b72 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	2b03      	cmp	r3, #3
 8005b42:	d115      	bne.n	8005b70 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	32ae      	adds	r2, #174	; 0xae
 8005b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d00b      	beq.n	8005b70 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	32ae      	adds	r2, #174	; 0xae
 8005b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b68:	78fa      	ldrb	r2, [r7, #3]
 8005b6a:	4611      	mov	r1, r2
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3708      	adds	r7, #8
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}

08005b7a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	b083      	sub	sp, #12
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00e      	beq.n	8005bcc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	6852      	ldr	r2, [r2, #4]
 8005bba:	b2d2      	uxtb	r2, r2
 8005bbc:	4611      	mov	r1, r2
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	4798      	blx	r3
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d001      	beq.n	8005bcc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b083      	sub	sp, #12
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
 8005bde:	460b      	mov	r3, r1
 8005be0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005be2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005bfc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	370c      	adds	r7, #12
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr

08005c0a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b086      	sub	sp, #24
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
 8005c12:	460b      	mov	r3, r1
 8005c14:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	885b      	ldrh	r3, [r3, #2]
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d920      	bls.n	8005c74 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005c3a:	e013      	b.n	8005c64 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005c3c:	f107 030a 	add.w	r3, r7, #10
 8005c40:	4619      	mov	r1, r3
 8005c42:	6978      	ldr	r0, [r7, #20]
 8005c44:	f000 f81b 	bl	8005c7e <USBD_GetNextDesc>
 8005c48:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	785b      	ldrb	r3, [r3, #1]
 8005c4e:	2b05      	cmp	r3, #5
 8005c50:	d108      	bne.n	8005c64 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	789b      	ldrb	r3, [r3, #2]
 8005c5a:	78fa      	ldrb	r2, [r7, #3]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d008      	beq.n	8005c72 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005c60:	2300      	movs	r3, #0
 8005c62:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	885b      	ldrh	r3, [r3, #2]
 8005c68:	b29a      	uxth	r2, r3
 8005c6a:	897b      	ldrh	r3, [r7, #10]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d8e5      	bhi.n	8005c3c <USBD_GetEpDesc+0x32>
 8005c70:	e000      	b.n	8005c74 <USBD_GetEpDesc+0x6a>
          break;
 8005c72:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005c74:	693b      	ldr	r3, [r7, #16]
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3718      	adds	r7, #24
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005c7e:	b480      	push	{r7}
 8005c80:	b085      	sub	sp, #20
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
 8005c86:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	881a      	ldrh	r2, [r3, #0]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	4413      	add	r3, r2
 8005c98:	b29a      	uxth	r2, r3
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005caa:	68fb      	ldr	r3, [r7, #12]
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3714      	adds	r7, #20
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b087      	sub	sp, #28
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	3301      	adds	r3, #1
 8005cce:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005cd6:	8a3b      	ldrh	r3, [r7, #16]
 8005cd8:	021b      	lsls	r3, r3, #8
 8005cda:	b21a      	sxth	r2, r3
 8005cdc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	b21b      	sxth	r3, r3
 8005ce4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005ce6:	89fb      	ldrh	r3, [r7, #14]
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	371c      	adds	r7, #28
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d0a:	2b40      	cmp	r3, #64	; 0x40
 8005d0c:	d005      	beq.n	8005d1a <USBD_StdDevReq+0x26>
 8005d0e:	2b40      	cmp	r3, #64	; 0x40
 8005d10:	d857      	bhi.n	8005dc2 <USBD_StdDevReq+0xce>
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00f      	beq.n	8005d36 <USBD_StdDevReq+0x42>
 8005d16:	2b20      	cmp	r3, #32
 8005d18:	d153      	bne.n	8005dc2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	32ae      	adds	r2, #174	; 0xae
 8005d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	6839      	ldr	r1, [r7, #0]
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	4798      	blx	r3
 8005d30:	4603      	mov	r3, r0
 8005d32:	73fb      	strb	r3, [r7, #15]
      break;
 8005d34:	e04a      	b.n	8005dcc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	785b      	ldrb	r3, [r3, #1]
 8005d3a:	2b09      	cmp	r3, #9
 8005d3c:	d83b      	bhi.n	8005db6 <USBD_StdDevReq+0xc2>
 8005d3e:	a201      	add	r2, pc, #4	; (adr r2, 8005d44 <USBD_StdDevReq+0x50>)
 8005d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d44:	08005d99 	.word	0x08005d99
 8005d48:	08005dad 	.word	0x08005dad
 8005d4c:	08005db7 	.word	0x08005db7
 8005d50:	08005da3 	.word	0x08005da3
 8005d54:	08005db7 	.word	0x08005db7
 8005d58:	08005d77 	.word	0x08005d77
 8005d5c:	08005d6d 	.word	0x08005d6d
 8005d60:	08005db7 	.word	0x08005db7
 8005d64:	08005d8f 	.word	0x08005d8f
 8005d68:	08005d81 	.word	0x08005d81
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005d6c:	6839      	ldr	r1, [r7, #0]
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 fa3c 	bl	80061ec <USBD_GetDescriptor>
          break;
 8005d74:	e024      	b.n	8005dc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005d76:	6839      	ldr	r1, [r7, #0]
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 fba1 	bl	80064c0 <USBD_SetAddress>
          break;
 8005d7e:	e01f      	b.n	8005dc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005d80:	6839      	ldr	r1, [r7, #0]
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 fbe0 	bl	8006548 <USBD_SetConfig>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	73fb      	strb	r3, [r7, #15]
          break;
 8005d8c:	e018      	b.n	8005dc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005d8e:	6839      	ldr	r1, [r7, #0]
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 fc83 	bl	800669c <USBD_GetConfig>
          break;
 8005d96:	e013      	b.n	8005dc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005d98:	6839      	ldr	r1, [r7, #0]
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 fcb4 	bl	8006708 <USBD_GetStatus>
          break;
 8005da0:	e00e      	b.n	8005dc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005da2:	6839      	ldr	r1, [r7, #0]
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 fce3 	bl	8006770 <USBD_SetFeature>
          break;
 8005daa:	e009      	b.n	8005dc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005dac:	6839      	ldr	r1, [r7, #0]
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 fd07 	bl	80067c2 <USBD_ClrFeature>
          break;
 8005db4:	e004      	b.n	8005dc0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005db6:	6839      	ldr	r1, [r7, #0]
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 fd5e 	bl	800687a <USBD_CtlError>
          break;
 8005dbe:	bf00      	nop
      }
      break;
 8005dc0:	e004      	b.n	8005dcc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005dc2:	6839      	ldr	r1, [r7, #0]
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 fd58 	bl	800687a <USBD_CtlError>
      break;
 8005dca:	bf00      	nop
  }

  return ret;
 8005dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3710      	adds	r7, #16
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop

08005dd8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005de2:	2300      	movs	r3, #0
 8005de4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005dee:	2b40      	cmp	r3, #64	; 0x40
 8005df0:	d005      	beq.n	8005dfe <USBD_StdItfReq+0x26>
 8005df2:	2b40      	cmp	r3, #64	; 0x40
 8005df4:	d852      	bhi.n	8005e9c <USBD_StdItfReq+0xc4>
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d001      	beq.n	8005dfe <USBD_StdItfReq+0x26>
 8005dfa:	2b20      	cmp	r3, #32
 8005dfc:	d14e      	bne.n	8005e9c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	3b01      	subs	r3, #1
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	d840      	bhi.n	8005e8e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	889b      	ldrh	r3, [r3, #4]
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d836      	bhi.n	8005e84 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	889b      	ldrh	r3, [r3, #4]
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f7ff fed9 	bl	8005bd6 <USBD_CoreFindIF>
 8005e24:	4603      	mov	r3, r0
 8005e26:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005e28:	7bbb      	ldrb	r3, [r7, #14]
 8005e2a:	2bff      	cmp	r3, #255	; 0xff
 8005e2c:	d01d      	beq.n	8005e6a <USBD_StdItfReq+0x92>
 8005e2e:	7bbb      	ldrb	r3, [r7, #14]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d11a      	bne.n	8005e6a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005e34:	7bba      	ldrb	r2, [r7, #14]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	32ae      	adds	r2, #174	; 0xae
 8005e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00f      	beq.n	8005e64 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005e44:	7bba      	ldrb	r2, [r7, #14]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005e4c:	7bba      	ldrb	r2, [r7, #14]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	32ae      	adds	r2, #174	; 0xae
 8005e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	6839      	ldr	r1, [r7, #0]
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	4798      	blx	r3
 8005e5e:	4603      	mov	r3, r0
 8005e60:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005e62:	e004      	b.n	8005e6e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005e64:	2303      	movs	r3, #3
 8005e66:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005e68:	e001      	b.n	8005e6e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	88db      	ldrh	r3, [r3, #6]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d110      	bne.n	8005e98 <USBD_StdItfReq+0xc0>
 8005e76:	7bfb      	ldrb	r3, [r7, #15]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10d      	bne.n	8005e98 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 fdc7 	bl	8006a10 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005e82:	e009      	b.n	8005e98 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005e84:	6839      	ldr	r1, [r7, #0]
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 fcf7 	bl	800687a <USBD_CtlError>
          break;
 8005e8c:	e004      	b.n	8005e98 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005e8e:	6839      	ldr	r1, [r7, #0]
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 fcf2 	bl	800687a <USBD_CtlError>
          break;
 8005e96:	e000      	b.n	8005e9a <USBD_StdItfReq+0xc2>
          break;
 8005e98:	bf00      	nop
      }
      break;
 8005e9a:	e004      	b.n	8005ea6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005e9c:	6839      	ldr	r1, [r7, #0]
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 fceb 	bl	800687a <USBD_CtlError>
      break;
 8005ea4:	bf00      	nop
  }

  return ret;
 8005ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3710      	adds	r7, #16
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	889b      	ldrh	r3, [r3, #4]
 8005ec2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ecc:	2b40      	cmp	r3, #64	; 0x40
 8005ece:	d007      	beq.n	8005ee0 <USBD_StdEPReq+0x30>
 8005ed0:	2b40      	cmp	r3, #64	; 0x40
 8005ed2:	f200 817f 	bhi.w	80061d4 <USBD_StdEPReq+0x324>
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d02a      	beq.n	8005f30 <USBD_StdEPReq+0x80>
 8005eda:	2b20      	cmp	r3, #32
 8005edc:	f040 817a 	bne.w	80061d4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005ee0:	7bbb      	ldrb	r3, [r7, #14]
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f7ff fe83 	bl	8005bf0 <USBD_CoreFindEP>
 8005eea:	4603      	mov	r3, r0
 8005eec:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005eee:	7b7b      	ldrb	r3, [r7, #13]
 8005ef0:	2bff      	cmp	r3, #255	; 0xff
 8005ef2:	f000 8174 	beq.w	80061de <USBD_StdEPReq+0x32e>
 8005ef6:	7b7b      	ldrb	r3, [r7, #13]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f040 8170 	bne.w	80061de <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005efe:	7b7a      	ldrb	r2, [r7, #13]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005f06:	7b7a      	ldrb	r2, [r7, #13]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	32ae      	adds	r2, #174	; 0xae
 8005f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	f000 8163 	beq.w	80061de <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005f18:	7b7a      	ldrb	r2, [r7, #13]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	32ae      	adds	r2, #174	; 0xae
 8005f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	6839      	ldr	r1, [r7, #0]
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	4798      	blx	r3
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005f2e:	e156      	b.n	80061de <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	785b      	ldrb	r3, [r3, #1]
 8005f34:	2b03      	cmp	r3, #3
 8005f36:	d008      	beq.n	8005f4a <USBD_StdEPReq+0x9a>
 8005f38:	2b03      	cmp	r3, #3
 8005f3a:	f300 8145 	bgt.w	80061c8 <USBD_StdEPReq+0x318>
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	f000 809b 	beq.w	800607a <USBD_StdEPReq+0x1ca>
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d03c      	beq.n	8005fc2 <USBD_StdEPReq+0x112>
 8005f48:	e13e      	b.n	80061c8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d002      	beq.n	8005f5c <USBD_StdEPReq+0xac>
 8005f56:	2b03      	cmp	r3, #3
 8005f58:	d016      	beq.n	8005f88 <USBD_StdEPReq+0xd8>
 8005f5a:	e02c      	b.n	8005fb6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f5c:	7bbb      	ldrb	r3, [r7, #14]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00d      	beq.n	8005f7e <USBD_StdEPReq+0xce>
 8005f62:	7bbb      	ldrb	r3, [r7, #14]
 8005f64:	2b80      	cmp	r3, #128	; 0x80
 8005f66:	d00a      	beq.n	8005f7e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005f68:	7bbb      	ldrb	r3, [r7, #14]
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f001 f96d 	bl	800724c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f72:	2180      	movs	r1, #128	; 0x80
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f001 f969 	bl	800724c <USBD_LL_StallEP>
 8005f7a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005f7c:	e020      	b.n	8005fc0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005f7e:	6839      	ldr	r1, [r7, #0]
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 fc7a 	bl	800687a <USBD_CtlError>
              break;
 8005f86:	e01b      	b.n	8005fc0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	885b      	ldrh	r3, [r3, #2]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d10e      	bne.n	8005fae <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005f90:	7bbb      	ldrb	r3, [r7, #14]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00b      	beq.n	8005fae <USBD_StdEPReq+0xfe>
 8005f96:	7bbb      	ldrb	r3, [r7, #14]
 8005f98:	2b80      	cmp	r3, #128	; 0x80
 8005f9a:	d008      	beq.n	8005fae <USBD_StdEPReq+0xfe>
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	88db      	ldrh	r3, [r3, #6]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d104      	bne.n	8005fae <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005fa4:	7bbb      	ldrb	r3, [r7, #14]
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f001 f94f 	bl	800724c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 fd2e 	bl	8006a10 <USBD_CtlSendStatus>

              break;
 8005fb4:	e004      	b.n	8005fc0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005fb6:	6839      	ldr	r1, [r7, #0]
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 fc5e 	bl	800687a <USBD_CtlError>
              break;
 8005fbe:	bf00      	nop
          }
          break;
 8005fc0:	e107      	b.n	80061d2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	d002      	beq.n	8005fd4 <USBD_StdEPReq+0x124>
 8005fce:	2b03      	cmp	r3, #3
 8005fd0:	d016      	beq.n	8006000 <USBD_StdEPReq+0x150>
 8005fd2:	e04b      	b.n	800606c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005fd4:	7bbb      	ldrb	r3, [r7, #14]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00d      	beq.n	8005ff6 <USBD_StdEPReq+0x146>
 8005fda:	7bbb      	ldrb	r3, [r7, #14]
 8005fdc:	2b80      	cmp	r3, #128	; 0x80
 8005fde:	d00a      	beq.n	8005ff6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005fe0:	7bbb      	ldrb	r3, [r7, #14]
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f001 f931 	bl	800724c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005fea:	2180      	movs	r1, #128	; 0x80
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f001 f92d 	bl	800724c <USBD_LL_StallEP>
 8005ff2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005ff4:	e040      	b.n	8006078 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005ff6:	6839      	ldr	r1, [r7, #0]
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 fc3e 	bl	800687a <USBD_CtlError>
              break;
 8005ffe:	e03b      	b.n	8006078 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	885b      	ldrh	r3, [r3, #2]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d136      	bne.n	8006076 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006008:	7bbb      	ldrb	r3, [r7, #14]
 800600a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800600e:	2b00      	cmp	r3, #0
 8006010:	d004      	beq.n	800601c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006012:	7bbb      	ldrb	r3, [r7, #14]
 8006014:	4619      	mov	r1, r3
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f001 f937 	bl	800728a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 fcf7 	bl	8006a10 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006022:	7bbb      	ldrb	r3, [r7, #14]
 8006024:	4619      	mov	r1, r3
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f7ff fde2 	bl	8005bf0 <USBD_CoreFindEP>
 800602c:	4603      	mov	r3, r0
 800602e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006030:	7b7b      	ldrb	r3, [r7, #13]
 8006032:	2bff      	cmp	r3, #255	; 0xff
 8006034:	d01f      	beq.n	8006076 <USBD_StdEPReq+0x1c6>
 8006036:	7b7b      	ldrb	r3, [r7, #13]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d11c      	bne.n	8006076 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800603c:	7b7a      	ldrb	r2, [r7, #13]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006044:	7b7a      	ldrb	r2, [r7, #13]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	32ae      	adds	r2, #174	; 0xae
 800604a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d010      	beq.n	8006076 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006054:	7b7a      	ldrb	r2, [r7, #13]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	32ae      	adds	r2, #174	; 0xae
 800605a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	6839      	ldr	r1, [r7, #0]
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	4798      	blx	r3
 8006066:	4603      	mov	r3, r0
 8006068:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800606a:	e004      	b.n	8006076 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800606c:	6839      	ldr	r1, [r7, #0]
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 fc03 	bl	800687a <USBD_CtlError>
              break;
 8006074:	e000      	b.n	8006078 <USBD_StdEPReq+0x1c8>
              break;
 8006076:	bf00      	nop
          }
          break;
 8006078:	e0ab      	b.n	80061d2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006080:	b2db      	uxtb	r3, r3
 8006082:	2b02      	cmp	r3, #2
 8006084:	d002      	beq.n	800608c <USBD_StdEPReq+0x1dc>
 8006086:	2b03      	cmp	r3, #3
 8006088:	d032      	beq.n	80060f0 <USBD_StdEPReq+0x240>
 800608a:	e097      	b.n	80061bc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800608c:	7bbb      	ldrb	r3, [r7, #14]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d007      	beq.n	80060a2 <USBD_StdEPReq+0x1f2>
 8006092:	7bbb      	ldrb	r3, [r7, #14]
 8006094:	2b80      	cmp	r3, #128	; 0x80
 8006096:	d004      	beq.n	80060a2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006098:	6839      	ldr	r1, [r7, #0]
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 fbed 	bl	800687a <USBD_CtlError>
                break;
 80060a0:	e091      	b.n	80061c6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	da0b      	bge.n	80060c2 <USBD_StdEPReq+0x212>
 80060aa:	7bbb      	ldrb	r3, [r7, #14]
 80060ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80060b0:	4613      	mov	r3, r2
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	4413      	add	r3, r2
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	3310      	adds	r3, #16
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	4413      	add	r3, r2
 80060be:	3304      	adds	r3, #4
 80060c0:	e00b      	b.n	80060da <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80060c2:	7bbb      	ldrb	r3, [r7, #14]
 80060c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060c8:	4613      	mov	r3, r2
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	4413      	add	r3, r2
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	4413      	add	r3, r2
 80060d8:	3304      	adds	r3, #4
 80060da:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	2200      	movs	r2, #0
 80060e0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	2202      	movs	r2, #2
 80060e6:	4619      	mov	r1, r3
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 fc37 	bl	800695c <USBD_CtlSendData>
              break;
 80060ee:	e06a      	b.n	80061c6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80060f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	da11      	bge.n	800611c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80060f8:	7bbb      	ldrb	r3, [r7, #14]
 80060fa:	f003 020f 	and.w	r2, r3, #15
 80060fe:	6879      	ldr	r1, [r7, #4]
 8006100:	4613      	mov	r3, r2
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	4413      	add	r3, r2
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	440b      	add	r3, r1
 800610a:	3324      	adds	r3, #36	; 0x24
 800610c:	881b      	ldrh	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d117      	bne.n	8006142 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006112:	6839      	ldr	r1, [r7, #0]
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 fbb0 	bl	800687a <USBD_CtlError>
                  break;
 800611a:	e054      	b.n	80061c6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800611c:	7bbb      	ldrb	r3, [r7, #14]
 800611e:	f003 020f 	and.w	r2, r3, #15
 8006122:	6879      	ldr	r1, [r7, #4]
 8006124:	4613      	mov	r3, r2
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4413      	add	r3, r2
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	440b      	add	r3, r1
 800612e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006132:	881b      	ldrh	r3, [r3, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d104      	bne.n	8006142 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006138:	6839      	ldr	r1, [r7, #0]
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 fb9d 	bl	800687a <USBD_CtlError>
                  break;
 8006140:	e041      	b.n	80061c6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006142:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006146:	2b00      	cmp	r3, #0
 8006148:	da0b      	bge.n	8006162 <USBD_StdEPReq+0x2b2>
 800614a:	7bbb      	ldrb	r3, [r7, #14]
 800614c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006150:	4613      	mov	r3, r2
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	4413      	add	r3, r2
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	3310      	adds	r3, #16
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	4413      	add	r3, r2
 800615e:	3304      	adds	r3, #4
 8006160:	e00b      	b.n	800617a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006162:	7bbb      	ldrb	r3, [r7, #14]
 8006164:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006168:	4613      	mov	r3, r2
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	4413      	add	r3, r2
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	4413      	add	r3, r2
 8006178:	3304      	adds	r3, #4
 800617a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800617c:	7bbb      	ldrb	r3, [r7, #14]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d002      	beq.n	8006188 <USBD_StdEPReq+0x2d8>
 8006182:	7bbb      	ldrb	r3, [r7, #14]
 8006184:	2b80      	cmp	r3, #128	; 0x80
 8006186:	d103      	bne.n	8006190 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	2200      	movs	r2, #0
 800618c:	601a      	str	r2, [r3, #0]
 800618e:	e00e      	b.n	80061ae <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006190:	7bbb      	ldrb	r3, [r7, #14]
 8006192:	4619      	mov	r1, r3
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f001 f897 	bl	80072c8 <USBD_LL_IsStallEP>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d003      	beq.n	80061a8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	2201      	movs	r2, #1
 80061a4:	601a      	str	r2, [r3, #0]
 80061a6:	e002      	b.n	80061ae <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	2200      	movs	r2, #0
 80061ac:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	2202      	movs	r2, #2
 80061b2:	4619      	mov	r1, r3
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 fbd1 	bl	800695c <USBD_CtlSendData>
              break;
 80061ba:	e004      	b.n	80061c6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80061bc:	6839      	ldr	r1, [r7, #0]
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 fb5b 	bl	800687a <USBD_CtlError>
              break;
 80061c4:	bf00      	nop
          }
          break;
 80061c6:	e004      	b.n	80061d2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80061c8:	6839      	ldr	r1, [r7, #0]
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 fb55 	bl	800687a <USBD_CtlError>
          break;
 80061d0:	bf00      	nop
      }
      break;
 80061d2:	e005      	b.n	80061e0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80061d4:	6839      	ldr	r1, [r7, #0]
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 fb4f 	bl	800687a <USBD_CtlError>
      break;
 80061dc:	e000      	b.n	80061e0 <USBD_StdEPReq+0x330>
      break;
 80061de:	bf00      	nop
  }

  return ret;
 80061e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
	...

080061ec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80061f6:	2300      	movs	r3, #0
 80061f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80061fa:	2300      	movs	r3, #0
 80061fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80061fe:	2300      	movs	r3, #0
 8006200:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	885b      	ldrh	r3, [r3, #2]
 8006206:	0a1b      	lsrs	r3, r3, #8
 8006208:	b29b      	uxth	r3, r3
 800620a:	3b01      	subs	r3, #1
 800620c:	2b06      	cmp	r3, #6
 800620e:	f200 8128 	bhi.w	8006462 <USBD_GetDescriptor+0x276>
 8006212:	a201      	add	r2, pc, #4	; (adr r2, 8006218 <USBD_GetDescriptor+0x2c>)
 8006214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006218:	08006235 	.word	0x08006235
 800621c:	0800624d 	.word	0x0800624d
 8006220:	0800628d 	.word	0x0800628d
 8006224:	08006463 	.word	0x08006463
 8006228:	08006463 	.word	0x08006463
 800622c:	08006403 	.word	0x08006403
 8006230:	0800642f 	.word	0x0800642f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	7c12      	ldrb	r2, [r2, #16]
 8006240:	f107 0108 	add.w	r1, r7, #8
 8006244:	4610      	mov	r0, r2
 8006246:	4798      	blx	r3
 8006248:	60f8      	str	r0, [r7, #12]
      break;
 800624a:	e112      	b.n	8006472 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	7c1b      	ldrb	r3, [r3, #16]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d10d      	bne.n	8006270 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800625a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800625c:	f107 0208 	add.w	r2, r7, #8
 8006260:	4610      	mov	r0, r2
 8006262:	4798      	blx	r3
 8006264:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	3301      	adds	r3, #1
 800626a:	2202      	movs	r2, #2
 800626c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800626e:	e100      	b.n	8006472 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006278:	f107 0208 	add.w	r2, r7, #8
 800627c:	4610      	mov	r0, r2
 800627e:	4798      	blx	r3
 8006280:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	3301      	adds	r3, #1
 8006286:	2202      	movs	r2, #2
 8006288:	701a      	strb	r2, [r3, #0]
      break;
 800628a:	e0f2      	b.n	8006472 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	885b      	ldrh	r3, [r3, #2]
 8006290:	b2db      	uxtb	r3, r3
 8006292:	2b05      	cmp	r3, #5
 8006294:	f200 80ac 	bhi.w	80063f0 <USBD_GetDescriptor+0x204>
 8006298:	a201      	add	r2, pc, #4	; (adr r2, 80062a0 <USBD_GetDescriptor+0xb4>)
 800629a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800629e:	bf00      	nop
 80062a0:	080062b9 	.word	0x080062b9
 80062a4:	080062ed 	.word	0x080062ed
 80062a8:	08006321 	.word	0x08006321
 80062ac:	08006355 	.word	0x08006355
 80062b0:	08006389 	.word	0x08006389
 80062b4:	080063bd 	.word	0x080063bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00b      	beq.n	80062dc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	7c12      	ldrb	r2, [r2, #16]
 80062d0:	f107 0108 	add.w	r1, r7, #8
 80062d4:	4610      	mov	r0, r2
 80062d6:	4798      	blx	r3
 80062d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062da:	e091      	b.n	8006400 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80062dc:	6839      	ldr	r1, [r7, #0]
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 facb 	bl	800687a <USBD_CtlError>
            err++;
 80062e4:	7afb      	ldrb	r3, [r7, #11]
 80062e6:	3301      	adds	r3, #1
 80062e8:	72fb      	strb	r3, [r7, #11]
          break;
 80062ea:	e089      	b.n	8006400 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00b      	beq.n	8006310 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	7c12      	ldrb	r2, [r2, #16]
 8006304:	f107 0108 	add.w	r1, r7, #8
 8006308:	4610      	mov	r0, r2
 800630a:	4798      	blx	r3
 800630c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800630e:	e077      	b.n	8006400 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006310:	6839      	ldr	r1, [r7, #0]
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 fab1 	bl	800687a <USBD_CtlError>
            err++;
 8006318:	7afb      	ldrb	r3, [r7, #11]
 800631a:	3301      	adds	r3, #1
 800631c:	72fb      	strb	r3, [r7, #11]
          break;
 800631e:	e06f      	b.n	8006400 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00b      	beq.n	8006344 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	7c12      	ldrb	r2, [r2, #16]
 8006338:	f107 0108 	add.w	r1, r7, #8
 800633c:	4610      	mov	r0, r2
 800633e:	4798      	blx	r3
 8006340:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006342:	e05d      	b.n	8006400 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006344:	6839      	ldr	r1, [r7, #0]
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 fa97 	bl	800687a <USBD_CtlError>
            err++;
 800634c:	7afb      	ldrb	r3, [r7, #11]
 800634e:	3301      	adds	r3, #1
 8006350:	72fb      	strb	r3, [r7, #11]
          break;
 8006352:	e055      	b.n	8006400 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00b      	beq.n	8006378 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	7c12      	ldrb	r2, [r2, #16]
 800636c:	f107 0108 	add.w	r1, r7, #8
 8006370:	4610      	mov	r0, r2
 8006372:	4798      	blx	r3
 8006374:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006376:	e043      	b.n	8006400 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006378:	6839      	ldr	r1, [r7, #0]
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 fa7d 	bl	800687a <USBD_CtlError>
            err++;
 8006380:	7afb      	ldrb	r3, [r7, #11]
 8006382:	3301      	adds	r3, #1
 8006384:	72fb      	strb	r3, [r7, #11]
          break;
 8006386:	e03b      	b.n	8006400 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800638e:	695b      	ldr	r3, [r3, #20]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00b      	beq.n	80063ac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800639a:	695b      	ldr	r3, [r3, #20]
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	7c12      	ldrb	r2, [r2, #16]
 80063a0:	f107 0108 	add.w	r1, r7, #8
 80063a4:	4610      	mov	r0, r2
 80063a6:	4798      	blx	r3
 80063a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063aa:	e029      	b.n	8006400 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063ac:	6839      	ldr	r1, [r7, #0]
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 fa63 	bl	800687a <USBD_CtlError>
            err++;
 80063b4:	7afb      	ldrb	r3, [r7, #11]
 80063b6:	3301      	adds	r3, #1
 80063b8:	72fb      	strb	r3, [r7, #11]
          break;
 80063ba:	e021      	b.n	8006400 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063c2:	699b      	ldr	r3, [r3, #24]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d00b      	beq.n	80063e0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063ce:	699b      	ldr	r3, [r3, #24]
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	7c12      	ldrb	r2, [r2, #16]
 80063d4:	f107 0108 	add.w	r1, r7, #8
 80063d8:	4610      	mov	r0, r2
 80063da:	4798      	blx	r3
 80063dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063de:	e00f      	b.n	8006400 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063e0:	6839      	ldr	r1, [r7, #0]
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 fa49 	bl	800687a <USBD_CtlError>
            err++;
 80063e8:	7afb      	ldrb	r3, [r7, #11]
 80063ea:	3301      	adds	r3, #1
 80063ec:	72fb      	strb	r3, [r7, #11]
          break;
 80063ee:	e007      	b.n	8006400 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80063f0:	6839      	ldr	r1, [r7, #0]
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 fa41 	bl	800687a <USBD_CtlError>
          err++;
 80063f8:	7afb      	ldrb	r3, [r7, #11]
 80063fa:	3301      	adds	r3, #1
 80063fc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80063fe:	bf00      	nop
      }
      break;
 8006400:	e037      	b.n	8006472 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	7c1b      	ldrb	r3, [r3, #16]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d109      	bne.n	800641e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006412:	f107 0208 	add.w	r2, r7, #8
 8006416:	4610      	mov	r0, r2
 8006418:	4798      	blx	r3
 800641a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800641c:	e029      	b.n	8006472 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800641e:	6839      	ldr	r1, [r7, #0]
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 fa2a 	bl	800687a <USBD_CtlError>
        err++;
 8006426:	7afb      	ldrb	r3, [r7, #11]
 8006428:	3301      	adds	r3, #1
 800642a:	72fb      	strb	r3, [r7, #11]
      break;
 800642c:	e021      	b.n	8006472 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	7c1b      	ldrb	r3, [r3, #16]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d10d      	bne.n	8006452 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800643c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643e:	f107 0208 	add.w	r2, r7, #8
 8006442:	4610      	mov	r0, r2
 8006444:	4798      	blx	r3
 8006446:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	3301      	adds	r3, #1
 800644c:	2207      	movs	r2, #7
 800644e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006450:	e00f      	b.n	8006472 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006452:	6839      	ldr	r1, [r7, #0]
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 fa10 	bl	800687a <USBD_CtlError>
        err++;
 800645a:	7afb      	ldrb	r3, [r7, #11]
 800645c:	3301      	adds	r3, #1
 800645e:	72fb      	strb	r3, [r7, #11]
      break;
 8006460:	e007      	b.n	8006472 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006462:	6839      	ldr	r1, [r7, #0]
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 fa08 	bl	800687a <USBD_CtlError>
      err++;
 800646a:	7afb      	ldrb	r3, [r7, #11]
 800646c:	3301      	adds	r3, #1
 800646e:	72fb      	strb	r3, [r7, #11]
      break;
 8006470:	bf00      	nop
  }

  if (err != 0U)
 8006472:	7afb      	ldrb	r3, [r7, #11]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d11e      	bne.n	80064b6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	88db      	ldrh	r3, [r3, #6]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d016      	beq.n	80064ae <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006480:	893b      	ldrh	r3, [r7, #8]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00e      	beq.n	80064a4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	88da      	ldrh	r2, [r3, #6]
 800648a:	893b      	ldrh	r3, [r7, #8]
 800648c:	4293      	cmp	r3, r2
 800648e:	bf28      	it	cs
 8006490:	4613      	movcs	r3, r2
 8006492:	b29b      	uxth	r3, r3
 8006494:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006496:	893b      	ldrh	r3, [r7, #8]
 8006498:	461a      	mov	r2, r3
 800649a:	68f9      	ldr	r1, [r7, #12]
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 fa5d 	bl	800695c <USBD_CtlSendData>
 80064a2:	e009      	b.n	80064b8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80064a4:	6839      	ldr	r1, [r7, #0]
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 f9e7 	bl	800687a <USBD_CtlError>
 80064ac:	e004      	b.n	80064b8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 faae 	bl	8006a10 <USBD_CtlSendStatus>
 80064b4:	e000      	b.n	80064b8 <USBD_GetDescriptor+0x2cc>
    return;
 80064b6:	bf00      	nop
  }
}
 80064b8:	3710      	adds	r7, #16
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop

080064c0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	889b      	ldrh	r3, [r3, #4]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d131      	bne.n	8006536 <USBD_SetAddress+0x76>
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	88db      	ldrh	r3, [r3, #6]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d12d      	bne.n	8006536 <USBD_SetAddress+0x76>
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	885b      	ldrh	r3, [r3, #2]
 80064de:	2b7f      	cmp	r3, #127	; 0x7f
 80064e0:	d829      	bhi.n	8006536 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	885b      	ldrh	r3, [r3, #2]
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	2b03      	cmp	r3, #3
 80064f8:	d104      	bne.n	8006504 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80064fa:	6839      	ldr	r1, [r7, #0]
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 f9bc 	bl	800687a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006502:	e01d      	b.n	8006540 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	7bfa      	ldrb	r2, [r7, #15]
 8006508:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800650c:	7bfb      	ldrb	r3, [r7, #15]
 800650e:	4619      	mov	r1, r3
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 ff05 	bl	8007320 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 fa7a 	bl	8006a10 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800651c:	7bfb      	ldrb	r3, [r7, #15]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d004      	beq.n	800652c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2202      	movs	r2, #2
 8006526:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800652a:	e009      	b.n	8006540 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006534:	e004      	b.n	8006540 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006536:	6839      	ldr	r1, [r7, #0]
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 f99e 	bl	800687a <USBD_CtlError>
  }
}
 800653e:	bf00      	nop
 8006540:	bf00      	nop
 8006542:	3710      	adds	r7, #16
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006552:	2300      	movs	r3, #0
 8006554:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	885b      	ldrh	r3, [r3, #2]
 800655a:	b2da      	uxtb	r2, r3
 800655c:	4b4e      	ldr	r3, [pc, #312]	; (8006698 <USBD_SetConfig+0x150>)
 800655e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006560:	4b4d      	ldr	r3, [pc, #308]	; (8006698 <USBD_SetConfig+0x150>)
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	2b01      	cmp	r3, #1
 8006566:	d905      	bls.n	8006574 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006568:	6839      	ldr	r1, [r7, #0]
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f985 	bl	800687a <USBD_CtlError>
    return USBD_FAIL;
 8006570:	2303      	movs	r3, #3
 8006572:	e08c      	b.n	800668e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b02      	cmp	r3, #2
 800657e:	d002      	beq.n	8006586 <USBD_SetConfig+0x3e>
 8006580:	2b03      	cmp	r3, #3
 8006582:	d029      	beq.n	80065d8 <USBD_SetConfig+0x90>
 8006584:	e075      	b.n	8006672 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006586:	4b44      	ldr	r3, [pc, #272]	; (8006698 <USBD_SetConfig+0x150>)
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d020      	beq.n	80065d0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800658e:	4b42      	ldr	r3, [pc, #264]	; (8006698 <USBD_SetConfig+0x150>)
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	461a      	mov	r2, r3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006598:	4b3f      	ldr	r3, [pc, #252]	; (8006698 <USBD_SetConfig+0x150>)
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	4619      	mov	r1, r3
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f7fe ffe7 	bl	8005572 <USBD_SetClassConfig>
 80065a4:	4603      	mov	r3, r0
 80065a6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80065a8:	7bfb      	ldrb	r3, [r7, #15]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d008      	beq.n	80065c0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80065ae:	6839      	ldr	r1, [r7, #0]
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f962 	bl	800687a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2202      	movs	r2, #2
 80065ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80065be:	e065      	b.n	800668c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 fa25 	bl	8006a10 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2203      	movs	r2, #3
 80065ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80065ce:	e05d      	b.n	800668c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 fa1d 	bl	8006a10 <USBD_CtlSendStatus>
      break;
 80065d6:	e059      	b.n	800668c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80065d8:	4b2f      	ldr	r3, [pc, #188]	; (8006698 <USBD_SetConfig+0x150>)
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d112      	bne.n	8006606 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2202      	movs	r2, #2
 80065e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80065e8:	4b2b      	ldr	r3, [pc, #172]	; (8006698 <USBD_SetConfig+0x150>)
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	461a      	mov	r2, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80065f2:	4b29      	ldr	r3, [pc, #164]	; (8006698 <USBD_SetConfig+0x150>)
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	4619      	mov	r1, r3
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f7fe ffd6 	bl	80055aa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 fa06 	bl	8006a10 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006604:	e042      	b.n	800668c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006606:	4b24      	ldr	r3, [pc, #144]	; (8006698 <USBD_SetConfig+0x150>)
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	461a      	mov	r2, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	429a      	cmp	r2, r3
 8006612:	d02a      	beq.n	800666a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	b2db      	uxtb	r3, r3
 800661a:	4619      	mov	r1, r3
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f7fe ffc4 	bl	80055aa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006622:	4b1d      	ldr	r3, [pc, #116]	; (8006698 <USBD_SetConfig+0x150>)
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	461a      	mov	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800662c:	4b1a      	ldr	r3, [pc, #104]	; (8006698 <USBD_SetConfig+0x150>)
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	4619      	mov	r1, r3
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f7fe ff9d 	bl	8005572 <USBD_SetClassConfig>
 8006638:	4603      	mov	r3, r0
 800663a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800663c:	7bfb      	ldrb	r3, [r7, #15]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00f      	beq.n	8006662 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006642:	6839      	ldr	r1, [r7, #0]
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 f918 	bl	800687a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	b2db      	uxtb	r3, r3
 8006650:	4619      	mov	r1, r3
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f7fe ffa9 	bl	80055aa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2202      	movs	r2, #2
 800665c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006660:	e014      	b.n	800668c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 f9d4 	bl	8006a10 <USBD_CtlSendStatus>
      break;
 8006668:	e010      	b.n	800668c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 f9d0 	bl	8006a10 <USBD_CtlSendStatus>
      break;
 8006670:	e00c      	b.n	800668c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006672:	6839      	ldr	r1, [r7, #0]
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f000 f900 	bl	800687a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800667a:	4b07      	ldr	r3, [pc, #28]	; (8006698 <USBD_SetConfig+0x150>)
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	4619      	mov	r1, r3
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f7fe ff92 	bl	80055aa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006686:	2303      	movs	r3, #3
 8006688:	73fb      	strb	r3, [r7, #15]
      break;
 800668a:	bf00      	nop
  }

  return ret;
 800668c:	7bfb      	ldrb	r3, [r7, #15]
}
 800668e:	4618      	mov	r0, r3
 8006690:	3710      	adds	r7, #16
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	200001e0 	.word	0x200001e0

0800669c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	88db      	ldrh	r3, [r3, #6]
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d004      	beq.n	80066b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80066ae:	6839      	ldr	r1, [r7, #0]
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 f8e2 	bl	800687a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80066b6:	e023      	b.n	8006700 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	2b02      	cmp	r3, #2
 80066c2:	dc02      	bgt.n	80066ca <USBD_GetConfig+0x2e>
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	dc03      	bgt.n	80066d0 <USBD_GetConfig+0x34>
 80066c8:	e015      	b.n	80066f6 <USBD_GetConfig+0x5a>
 80066ca:	2b03      	cmp	r3, #3
 80066cc:	d00b      	beq.n	80066e6 <USBD_GetConfig+0x4a>
 80066ce:	e012      	b.n	80066f6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	3308      	adds	r3, #8
 80066da:	2201      	movs	r2, #1
 80066dc:	4619      	mov	r1, r3
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 f93c 	bl	800695c <USBD_CtlSendData>
        break;
 80066e4:	e00c      	b.n	8006700 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	3304      	adds	r3, #4
 80066ea:	2201      	movs	r2, #1
 80066ec:	4619      	mov	r1, r3
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 f934 	bl	800695c <USBD_CtlSendData>
        break;
 80066f4:	e004      	b.n	8006700 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80066f6:	6839      	ldr	r1, [r7, #0]
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 f8be 	bl	800687a <USBD_CtlError>
        break;
 80066fe:	bf00      	nop
}
 8006700:	bf00      	nop
 8006702:	3708      	adds	r7, #8
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006718:	b2db      	uxtb	r3, r3
 800671a:	3b01      	subs	r3, #1
 800671c:	2b02      	cmp	r3, #2
 800671e:	d81e      	bhi.n	800675e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	88db      	ldrh	r3, [r3, #6]
 8006724:	2b02      	cmp	r3, #2
 8006726:	d004      	beq.n	8006732 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006728:	6839      	ldr	r1, [r7, #0]
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 f8a5 	bl	800687a <USBD_CtlError>
        break;
 8006730:	e01a      	b.n	8006768 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2201      	movs	r2, #1
 8006736:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800673e:	2b00      	cmp	r3, #0
 8006740:	d005      	beq.n	800674e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	f043 0202 	orr.w	r2, r3, #2
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	330c      	adds	r3, #12
 8006752:	2202      	movs	r2, #2
 8006754:	4619      	mov	r1, r3
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 f900 	bl	800695c <USBD_CtlSendData>
      break;
 800675c:	e004      	b.n	8006768 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800675e:	6839      	ldr	r1, [r7, #0]
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 f88a 	bl	800687a <USBD_CtlError>
      break;
 8006766:	bf00      	nop
  }
}
 8006768:	bf00      	nop
 800676a:	3708      	adds	r7, #8
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	885b      	ldrh	r3, [r3, #2]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d107      	bne.n	8006792 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2201      	movs	r2, #1
 8006786:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 f940 	bl	8006a10 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006790:	e013      	b.n	80067ba <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	885b      	ldrh	r3, [r3, #2]
 8006796:	2b02      	cmp	r3, #2
 8006798:	d10b      	bne.n	80067b2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	889b      	ldrh	r3, [r3, #4]
 800679e:	0a1b      	lsrs	r3, r3, #8
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	b2da      	uxtb	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f930 	bl	8006a10 <USBD_CtlSendStatus>
}
 80067b0:	e003      	b.n	80067ba <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80067b2:	6839      	ldr	r1, [r7, #0]
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 f860 	bl	800687a <USBD_CtlError>
}
 80067ba:	bf00      	nop
 80067bc:	3708      	adds	r7, #8
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b082      	sub	sp, #8
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
 80067ca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	3b01      	subs	r3, #1
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	d80b      	bhi.n	80067f2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	885b      	ldrh	r3, [r3, #2]
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d10c      	bne.n	80067fc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 f910 	bl	8006a10 <USBD_CtlSendStatus>
      }
      break;
 80067f0:	e004      	b.n	80067fc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80067f2:	6839      	ldr	r1, [r7, #0]
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 f840 	bl	800687a <USBD_CtlError>
      break;
 80067fa:	e000      	b.n	80067fe <USBD_ClrFeature+0x3c>
      break;
 80067fc:	bf00      	nop
  }
}
 80067fe:	bf00      	nop
 8006800:	3708      	adds	r7, #8
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006806:	b580      	push	{r7, lr}
 8006808:	b084      	sub	sp, #16
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
 800680e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	781a      	ldrb	r2, [r3, #0]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	3301      	adds	r3, #1
 8006820:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	781a      	ldrb	r2, [r3, #0]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	3301      	adds	r3, #1
 800682e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006830:	68f8      	ldr	r0, [r7, #12]
 8006832:	f7ff fa41 	bl	8005cb8 <SWAPBYTE>
 8006836:	4603      	mov	r3, r0
 8006838:	461a      	mov	r2, r3
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	3301      	adds	r3, #1
 8006842:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	3301      	adds	r3, #1
 8006848:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	f7ff fa34 	bl	8005cb8 <SWAPBYTE>
 8006850:	4603      	mov	r3, r0
 8006852:	461a      	mov	r2, r3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	3301      	adds	r3, #1
 800685c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	3301      	adds	r3, #1
 8006862:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006864:	68f8      	ldr	r0, [r7, #12]
 8006866:	f7ff fa27 	bl	8005cb8 <SWAPBYTE>
 800686a:	4603      	mov	r3, r0
 800686c:	461a      	mov	r2, r3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	80da      	strh	r2, [r3, #6]
}
 8006872:	bf00      	nop
 8006874:	3710      	adds	r7, #16
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}

0800687a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800687a:	b580      	push	{r7, lr}
 800687c:	b082      	sub	sp, #8
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
 8006882:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006884:	2180      	movs	r1, #128	; 0x80
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 fce0 	bl	800724c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800688c:	2100      	movs	r1, #0
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 fcdc 	bl	800724c <USBD_LL_StallEP>
}
 8006894:	bf00      	nop
 8006896:	3708      	adds	r7, #8
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b086      	sub	sp, #24
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	60b9      	str	r1, [r7, #8]
 80068a6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80068a8:	2300      	movs	r3, #0
 80068aa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d036      	beq.n	8006920 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80068b6:	6938      	ldr	r0, [r7, #16]
 80068b8:	f000 f836 	bl	8006928 <USBD_GetLen>
 80068bc:	4603      	mov	r3, r0
 80068be:	3301      	adds	r3, #1
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	005b      	lsls	r3, r3, #1
 80068c4:	b29a      	uxth	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80068ca:	7dfb      	ldrb	r3, [r7, #23]
 80068cc:	68ba      	ldr	r2, [r7, #8]
 80068ce:	4413      	add	r3, r2
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	7812      	ldrb	r2, [r2, #0]
 80068d4:	701a      	strb	r2, [r3, #0]
  idx++;
 80068d6:	7dfb      	ldrb	r3, [r7, #23]
 80068d8:	3301      	adds	r3, #1
 80068da:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80068dc:	7dfb      	ldrb	r3, [r7, #23]
 80068de:	68ba      	ldr	r2, [r7, #8]
 80068e0:	4413      	add	r3, r2
 80068e2:	2203      	movs	r2, #3
 80068e4:	701a      	strb	r2, [r3, #0]
  idx++;
 80068e6:	7dfb      	ldrb	r3, [r7, #23]
 80068e8:	3301      	adds	r3, #1
 80068ea:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80068ec:	e013      	b.n	8006916 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80068ee:	7dfb      	ldrb	r3, [r7, #23]
 80068f0:	68ba      	ldr	r2, [r7, #8]
 80068f2:	4413      	add	r3, r2
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	7812      	ldrb	r2, [r2, #0]
 80068f8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	3301      	adds	r3, #1
 80068fe:	613b      	str	r3, [r7, #16]
    idx++;
 8006900:	7dfb      	ldrb	r3, [r7, #23]
 8006902:	3301      	adds	r3, #1
 8006904:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006906:	7dfb      	ldrb	r3, [r7, #23]
 8006908:	68ba      	ldr	r2, [r7, #8]
 800690a:	4413      	add	r3, r2
 800690c:	2200      	movs	r2, #0
 800690e:	701a      	strb	r2, [r3, #0]
    idx++;
 8006910:	7dfb      	ldrb	r3, [r7, #23]
 8006912:	3301      	adds	r3, #1
 8006914:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d1e7      	bne.n	80068ee <USBD_GetString+0x52>
 800691e:	e000      	b.n	8006922 <USBD_GetString+0x86>
    return;
 8006920:	bf00      	nop
  }
}
 8006922:	3718      	adds	r7, #24
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006930:	2300      	movs	r3, #0
 8006932:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006938:	e005      	b.n	8006946 <USBD_GetLen+0x1e>
  {
    len++;
 800693a:	7bfb      	ldrb	r3, [r7, #15]
 800693c:	3301      	adds	r3, #1
 800693e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	3301      	adds	r3, #1
 8006944:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1f5      	bne.n	800693a <USBD_GetLen+0x12>
  }

  return len;
 800694e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006950:	4618      	mov	r0, r3
 8006952:	3714      	adds	r7, #20
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2202      	movs	r2, #2
 800696c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	68ba      	ldr	r2, [r7, #8]
 8006980:	2100      	movs	r1, #0
 8006982:	68f8      	ldr	r0, [r7, #12]
 8006984:	f000 fceb 	bl	800735e <USBD_LL_Transmit>

  return USBD_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3710      	adds	r7, #16
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}

08006992 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006992:	b580      	push	{r7, lr}
 8006994:	b084      	sub	sp, #16
 8006996:	af00      	add	r7, sp, #0
 8006998:	60f8      	str	r0, [r7, #12]
 800699a:	60b9      	str	r1, [r7, #8]
 800699c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	2100      	movs	r1, #0
 80069a4:	68f8      	ldr	r0, [r7, #12]
 80069a6:	f000 fcda 	bl	800735e <USBD_LL_Transmit>

  return USBD_OK;
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2203      	movs	r2, #3
 80069c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	68ba      	ldr	r2, [r7, #8]
 80069dc:	2100      	movs	r1, #0
 80069de:	68f8      	ldr	r0, [r7, #12]
 80069e0:	f000 fcde 	bl	80073a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3710      	adds	r7, #16
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}

080069ee <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b084      	sub	sp, #16
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	60f8      	str	r0, [r7, #12]
 80069f6:	60b9      	str	r1, [r7, #8]
 80069f8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	68ba      	ldr	r2, [r7, #8]
 80069fe:	2100      	movs	r1, #0
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f000 fccd 	bl	80073a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a06:	2300      	movs	r3, #0
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3710      	adds	r7, #16
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b082      	sub	sp, #8
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2204      	movs	r2, #4
 8006a1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006a20:	2300      	movs	r3, #0
 8006a22:	2200      	movs	r2, #0
 8006a24:	2100      	movs	r1, #0
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 fc99 	bl	800735e <USBD_LL_Transmit>

  return USBD_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3708      	adds	r7, #8
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b082      	sub	sp, #8
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2205      	movs	r2, #5
 8006a42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a46:	2300      	movs	r3, #0
 8006a48:	2200      	movs	r2, #0
 8006a4a:	2100      	movs	r1, #0
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 fca7 	bl	80073a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3708      	adds	r7, #8
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006a60:	2200      	movs	r2, #0
 8006a62:	4912      	ldr	r1, [pc, #72]	; (8006aac <MX_USB_DEVICE_Init+0x50>)
 8006a64:	4812      	ldr	r0, [pc, #72]	; (8006ab0 <MX_USB_DEVICE_Init+0x54>)
 8006a66:	f7fe fd07 	bl	8005478 <USBD_Init>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d001      	beq.n	8006a74 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006a70:	f7f9 fee4 	bl	800083c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006a74:	490f      	ldr	r1, [pc, #60]	; (8006ab4 <MX_USB_DEVICE_Init+0x58>)
 8006a76:	480e      	ldr	r0, [pc, #56]	; (8006ab0 <MX_USB_DEVICE_Init+0x54>)
 8006a78:	f7fe fd2e 	bl	80054d8 <USBD_RegisterClass>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d001      	beq.n	8006a86 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006a82:	f7f9 fedb 	bl	800083c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006a86:	490c      	ldr	r1, [pc, #48]	; (8006ab8 <MX_USB_DEVICE_Init+0x5c>)
 8006a88:	4809      	ldr	r0, [pc, #36]	; (8006ab0 <MX_USB_DEVICE_Init+0x54>)
 8006a8a:	f7fe fc1f 	bl	80052cc <USBD_CDC_RegisterInterface>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d001      	beq.n	8006a98 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006a94:	f7f9 fed2 	bl	800083c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006a98:	4805      	ldr	r0, [pc, #20]	; (8006ab0 <MX_USB_DEVICE_Init+0x54>)
 8006a9a:	f7fe fd53 	bl	8005544 <USBD_Start>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d001      	beq.n	8006aa8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006aa4:	f7f9 feca 	bl	800083c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006aa8:	bf00      	nop
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	200000ac 	.word	0x200000ac
 8006ab0:	200001e4 	.word	0x200001e4
 8006ab4:	20000018 	.word	0x20000018
 8006ab8:	20000098 	.word	0x20000098

08006abc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	4905      	ldr	r1, [pc, #20]	; (8006ad8 <CDC_Init_FS+0x1c>)
 8006ac4:	4805      	ldr	r0, [pc, #20]	; (8006adc <CDC_Init_FS+0x20>)
 8006ac6:	f7fe fc1b 	bl	8005300 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006aca:	4905      	ldr	r1, [pc, #20]	; (8006ae0 <CDC_Init_FS+0x24>)
 8006acc:	4803      	ldr	r0, [pc, #12]	; (8006adc <CDC_Init_FS+0x20>)
 8006ace:	f7fe fc39 	bl	8005344 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006ad2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	20000cc0 	.word	0x20000cc0
 8006adc:	200001e4 	.word	0x200001e4
 8006ae0:	200004c0 	.word	0x200004c0

08006ae4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006ae8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	4603      	mov	r3, r0
 8006afc:	6039      	str	r1, [r7, #0]
 8006afe:	71fb      	strb	r3, [r7, #7]
 8006b00:	4613      	mov	r3, r2
 8006b02:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006b04:	79fb      	ldrb	r3, [r7, #7]
 8006b06:	2b23      	cmp	r3, #35	; 0x23
 8006b08:	d84a      	bhi.n	8006ba0 <CDC_Control_FS+0xac>
 8006b0a:	a201      	add	r2, pc, #4	; (adr r2, 8006b10 <CDC_Control_FS+0x1c>)
 8006b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b10:	08006ba1 	.word	0x08006ba1
 8006b14:	08006ba1 	.word	0x08006ba1
 8006b18:	08006ba1 	.word	0x08006ba1
 8006b1c:	08006ba1 	.word	0x08006ba1
 8006b20:	08006ba1 	.word	0x08006ba1
 8006b24:	08006ba1 	.word	0x08006ba1
 8006b28:	08006ba1 	.word	0x08006ba1
 8006b2c:	08006ba1 	.word	0x08006ba1
 8006b30:	08006ba1 	.word	0x08006ba1
 8006b34:	08006ba1 	.word	0x08006ba1
 8006b38:	08006ba1 	.word	0x08006ba1
 8006b3c:	08006ba1 	.word	0x08006ba1
 8006b40:	08006ba1 	.word	0x08006ba1
 8006b44:	08006ba1 	.word	0x08006ba1
 8006b48:	08006ba1 	.word	0x08006ba1
 8006b4c:	08006ba1 	.word	0x08006ba1
 8006b50:	08006ba1 	.word	0x08006ba1
 8006b54:	08006ba1 	.word	0x08006ba1
 8006b58:	08006ba1 	.word	0x08006ba1
 8006b5c:	08006ba1 	.word	0x08006ba1
 8006b60:	08006ba1 	.word	0x08006ba1
 8006b64:	08006ba1 	.word	0x08006ba1
 8006b68:	08006ba1 	.word	0x08006ba1
 8006b6c:	08006ba1 	.word	0x08006ba1
 8006b70:	08006ba1 	.word	0x08006ba1
 8006b74:	08006ba1 	.word	0x08006ba1
 8006b78:	08006ba1 	.word	0x08006ba1
 8006b7c:	08006ba1 	.word	0x08006ba1
 8006b80:	08006ba1 	.word	0x08006ba1
 8006b84:	08006ba1 	.word	0x08006ba1
 8006b88:	08006ba1 	.word	0x08006ba1
 8006b8c:	08006ba1 	.word	0x08006ba1
 8006b90:	08006ba1 	.word	0x08006ba1
 8006b94:	08006ba1 	.word	0x08006ba1
 8006b98:	08006ba1 	.word	0x08006ba1
 8006b9c:	08006ba1 	.word	0x08006ba1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006ba0:	bf00      	nop
  }

  return (USBD_OK);
 8006ba2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	370c      	adds	r7, #12
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006bba:	6879      	ldr	r1, [r7, #4]
 8006bbc:	4805      	ldr	r0, [pc, #20]	; (8006bd4 <CDC_Receive_FS+0x24>)
 8006bbe:	f7fe fbc1 	bl	8005344 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006bc2:	4804      	ldr	r0, [pc, #16]	; (8006bd4 <CDC_Receive_FS+0x24>)
 8006bc4:	f7fe fc22 	bl	800540c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006bc8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3708      	adds	r7, #8
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	200001e4 	.word	0x200001e4

08006bd8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	460b      	mov	r3, r1
 8006be2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006be4:	2300      	movs	r3, #0
 8006be6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006be8:	4b0d      	ldr	r3, [pc, #52]	; (8006c20 <CDC_Transmit_FS+0x48>)
 8006bea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d001      	beq.n	8006bfe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e00b      	b.n	8006c16 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006bfe:	887b      	ldrh	r3, [r7, #2]
 8006c00:	461a      	mov	r2, r3
 8006c02:	6879      	ldr	r1, [r7, #4]
 8006c04:	4806      	ldr	r0, [pc, #24]	; (8006c20 <CDC_Transmit_FS+0x48>)
 8006c06:	f7fe fb7b 	bl	8005300 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006c0a:	4805      	ldr	r0, [pc, #20]	; (8006c20 <CDC_Transmit_FS+0x48>)
 8006c0c:	f7fe fbb8 	bl	8005380 <USBD_CDC_TransmitPacket>
 8006c10:	4603      	mov	r3, r0
 8006c12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3710      	adds	r7, #16
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	200001e4 	.word	0x200001e4

08006c24 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b087      	sub	sp, #28
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	60f8      	str	r0, [r7, #12]
 8006c2c:	60b9      	str	r1, [r7, #8]
 8006c2e:	4613      	mov	r3, r2
 8006c30:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006c32:	2300      	movs	r3, #0
 8006c34:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006c36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	371c      	adds	r7, #28
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr
	...

08006c48 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	4603      	mov	r3, r0
 8006c50:	6039      	str	r1, [r7, #0]
 8006c52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	2212      	movs	r2, #18
 8006c58:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006c5a:	4b03      	ldr	r3, [pc, #12]	; (8006c68 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr
 8006c68:	200000c8 	.word	0x200000c8

08006c6c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	4603      	mov	r3, r0
 8006c74:	6039      	str	r1, [r7, #0]
 8006c76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	2204      	movs	r2, #4
 8006c7c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006c7e:	4b03      	ldr	r3, [pc, #12]	; (8006c8c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr
 8006c8c:	200000dc 	.word	0x200000dc

08006c90 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	4603      	mov	r3, r0
 8006c98:	6039      	str	r1, [r7, #0]
 8006c9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006c9c:	79fb      	ldrb	r3, [r7, #7]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d105      	bne.n	8006cae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006ca2:	683a      	ldr	r2, [r7, #0]
 8006ca4:	4907      	ldr	r1, [pc, #28]	; (8006cc4 <USBD_FS_ProductStrDescriptor+0x34>)
 8006ca6:	4808      	ldr	r0, [pc, #32]	; (8006cc8 <USBD_FS_ProductStrDescriptor+0x38>)
 8006ca8:	f7ff fdf8 	bl	800689c <USBD_GetString>
 8006cac:	e004      	b.n	8006cb8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006cae:	683a      	ldr	r2, [r7, #0]
 8006cb0:	4904      	ldr	r1, [pc, #16]	; (8006cc4 <USBD_FS_ProductStrDescriptor+0x34>)
 8006cb2:	4805      	ldr	r0, [pc, #20]	; (8006cc8 <USBD_FS_ProductStrDescriptor+0x38>)
 8006cb4:	f7ff fdf2 	bl	800689c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006cb8:	4b02      	ldr	r3, [pc, #8]	; (8006cc4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3708      	adds	r7, #8
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	200014c0 	.word	0x200014c0
 8006cc8:	08007e08 	.word	0x08007e08

08006ccc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	6039      	str	r1, [r7, #0]
 8006cd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006cd8:	683a      	ldr	r2, [r7, #0]
 8006cda:	4904      	ldr	r1, [pc, #16]	; (8006cec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006cdc:	4804      	ldr	r0, [pc, #16]	; (8006cf0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006cde:	f7ff fddd 	bl	800689c <USBD_GetString>
  return USBD_StrDesc;
 8006ce2:	4b02      	ldr	r3, [pc, #8]	; (8006cec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3708      	adds	r7, #8
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	200014c0 	.word	0x200014c0
 8006cf0:	08007e20 	.word	0x08007e20

08006cf4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	6039      	str	r1, [r7, #0]
 8006cfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	221a      	movs	r2, #26
 8006d04:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006d06:	f000 f843 	bl	8006d90 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006d0a:	4b02      	ldr	r3, [pc, #8]	; (8006d14 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3708      	adds	r7, #8
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	200000e0 	.word	0x200000e0

08006d18 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	4603      	mov	r3, r0
 8006d20:	6039      	str	r1, [r7, #0]
 8006d22:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006d24:	79fb      	ldrb	r3, [r7, #7]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d105      	bne.n	8006d36 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006d2a:	683a      	ldr	r2, [r7, #0]
 8006d2c:	4907      	ldr	r1, [pc, #28]	; (8006d4c <USBD_FS_ConfigStrDescriptor+0x34>)
 8006d2e:	4808      	ldr	r0, [pc, #32]	; (8006d50 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006d30:	f7ff fdb4 	bl	800689c <USBD_GetString>
 8006d34:	e004      	b.n	8006d40 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006d36:	683a      	ldr	r2, [r7, #0]
 8006d38:	4904      	ldr	r1, [pc, #16]	; (8006d4c <USBD_FS_ConfigStrDescriptor+0x34>)
 8006d3a:	4805      	ldr	r0, [pc, #20]	; (8006d50 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006d3c:	f7ff fdae 	bl	800689c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006d40:	4b02      	ldr	r3, [pc, #8]	; (8006d4c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3708      	adds	r7, #8
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	200014c0 	.word	0x200014c0
 8006d50:	08007e34 	.word	0x08007e34

08006d54 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	6039      	str	r1, [r7, #0]
 8006d5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006d60:	79fb      	ldrb	r3, [r7, #7]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d105      	bne.n	8006d72 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006d66:	683a      	ldr	r2, [r7, #0]
 8006d68:	4907      	ldr	r1, [pc, #28]	; (8006d88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006d6a:	4808      	ldr	r0, [pc, #32]	; (8006d8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006d6c:	f7ff fd96 	bl	800689c <USBD_GetString>
 8006d70:	e004      	b.n	8006d7c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006d72:	683a      	ldr	r2, [r7, #0]
 8006d74:	4904      	ldr	r1, [pc, #16]	; (8006d88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006d76:	4805      	ldr	r0, [pc, #20]	; (8006d8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006d78:	f7ff fd90 	bl	800689c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006d7c:	4b02      	ldr	r3, [pc, #8]	; (8006d88 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3708      	adds	r7, #8
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	200014c0 	.word	0x200014c0
 8006d8c:	08007e40 	.word	0x08007e40

08006d90 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006d96:	4b0f      	ldr	r3, [pc, #60]	; (8006dd4 <Get_SerialNum+0x44>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006d9c:	4b0e      	ldr	r3, [pc, #56]	; (8006dd8 <Get_SerialNum+0x48>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006da2:	4b0e      	ldr	r3, [pc, #56]	; (8006ddc <Get_SerialNum+0x4c>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4413      	add	r3, r2
 8006dae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d009      	beq.n	8006dca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006db6:	2208      	movs	r2, #8
 8006db8:	4909      	ldr	r1, [pc, #36]	; (8006de0 <Get_SerialNum+0x50>)
 8006dba:	68f8      	ldr	r0, [r7, #12]
 8006dbc:	f000 f814 	bl	8006de8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006dc0:	2204      	movs	r2, #4
 8006dc2:	4908      	ldr	r1, [pc, #32]	; (8006de4 <Get_SerialNum+0x54>)
 8006dc4:	68b8      	ldr	r0, [r7, #8]
 8006dc6:	f000 f80f 	bl	8006de8 <IntToUnicode>
  }
}
 8006dca:	bf00      	nop
 8006dcc:	3710      	adds	r7, #16
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	1fff7a10 	.word	0x1fff7a10
 8006dd8:	1fff7a14 	.word	0x1fff7a14
 8006ddc:	1fff7a18 	.word	0x1fff7a18
 8006de0:	200000e2 	.word	0x200000e2
 8006de4:	200000f2 	.word	0x200000f2

08006de8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b087      	sub	sp, #28
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	4613      	mov	r3, r2
 8006df4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006df6:	2300      	movs	r3, #0
 8006df8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	75fb      	strb	r3, [r7, #23]
 8006dfe:	e027      	b.n	8006e50 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	0f1b      	lsrs	r3, r3, #28
 8006e04:	2b09      	cmp	r3, #9
 8006e06:	d80b      	bhi.n	8006e20 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	0f1b      	lsrs	r3, r3, #28
 8006e0c:	b2da      	uxtb	r2, r3
 8006e0e:	7dfb      	ldrb	r3, [r7, #23]
 8006e10:	005b      	lsls	r3, r3, #1
 8006e12:	4619      	mov	r1, r3
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	440b      	add	r3, r1
 8006e18:	3230      	adds	r2, #48	; 0x30
 8006e1a:	b2d2      	uxtb	r2, r2
 8006e1c:	701a      	strb	r2, [r3, #0]
 8006e1e:	e00a      	b.n	8006e36 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	0f1b      	lsrs	r3, r3, #28
 8006e24:	b2da      	uxtb	r2, r3
 8006e26:	7dfb      	ldrb	r3, [r7, #23]
 8006e28:	005b      	lsls	r3, r3, #1
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	440b      	add	r3, r1
 8006e30:	3237      	adds	r2, #55	; 0x37
 8006e32:	b2d2      	uxtb	r2, r2
 8006e34:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	011b      	lsls	r3, r3, #4
 8006e3a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006e3c:	7dfb      	ldrb	r3, [r7, #23]
 8006e3e:	005b      	lsls	r3, r3, #1
 8006e40:	3301      	adds	r3, #1
 8006e42:	68ba      	ldr	r2, [r7, #8]
 8006e44:	4413      	add	r3, r2
 8006e46:	2200      	movs	r2, #0
 8006e48:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006e4a:	7dfb      	ldrb	r3, [r7, #23]
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	75fb      	strb	r3, [r7, #23]
 8006e50:	7dfa      	ldrb	r2, [r7, #23]
 8006e52:	79fb      	ldrb	r3, [r7, #7]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d3d3      	bcc.n	8006e00 <IntToUnicode+0x18>
  }
}
 8006e58:	bf00      	nop
 8006e5a:	bf00      	nop
 8006e5c:	371c      	adds	r7, #28
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr
	...

08006e68 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b08a      	sub	sp, #40	; 0x28
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e70:	f107 0314 	add.w	r3, r7, #20
 8006e74:	2200      	movs	r2, #0
 8006e76:	601a      	str	r2, [r3, #0]
 8006e78:	605a      	str	r2, [r3, #4]
 8006e7a:	609a      	str	r2, [r3, #8]
 8006e7c:	60da      	str	r2, [r3, #12]
 8006e7e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e88:	d13a      	bne.n	8006f00 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	613b      	str	r3, [r7, #16]
 8006e8e:	4b1e      	ldr	r3, [pc, #120]	; (8006f08 <HAL_PCD_MspInit+0xa0>)
 8006e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e92:	4a1d      	ldr	r2, [pc, #116]	; (8006f08 <HAL_PCD_MspInit+0xa0>)
 8006e94:	f043 0301 	orr.w	r3, r3, #1
 8006e98:	6313      	str	r3, [r2, #48]	; 0x30
 8006e9a:	4b1b      	ldr	r3, [pc, #108]	; (8006f08 <HAL_PCD_MspInit+0xa0>)
 8006e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e9e:	f003 0301 	and.w	r3, r3, #1
 8006ea2:	613b      	str	r3, [r7, #16]
 8006ea4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006ea6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006eaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006eac:	2302      	movs	r3, #2
 8006eae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006eb4:	2303      	movs	r3, #3
 8006eb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006eb8:	230a      	movs	r3, #10
 8006eba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ebc:	f107 0314 	add.w	r3, r7, #20
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	4812      	ldr	r0, [pc, #72]	; (8006f0c <HAL_PCD_MspInit+0xa4>)
 8006ec4:	f7f9 ff60 	bl	8000d88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006ec8:	4b0f      	ldr	r3, [pc, #60]	; (8006f08 <HAL_PCD_MspInit+0xa0>)
 8006eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ecc:	4a0e      	ldr	r2, [pc, #56]	; (8006f08 <HAL_PCD_MspInit+0xa0>)
 8006ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ed2:	6353      	str	r3, [r2, #52]	; 0x34
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	60fb      	str	r3, [r7, #12]
 8006ed8:	4b0b      	ldr	r3, [pc, #44]	; (8006f08 <HAL_PCD_MspInit+0xa0>)
 8006eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006edc:	4a0a      	ldr	r2, [pc, #40]	; (8006f08 <HAL_PCD_MspInit+0xa0>)
 8006ede:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ee2:	6453      	str	r3, [r2, #68]	; 0x44
 8006ee4:	4b08      	ldr	r3, [pc, #32]	; (8006f08 <HAL_PCD_MspInit+0xa0>)
 8006ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ee8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006eec:	60fb      	str	r3, [r7, #12]
 8006eee:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	2100      	movs	r1, #0
 8006ef4:	2043      	movs	r0, #67	; 0x43
 8006ef6:	f7f9 ff10 	bl	8000d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006efa:	2043      	movs	r0, #67	; 0x43
 8006efc:	f7f9 ff29 	bl	8000d52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006f00:	bf00      	nop
 8006f02:	3728      	adds	r7, #40	; 0x28
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	40023800 	.word	0x40023800
 8006f0c:	40020000 	.word	0x40020000

08006f10 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b082      	sub	sp, #8
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006f24:	4619      	mov	r1, r3
 8006f26:	4610      	mov	r0, r2
 8006f28:	f7fe fb59 	bl	80055de <USBD_LL_SetupStage>
}
 8006f2c:	bf00      	nop
 8006f2e:	3708      	adds	r7, #8
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b082      	sub	sp, #8
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006f46:	78fa      	ldrb	r2, [r7, #3]
 8006f48:	6879      	ldr	r1, [r7, #4]
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	00db      	lsls	r3, r3, #3
 8006f4e:	4413      	add	r3, r2
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	440b      	add	r3, r1
 8006f54:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	78fb      	ldrb	r3, [r7, #3]
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	f7fe fb93 	bl	8005688 <USBD_LL_DataOutStage>
}
 8006f62:	bf00      	nop
 8006f64:	3708      	adds	r7, #8
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}

08006f6a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f6a:	b580      	push	{r7, lr}
 8006f6c:	b082      	sub	sp, #8
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
 8006f72:	460b      	mov	r3, r1
 8006f74:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006f7c:	78fa      	ldrb	r2, [r7, #3]
 8006f7e:	6879      	ldr	r1, [r7, #4]
 8006f80:	4613      	mov	r3, r2
 8006f82:	00db      	lsls	r3, r3, #3
 8006f84:	4413      	add	r3, r2
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	440b      	add	r3, r1
 8006f8a:	334c      	adds	r3, #76	; 0x4c
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	78fb      	ldrb	r3, [r7, #3]
 8006f90:	4619      	mov	r1, r3
 8006f92:	f7fe fc2c 	bl	80057ee <USBD_LL_DataInStage>
}
 8006f96:	bf00      	nop
 8006f98:	3708      	adds	r7, #8
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b082      	sub	sp, #8
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006fac:	4618      	mov	r0, r3
 8006fae:	f7fe fd60 	bl	8005a72 <USBD_LL_SOF>
}
 8006fb2:	bf00      	nop
 8006fb4:	3708      	adds	r7, #8
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	b084      	sub	sp, #16
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	68db      	ldr	r3, [r3, #12]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d102      	bne.n	8006fd4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	73fb      	strb	r3, [r7, #15]
 8006fd2:	e008      	b.n	8006fe6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d102      	bne.n	8006fe2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	73fb      	strb	r3, [r7, #15]
 8006fe0:	e001      	b.n	8006fe6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006fe2:	f7f9 fc2b 	bl	800083c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006fec:	7bfa      	ldrb	r2, [r7, #15]
 8006fee:	4611      	mov	r1, r2
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f7fe fd00 	bl	80059f6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f7fe fca8 	bl	8005952 <USBD_LL_Reset>
}
 8007002:	bf00      	nop
 8007004:	3710      	adds	r7, #16
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
	...

0800700c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b082      	sub	sp, #8
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800701a:	4618      	mov	r0, r3
 800701c:	f7fe fcfb 	bl	8005a16 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	6812      	ldr	r2, [r2, #0]
 800702e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007032:	f043 0301 	orr.w	r3, r3, #1
 8007036:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a1b      	ldr	r3, [r3, #32]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d005      	beq.n	800704c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007040:	4b04      	ldr	r3, [pc, #16]	; (8007054 <HAL_PCD_SuspendCallback+0x48>)
 8007042:	691b      	ldr	r3, [r3, #16]
 8007044:	4a03      	ldr	r2, [pc, #12]	; (8007054 <HAL_PCD_SuspendCallback+0x48>)
 8007046:	f043 0306 	orr.w	r3, r3, #6
 800704a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800704c:	bf00      	nop
 800704e:	3708      	adds	r7, #8
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}
 8007054:	e000ed00 	.word	0xe000ed00

08007058 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007066:	4618      	mov	r0, r3
 8007068:	f7fe fceb 	bl	8005a42 <USBD_LL_Resume>
}
 800706c:	bf00      	nop
 800706e:	3708      	adds	r7, #8
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	460b      	mov	r3, r1
 800707e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007086:	78fa      	ldrb	r2, [r7, #3]
 8007088:	4611      	mov	r1, r2
 800708a:	4618      	mov	r0, r3
 800708c:	f7fe fd43 	bl	8005b16 <USBD_LL_IsoOUTIncomplete>
}
 8007090:	bf00      	nop
 8007092:	3708      	adds	r7, #8
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b082      	sub	sp, #8
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	460b      	mov	r3, r1
 80070a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80070aa:	78fa      	ldrb	r2, [r7, #3]
 80070ac:	4611      	mov	r1, r2
 80070ae:	4618      	mov	r0, r3
 80070b0:	f7fe fcff 	bl	8005ab2 <USBD_LL_IsoINIncomplete>
}
 80070b4:	bf00      	nop
 80070b6:	3708      	adds	r7, #8
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7fe fd55 	bl	8005b7a <USBD_LL_DevConnected>
}
 80070d0:	bf00      	nop
 80070d2:	3708      	adds	r7, #8
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80070e6:	4618      	mov	r0, r3
 80070e8:	f7fe fd52 	bl	8005b90 <USBD_LL_DevDisconnected>
}
 80070ec:	bf00      	nop
 80070ee:	3708      	adds	r7, #8
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d13c      	bne.n	800717e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007104:	4a20      	ldr	r2, [pc, #128]	; (8007188 <USBD_LL_Init+0x94>)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a1e      	ldr	r2, [pc, #120]	; (8007188 <USBD_LL_Init+0x94>)
 8007110:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007114:	4b1c      	ldr	r3, [pc, #112]	; (8007188 <USBD_LL_Init+0x94>)
 8007116:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800711a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800711c:	4b1a      	ldr	r3, [pc, #104]	; (8007188 <USBD_LL_Init+0x94>)
 800711e:	2204      	movs	r2, #4
 8007120:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007122:	4b19      	ldr	r3, [pc, #100]	; (8007188 <USBD_LL_Init+0x94>)
 8007124:	2202      	movs	r2, #2
 8007126:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007128:	4b17      	ldr	r3, [pc, #92]	; (8007188 <USBD_LL_Init+0x94>)
 800712a:	2200      	movs	r2, #0
 800712c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800712e:	4b16      	ldr	r3, [pc, #88]	; (8007188 <USBD_LL_Init+0x94>)
 8007130:	2202      	movs	r2, #2
 8007132:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007134:	4b14      	ldr	r3, [pc, #80]	; (8007188 <USBD_LL_Init+0x94>)
 8007136:	2200      	movs	r2, #0
 8007138:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800713a:	4b13      	ldr	r3, [pc, #76]	; (8007188 <USBD_LL_Init+0x94>)
 800713c:	2200      	movs	r2, #0
 800713e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007140:	4b11      	ldr	r3, [pc, #68]	; (8007188 <USBD_LL_Init+0x94>)
 8007142:	2200      	movs	r2, #0
 8007144:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007146:	4b10      	ldr	r3, [pc, #64]	; (8007188 <USBD_LL_Init+0x94>)
 8007148:	2200      	movs	r2, #0
 800714a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800714c:	4b0e      	ldr	r3, [pc, #56]	; (8007188 <USBD_LL_Init+0x94>)
 800714e:	2200      	movs	r2, #0
 8007150:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007152:	480d      	ldr	r0, [pc, #52]	; (8007188 <USBD_LL_Init+0x94>)
 8007154:	f7f9 fffe 	bl	8001154 <HAL_PCD_Init>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d001      	beq.n	8007162 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800715e:	f7f9 fb6d 	bl	800083c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007162:	2180      	movs	r1, #128	; 0x80
 8007164:	4808      	ldr	r0, [pc, #32]	; (8007188 <USBD_LL_Init+0x94>)
 8007166:	f7fb fa56 	bl	8002616 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800716a:	2240      	movs	r2, #64	; 0x40
 800716c:	2100      	movs	r1, #0
 800716e:	4806      	ldr	r0, [pc, #24]	; (8007188 <USBD_LL_Init+0x94>)
 8007170:	f7fb fa0a 	bl	8002588 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007174:	2280      	movs	r2, #128	; 0x80
 8007176:	2101      	movs	r1, #1
 8007178:	4803      	ldr	r0, [pc, #12]	; (8007188 <USBD_LL_Init+0x94>)
 800717a:	f7fb fa05 	bl	8002588 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	3708      	adds	r7, #8
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}
 8007188:	200016c0 	.word	0x200016c0

0800718c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b084      	sub	sp, #16
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007194:	2300      	movs	r3, #0
 8007196:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007198:	2300      	movs	r3, #0
 800719a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80071a2:	4618      	mov	r0, r3
 80071a4:	f7fa f8f3 	bl	800138e <HAL_PCD_Start>
 80071a8:	4603      	mov	r3, r0
 80071aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80071ac:	7bfb      	ldrb	r3, [r7, #15]
 80071ae:	4618      	mov	r0, r3
 80071b0:	f000 f942 	bl	8007438 <USBD_Get_USB_Status>
 80071b4:	4603      	mov	r3, r0
 80071b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80071b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3710      	adds	r7, #16
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b084      	sub	sp, #16
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
 80071ca:	4608      	mov	r0, r1
 80071cc:	4611      	mov	r1, r2
 80071ce:	461a      	mov	r2, r3
 80071d0:	4603      	mov	r3, r0
 80071d2:	70fb      	strb	r3, [r7, #3]
 80071d4:	460b      	mov	r3, r1
 80071d6:	70bb      	strb	r3, [r7, #2]
 80071d8:	4613      	mov	r3, r2
 80071da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071dc:	2300      	movs	r3, #0
 80071de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071e0:	2300      	movs	r3, #0
 80071e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80071ea:	78bb      	ldrb	r3, [r7, #2]
 80071ec:	883a      	ldrh	r2, [r7, #0]
 80071ee:	78f9      	ldrb	r1, [r7, #3]
 80071f0:	f7fa fdc4 	bl	8001d7c <HAL_PCD_EP_Open>
 80071f4:	4603      	mov	r3, r0
 80071f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80071f8:	7bfb      	ldrb	r3, [r7, #15]
 80071fa:	4618      	mov	r0, r3
 80071fc:	f000 f91c 	bl	8007438 <USBD_Get_USB_Status>
 8007200:	4603      	mov	r3, r0
 8007202:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007204:	7bbb      	ldrb	r3, [r7, #14]
}
 8007206:	4618      	mov	r0, r3
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b084      	sub	sp, #16
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
 8007216:	460b      	mov	r3, r1
 8007218:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800721a:	2300      	movs	r3, #0
 800721c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800721e:	2300      	movs	r3, #0
 8007220:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007228:	78fa      	ldrb	r2, [r7, #3]
 800722a:	4611      	mov	r1, r2
 800722c:	4618      	mov	r0, r3
 800722e:	f7fa fe0d 	bl	8001e4c <HAL_PCD_EP_Close>
 8007232:	4603      	mov	r3, r0
 8007234:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007236:	7bfb      	ldrb	r3, [r7, #15]
 8007238:	4618      	mov	r0, r3
 800723a:	f000 f8fd 	bl	8007438 <USBD_Get_USB_Status>
 800723e:	4603      	mov	r3, r0
 8007240:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007242:	7bbb      	ldrb	r3, [r7, #14]
}
 8007244:	4618      	mov	r0, r3
 8007246:	3710      	adds	r7, #16
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	460b      	mov	r3, r1
 8007256:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007258:	2300      	movs	r3, #0
 800725a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800725c:	2300      	movs	r3, #0
 800725e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007266:	78fa      	ldrb	r2, [r7, #3]
 8007268:	4611      	mov	r1, r2
 800726a:	4618      	mov	r0, r3
 800726c:	f7fa fee5 	bl	800203a <HAL_PCD_EP_SetStall>
 8007270:	4603      	mov	r3, r0
 8007272:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007274:	7bfb      	ldrb	r3, [r7, #15]
 8007276:	4618      	mov	r0, r3
 8007278:	f000 f8de 	bl	8007438 <USBD_Get_USB_Status>
 800727c:	4603      	mov	r3, r0
 800727e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007280:	7bbb      	ldrb	r3, [r7, #14]
}
 8007282:	4618      	mov	r0, r3
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800728a:	b580      	push	{r7, lr}
 800728c:	b084      	sub	sp, #16
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
 8007292:	460b      	mov	r3, r1
 8007294:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007296:	2300      	movs	r3, #0
 8007298:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800729a:	2300      	movs	r3, #0
 800729c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80072a4:	78fa      	ldrb	r2, [r7, #3]
 80072a6:	4611      	mov	r1, r2
 80072a8:	4618      	mov	r0, r3
 80072aa:	f7fa ff2a 	bl	8002102 <HAL_PCD_EP_ClrStall>
 80072ae:	4603      	mov	r3, r0
 80072b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072b2:	7bfb      	ldrb	r3, [r7, #15]
 80072b4:	4618      	mov	r0, r3
 80072b6:	f000 f8bf 	bl	8007438 <USBD_Get_USB_Status>
 80072ba:	4603      	mov	r3, r0
 80072bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072be:	7bbb      	ldrb	r3, [r7, #14]
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3710      	adds	r7, #16
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b085      	sub	sp, #20
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	460b      	mov	r3, r1
 80072d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80072da:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80072dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	da0b      	bge.n	80072fc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80072e4:	78fb      	ldrb	r3, [r7, #3]
 80072e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072ea:	68f9      	ldr	r1, [r7, #12]
 80072ec:	4613      	mov	r3, r2
 80072ee:	00db      	lsls	r3, r3, #3
 80072f0:	4413      	add	r3, r2
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	440b      	add	r3, r1
 80072f6:	333e      	adds	r3, #62	; 0x3e
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	e00b      	b.n	8007314 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80072fc:	78fb      	ldrb	r3, [r7, #3]
 80072fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007302:	68f9      	ldr	r1, [r7, #12]
 8007304:	4613      	mov	r3, r2
 8007306:	00db      	lsls	r3, r3, #3
 8007308:	4413      	add	r3, r2
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	440b      	add	r3, r1
 800730e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007312:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007314:	4618      	mov	r0, r3
 8007316:	3714      	adds	r7, #20
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	460b      	mov	r3, r1
 800732a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800732c:	2300      	movs	r3, #0
 800732e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007330:	2300      	movs	r3, #0
 8007332:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800733a:	78fa      	ldrb	r2, [r7, #3]
 800733c:	4611      	mov	r1, r2
 800733e:	4618      	mov	r0, r3
 8007340:	f7fa fcf7 	bl	8001d32 <HAL_PCD_SetAddress>
 8007344:	4603      	mov	r3, r0
 8007346:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007348:	7bfb      	ldrb	r3, [r7, #15]
 800734a:	4618      	mov	r0, r3
 800734c:	f000 f874 	bl	8007438 <USBD_Get_USB_Status>
 8007350:	4603      	mov	r3, r0
 8007352:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007354:	7bbb      	ldrb	r3, [r7, #14]
}
 8007356:	4618      	mov	r0, r3
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b086      	sub	sp, #24
 8007362:	af00      	add	r7, sp, #0
 8007364:	60f8      	str	r0, [r7, #12]
 8007366:	607a      	str	r2, [r7, #4]
 8007368:	603b      	str	r3, [r7, #0]
 800736a:	460b      	mov	r3, r1
 800736c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800736e:	2300      	movs	r3, #0
 8007370:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007372:	2300      	movs	r3, #0
 8007374:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800737c:	7af9      	ldrb	r1, [r7, #11]
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	f7fa fe10 	bl	8001fa6 <HAL_PCD_EP_Transmit>
 8007386:	4603      	mov	r3, r0
 8007388:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800738a:	7dfb      	ldrb	r3, [r7, #23]
 800738c:	4618      	mov	r0, r3
 800738e:	f000 f853 	bl	8007438 <USBD_Get_USB_Status>
 8007392:	4603      	mov	r3, r0
 8007394:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007396:	7dbb      	ldrb	r3, [r7, #22]
}
 8007398:	4618      	mov	r0, r3
 800739a:	3718      	adds	r7, #24
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b086      	sub	sp, #24
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	607a      	str	r2, [r7, #4]
 80073aa:	603b      	str	r3, [r7, #0]
 80073ac:	460b      	mov	r3, r1
 80073ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073b0:	2300      	movs	r3, #0
 80073b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073b4:	2300      	movs	r3, #0
 80073b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80073be:	7af9      	ldrb	r1, [r7, #11]
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	f7fa fd8c 	bl	8001ee0 <HAL_PCD_EP_Receive>
 80073c8:	4603      	mov	r3, r0
 80073ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073cc:	7dfb      	ldrb	r3, [r7, #23]
 80073ce:	4618      	mov	r0, r3
 80073d0:	f000 f832 	bl	8007438 <USBD_Get_USB_Status>
 80073d4:	4603      	mov	r3, r0
 80073d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80073d8:	7dbb      	ldrb	r3, [r7, #22]
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3718      	adds	r7, #24
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}

080073e2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b082      	sub	sp, #8
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
 80073ea:	460b      	mov	r3, r1
 80073ec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80073f4:	78fa      	ldrb	r2, [r7, #3]
 80073f6:	4611      	mov	r1, r2
 80073f8:	4618      	mov	r0, r3
 80073fa:	f7fa fdbc 	bl	8001f76 <HAL_PCD_EP_GetRxCount>
 80073fe:	4603      	mov	r3, r0
}
 8007400:	4618      	mov	r0, r3
 8007402:	3708      	adds	r7, #8
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007410:	4b03      	ldr	r3, [pc, #12]	; (8007420 <USBD_static_malloc+0x18>)
}
 8007412:	4618      	mov	r0, r3
 8007414:	370c      	adds	r7, #12
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr
 800741e:	bf00      	nop
 8007420:	20001bcc 	.word	0x20001bcc

08007424 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]

}
 800742c:	bf00      	nop
 800742e:	370c      	adds	r7, #12
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007438:	b480      	push	{r7}
 800743a:	b085      	sub	sp, #20
 800743c:	af00      	add	r7, sp, #0
 800743e:	4603      	mov	r3, r0
 8007440:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007442:	2300      	movs	r3, #0
 8007444:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007446:	79fb      	ldrb	r3, [r7, #7]
 8007448:	2b03      	cmp	r3, #3
 800744a:	d817      	bhi.n	800747c <USBD_Get_USB_Status+0x44>
 800744c:	a201      	add	r2, pc, #4	; (adr r2, 8007454 <USBD_Get_USB_Status+0x1c>)
 800744e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007452:	bf00      	nop
 8007454:	08007465 	.word	0x08007465
 8007458:	0800746b 	.word	0x0800746b
 800745c:	08007471 	.word	0x08007471
 8007460:	08007477 	.word	0x08007477
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007464:	2300      	movs	r3, #0
 8007466:	73fb      	strb	r3, [r7, #15]
    break;
 8007468:	e00b      	b.n	8007482 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800746a:	2303      	movs	r3, #3
 800746c:	73fb      	strb	r3, [r7, #15]
    break;
 800746e:	e008      	b.n	8007482 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007470:	2301      	movs	r3, #1
 8007472:	73fb      	strb	r3, [r7, #15]
    break;
 8007474:	e005      	b.n	8007482 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007476:	2303      	movs	r3, #3
 8007478:	73fb      	strb	r3, [r7, #15]
    break;
 800747a:	e002      	b.n	8007482 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800747c:	2303      	movs	r3, #3
 800747e:	73fb      	strb	r3, [r7, #15]
    break;
 8007480:	bf00      	nop
  }
  return usb_status;
 8007482:	7bfb      	ldrb	r3, [r7, #15]
}
 8007484:	4618      	mov	r0, r3
 8007486:	3714      	adds	r7, #20
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <siprintf>:
 8007490:	b40e      	push	{r1, r2, r3}
 8007492:	b500      	push	{lr}
 8007494:	b09c      	sub	sp, #112	; 0x70
 8007496:	ab1d      	add	r3, sp, #116	; 0x74
 8007498:	9002      	str	r0, [sp, #8]
 800749a:	9006      	str	r0, [sp, #24]
 800749c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80074a0:	4809      	ldr	r0, [pc, #36]	; (80074c8 <siprintf+0x38>)
 80074a2:	9107      	str	r1, [sp, #28]
 80074a4:	9104      	str	r1, [sp, #16]
 80074a6:	4909      	ldr	r1, [pc, #36]	; (80074cc <siprintf+0x3c>)
 80074a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80074ac:	9105      	str	r1, [sp, #20]
 80074ae:	6800      	ldr	r0, [r0, #0]
 80074b0:	9301      	str	r3, [sp, #4]
 80074b2:	a902      	add	r1, sp, #8
 80074b4:	f000 f992 	bl	80077dc <_svfiprintf_r>
 80074b8:	9b02      	ldr	r3, [sp, #8]
 80074ba:	2200      	movs	r2, #0
 80074bc:	701a      	strb	r2, [r3, #0]
 80074be:	b01c      	add	sp, #112	; 0x70
 80074c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80074c4:	b003      	add	sp, #12
 80074c6:	4770      	bx	lr
 80074c8:	20000148 	.word	0x20000148
 80074cc:	ffff0208 	.word	0xffff0208

080074d0 <memset>:
 80074d0:	4402      	add	r2, r0
 80074d2:	4603      	mov	r3, r0
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d100      	bne.n	80074da <memset+0xa>
 80074d8:	4770      	bx	lr
 80074da:	f803 1b01 	strb.w	r1, [r3], #1
 80074de:	e7f9      	b.n	80074d4 <memset+0x4>

080074e0 <__errno>:
 80074e0:	4b01      	ldr	r3, [pc, #4]	; (80074e8 <__errno+0x8>)
 80074e2:	6818      	ldr	r0, [r3, #0]
 80074e4:	4770      	bx	lr
 80074e6:	bf00      	nop
 80074e8:	20000148 	.word	0x20000148

080074ec <__libc_init_array>:
 80074ec:	b570      	push	{r4, r5, r6, lr}
 80074ee:	4d0d      	ldr	r5, [pc, #52]	; (8007524 <__libc_init_array+0x38>)
 80074f0:	4c0d      	ldr	r4, [pc, #52]	; (8007528 <__libc_init_array+0x3c>)
 80074f2:	1b64      	subs	r4, r4, r5
 80074f4:	10a4      	asrs	r4, r4, #2
 80074f6:	2600      	movs	r6, #0
 80074f8:	42a6      	cmp	r6, r4
 80074fa:	d109      	bne.n	8007510 <__libc_init_array+0x24>
 80074fc:	4d0b      	ldr	r5, [pc, #44]	; (800752c <__libc_init_array+0x40>)
 80074fe:	4c0c      	ldr	r4, [pc, #48]	; (8007530 <__libc_init_array+0x44>)
 8007500:	f000 fc6a 	bl	8007dd8 <_init>
 8007504:	1b64      	subs	r4, r4, r5
 8007506:	10a4      	asrs	r4, r4, #2
 8007508:	2600      	movs	r6, #0
 800750a:	42a6      	cmp	r6, r4
 800750c:	d105      	bne.n	800751a <__libc_init_array+0x2e>
 800750e:	bd70      	pop	{r4, r5, r6, pc}
 8007510:	f855 3b04 	ldr.w	r3, [r5], #4
 8007514:	4798      	blx	r3
 8007516:	3601      	adds	r6, #1
 8007518:	e7ee      	b.n	80074f8 <__libc_init_array+0xc>
 800751a:	f855 3b04 	ldr.w	r3, [r5], #4
 800751e:	4798      	blx	r3
 8007520:	3601      	adds	r6, #1
 8007522:	e7f2      	b.n	800750a <__libc_init_array+0x1e>
 8007524:	08007e9c 	.word	0x08007e9c
 8007528:	08007e9c 	.word	0x08007e9c
 800752c:	08007e9c 	.word	0x08007e9c
 8007530:	08007ea0 	.word	0x08007ea0

08007534 <__retarget_lock_acquire_recursive>:
 8007534:	4770      	bx	lr

08007536 <__retarget_lock_release_recursive>:
 8007536:	4770      	bx	lr

08007538 <_free_r>:
 8007538:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800753a:	2900      	cmp	r1, #0
 800753c:	d044      	beq.n	80075c8 <_free_r+0x90>
 800753e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007542:	9001      	str	r0, [sp, #4]
 8007544:	2b00      	cmp	r3, #0
 8007546:	f1a1 0404 	sub.w	r4, r1, #4
 800754a:	bfb8      	it	lt
 800754c:	18e4      	addlt	r4, r4, r3
 800754e:	f000 f8df 	bl	8007710 <__malloc_lock>
 8007552:	4a1e      	ldr	r2, [pc, #120]	; (80075cc <_free_r+0x94>)
 8007554:	9801      	ldr	r0, [sp, #4]
 8007556:	6813      	ldr	r3, [r2, #0]
 8007558:	b933      	cbnz	r3, 8007568 <_free_r+0x30>
 800755a:	6063      	str	r3, [r4, #4]
 800755c:	6014      	str	r4, [r2, #0]
 800755e:	b003      	add	sp, #12
 8007560:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007564:	f000 b8da 	b.w	800771c <__malloc_unlock>
 8007568:	42a3      	cmp	r3, r4
 800756a:	d908      	bls.n	800757e <_free_r+0x46>
 800756c:	6825      	ldr	r5, [r4, #0]
 800756e:	1961      	adds	r1, r4, r5
 8007570:	428b      	cmp	r3, r1
 8007572:	bf01      	itttt	eq
 8007574:	6819      	ldreq	r1, [r3, #0]
 8007576:	685b      	ldreq	r3, [r3, #4]
 8007578:	1949      	addeq	r1, r1, r5
 800757a:	6021      	streq	r1, [r4, #0]
 800757c:	e7ed      	b.n	800755a <_free_r+0x22>
 800757e:	461a      	mov	r2, r3
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	b10b      	cbz	r3, 8007588 <_free_r+0x50>
 8007584:	42a3      	cmp	r3, r4
 8007586:	d9fa      	bls.n	800757e <_free_r+0x46>
 8007588:	6811      	ldr	r1, [r2, #0]
 800758a:	1855      	adds	r5, r2, r1
 800758c:	42a5      	cmp	r5, r4
 800758e:	d10b      	bne.n	80075a8 <_free_r+0x70>
 8007590:	6824      	ldr	r4, [r4, #0]
 8007592:	4421      	add	r1, r4
 8007594:	1854      	adds	r4, r2, r1
 8007596:	42a3      	cmp	r3, r4
 8007598:	6011      	str	r1, [r2, #0]
 800759a:	d1e0      	bne.n	800755e <_free_r+0x26>
 800759c:	681c      	ldr	r4, [r3, #0]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	6053      	str	r3, [r2, #4]
 80075a2:	440c      	add	r4, r1
 80075a4:	6014      	str	r4, [r2, #0]
 80075a6:	e7da      	b.n	800755e <_free_r+0x26>
 80075a8:	d902      	bls.n	80075b0 <_free_r+0x78>
 80075aa:	230c      	movs	r3, #12
 80075ac:	6003      	str	r3, [r0, #0]
 80075ae:	e7d6      	b.n	800755e <_free_r+0x26>
 80075b0:	6825      	ldr	r5, [r4, #0]
 80075b2:	1961      	adds	r1, r4, r5
 80075b4:	428b      	cmp	r3, r1
 80075b6:	bf04      	itt	eq
 80075b8:	6819      	ldreq	r1, [r3, #0]
 80075ba:	685b      	ldreq	r3, [r3, #4]
 80075bc:	6063      	str	r3, [r4, #4]
 80075be:	bf04      	itt	eq
 80075c0:	1949      	addeq	r1, r1, r5
 80075c2:	6021      	streq	r1, [r4, #0]
 80075c4:	6054      	str	r4, [r2, #4]
 80075c6:	e7ca      	b.n	800755e <_free_r+0x26>
 80075c8:	b003      	add	sp, #12
 80075ca:	bd30      	pop	{r4, r5, pc}
 80075cc:	20001f2c 	.word	0x20001f2c

080075d0 <sbrk_aligned>:
 80075d0:	b570      	push	{r4, r5, r6, lr}
 80075d2:	4e0e      	ldr	r6, [pc, #56]	; (800760c <sbrk_aligned+0x3c>)
 80075d4:	460c      	mov	r4, r1
 80075d6:	6831      	ldr	r1, [r6, #0]
 80075d8:	4605      	mov	r5, r0
 80075da:	b911      	cbnz	r1, 80075e2 <sbrk_aligned+0x12>
 80075dc:	f000 fba6 	bl	8007d2c <_sbrk_r>
 80075e0:	6030      	str	r0, [r6, #0]
 80075e2:	4621      	mov	r1, r4
 80075e4:	4628      	mov	r0, r5
 80075e6:	f000 fba1 	bl	8007d2c <_sbrk_r>
 80075ea:	1c43      	adds	r3, r0, #1
 80075ec:	d00a      	beq.n	8007604 <sbrk_aligned+0x34>
 80075ee:	1cc4      	adds	r4, r0, #3
 80075f0:	f024 0403 	bic.w	r4, r4, #3
 80075f4:	42a0      	cmp	r0, r4
 80075f6:	d007      	beq.n	8007608 <sbrk_aligned+0x38>
 80075f8:	1a21      	subs	r1, r4, r0
 80075fa:	4628      	mov	r0, r5
 80075fc:	f000 fb96 	bl	8007d2c <_sbrk_r>
 8007600:	3001      	adds	r0, #1
 8007602:	d101      	bne.n	8007608 <sbrk_aligned+0x38>
 8007604:	f04f 34ff 	mov.w	r4, #4294967295
 8007608:	4620      	mov	r0, r4
 800760a:	bd70      	pop	{r4, r5, r6, pc}
 800760c:	20001f30 	.word	0x20001f30

08007610 <_malloc_r>:
 8007610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007614:	1ccd      	adds	r5, r1, #3
 8007616:	f025 0503 	bic.w	r5, r5, #3
 800761a:	3508      	adds	r5, #8
 800761c:	2d0c      	cmp	r5, #12
 800761e:	bf38      	it	cc
 8007620:	250c      	movcc	r5, #12
 8007622:	2d00      	cmp	r5, #0
 8007624:	4607      	mov	r7, r0
 8007626:	db01      	blt.n	800762c <_malloc_r+0x1c>
 8007628:	42a9      	cmp	r1, r5
 800762a:	d905      	bls.n	8007638 <_malloc_r+0x28>
 800762c:	230c      	movs	r3, #12
 800762e:	603b      	str	r3, [r7, #0]
 8007630:	2600      	movs	r6, #0
 8007632:	4630      	mov	r0, r6
 8007634:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007638:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800770c <_malloc_r+0xfc>
 800763c:	f000 f868 	bl	8007710 <__malloc_lock>
 8007640:	f8d8 3000 	ldr.w	r3, [r8]
 8007644:	461c      	mov	r4, r3
 8007646:	bb5c      	cbnz	r4, 80076a0 <_malloc_r+0x90>
 8007648:	4629      	mov	r1, r5
 800764a:	4638      	mov	r0, r7
 800764c:	f7ff ffc0 	bl	80075d0 <sbrk_aligned>
 8007650:	1c43      	adds	r3, r0, #1
 8007652:	4604      	mov	r4, r0
 8007654:	d155      	bne.n	8007702 <_malloc_r+0xf2>
 8007656:	f8d8 4000 	ldr.w	r4, [r8]
 800765a:	4626      	mov	r6, r4
 800765c:	2e00      	cmp	r6, #0
 800765e:	d145      	bne.n	80076ec <_malloc_r+0xdc>
 8007660:	2c00      	cmp	r4, #0
 8007662:	d048      	beq.n	80076f6 <_malloc_r+0xe6>
 8007664:	6823      	ldr	r3, [r4, #0]
 8007666:	4631      	mov	r1, r6
 8007668:	4638      	mov	r0, r7
 800766a:	eb04 0903 	add.w	r9, r4, r3
 800766e:	f000 fb5d 	bl	8007d2c <_sbrk_r>
 8007672:	4581      	cmp	r9, r0
 8007674:	d13f      	bne.n	80076f6 <_malloc_r+0xe6>
 8007676:	6821      	ldr	r1, [r4, #0]
 8007678:	1a6d      	subs	r5, r5, r1
 800767a:	4629      	mov	r1, r5
 800767c:	4638      	mov	r0, r7
 800767e:	f7ff ffa7 	bl	80075d0 <sbrk_aligned>
 8007682:	3001      	adds	r0, #1
 8007684:	d037      	beq.n	80076f6 <_malloc_r+0xe6>
 8007686:	6823      	ldr	r3, [r4, #0]
 8007688:	442b      	add	r3, r5
 800768a:	6023      	str	r3, [r4, #0]
 800768c:	f8d8 3000 	ldr.w	r3, [r8]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d038      	beq.n	8007706 <_malloc_r+0xf6>
 8007694:	685a      	ldr	r2, [r3, #4]
 8007696:	42a2      	cmp	r2, r4
 8007698:	d12b      	bne.n	80076f2 <_malloc_r+0xe2>
 800769a:	2200      	movs	r2, #0
 800769c:	605a      	str	r2, [r3, #4]
 800769e:	e00f      	b.n	80076c0 <_malloc_r+0xb0>
 80076a0:	6822      	ldr	r2, [r4, #0]
 80076a2:	1b52      	subs	r2, r2, r5
 80076a4:	d41f      	bmi.n	80076e6 <_malloc_r+0xd6>
 80076a6:	2a0b      	cmp	r2, #11
 80076a8:	d917      	bls.n	80076da <_malloc_r+0xca>
 80076aa:	1961      	adds	r1, r4, r5
 80076ac:	42a3      	cmp	r3, r4
 80076ae:	6025      	str	r5, [r4, #0]
 80076b0:	bf18      	it	ne
 80076b2:	6059      	strne	r1, [r3, #4]
 80076b4:	6863      	ldr	r3, [r4, #4]
 80076b6:	bf08      	it	eq
 80076b8:	f8c8 1000 	streq.w	r1, [r8]
 80076bc:	5162      	str	r2, [r4, r5]
 80076be:	604b      	str	r3, [r1, #4]
 80076c0:	4638      	mov	r0, r7
 80076c2:	f104 060b 	add.w	r6, r4, #11
 80076c6:	f000 f829 	bl	800771c <__malloc_unlock>
 80076ca:	f026 0607 	bic.w	r6, r6, #7
 80076ce:	1d23      	adds	r3, r4, #4
 80076d0:	1af2      	subs	r2, r6, r3
 80076d2:	d0ae      	beq.n	8007632 <_malloc_r+0x22>
 80076d4:	1b9b      	subs	r3, r3, r6
 80076d6:	50a3      	str	r3, [r4, r2]
 80076d8:	e7ab      	b.n	8007632 <_malloc_r+0x22>
 80076da:	42a3      	cmp	r3, r4
 80076dc:	6862      	ldr	r2, [r4, #4]
 80076de:	d1dd      	bne.n	800769c <_malloc_r+0x8c>
 80076e0:	f8c8 2000 	str.w	r2, [r8]
 80076e4:	e7ec      	b.n	80076c0 <_malloc_r+0xb0>
 80076e6:	4623      	mov	r3, r4
 80076e8:	6864      	ldr	r4, [r4, #4]
 80076ea:	e7ac      	b.n	8007646 <_malloc_r+0x36>
 80076ec:	4634      	mov	r4, r6
 80076ee:	6876      	ldr	r6, [r6, #4]
 80076f0:	e7b4      	b.n	800765c <_malloc_r+0x4c>
 80076f2:	4613      	mov	r3, r2
 80076f4:	e7cc      	b.n	8007690 <_malloc_r+0x80>
 80076f6:	230c      	movs	r3, #12
 80076f8:	603b      	str	r3, [r7, #0]
 80076fa:	4638      	mov	r0, r7
 80076fc:	f000 f80e 	bl	800771c <__malloc_unlock>
 8007700:	e797      	b.n	8007632 <_malloc_r+0x22>
 8007702:	6025      	str	r5, [r4, #0]
 8007704:	e7dc      	b.n	80076c0 <_malloc_r+0xb0>
 8007706:	605b      	str	r3, [r3, #4]
 8007708:	deff      	udf	#255	; 0xff
 800770a:	bf00      	nop
 800770c:	20001f2c 	.word	0x20001f2c

08007710 <__malloc_lock>:
 8007710:	4801      	ldr	r0, [pc, #4]	; (8007718 <__malloc_lock+0x8>)
 8007712:	f7ff bf0f 	b.w	8007534 <__retarget_lock_acquire_recursive>
 8007716:	bf00      	nop
 8007718:	20001f28 	.word	0x20001f28

0800771c <__malloc_unlock>:
 800771c:	4801      	ldr	r0, [pc, #4]	; (8007724 <__malloc_unlock+0x8>)
 800771e:	f7ff bf0a 	b.w	8007536 <__retarget_lock_release_recursive>
 8007722:	bf00      	nop
 8007724:	20001f28 	.word	0x20001f28

08007728 <__ssputs_r>:
 8007728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800772c:	688e      	ldr	r6, [r1, #8]
 800772e:	461f      	mov	r7, r3
 8007730:	42be      	cmp	r6, r7
 8007732:	680b      	ldr	r3, [r1, #0]
 8007734:	4682      	mov	sl, r0
 8007736:	460c      	mov	r4, r1
 8007738:	4690      	mov	r8, r2
 800773a:	d82c      	bhi.n	8007796 <__ssputs_r+0x6e>
 800773c:	898a      	ldrh	r2, [r1, #12]
 800773e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007742:	d026      	beq.n	8007792 <__ssputs_r+0x6a>
 8007744:	6965      	ldr	r5, [r4, #20]
 8007746:	6909      	ldr	r1, [r1, #16]
 8007748:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800774c:	eba3 0901 	sub.w	r9, r3, r1
 8007750:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007754:	1c7b      	adds	r3, r7, #1
 8007756:	444b      	add	r3, r9
 8007758:	106d      	asrs	r5, r5, #1
 800775a:	429d      	cmp	r5, r3
 800775c:	bf38      	it	cc
 800775e:	461d      	movcc	r5, r3
 8007760:	0553      	lsls	r3, r2, #21
 8007762:	d527      	bpl.n	80077b4 <__ssputs_r+0x8c>
 8007764:	4629      	mov	r1, r5
 8007766:	f7ff ff53 	bl	8007610 <_malloc_r>
 800776a:	4606      	mov	r6, r0
 800776c:	b360      	cbz	r0, 80077c8 <__ssputs_r+0xa0>
 800776e:	6921      	ldr	r1, [r4, #16]
 8007770:	464a      	mov	r2, r9
 8007772:	f000 faeb 	bl	8007d4c <memcpy>
 8007776:	89a3      	ldrh	r3, [r4, #12]
 8007778:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800777c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007780:	81a3      	strh	r3, [r4, #12]
 8007782:	6126      	str	r6, [r4, #16]
 8007784:	6165      	str	r5, [r4, #20]
 8007786:	444e      	add	r6, r9
 8007788:	eba5 0509 	sub.w	r5, r5, r9
 800778c:	6026      	str	r6, [r4, #0]
 800778e:	60a5      	str	r5, [r4, #8]
 8007790:	463e      	mov	r6, r7
 8007792:	42be      	cmp	r6, r7
 8007794:	d900      	bls.n	8007798 <__ssputs_r+0x70>
 8007796:	463e      	mov	r6, r7
 8007798:	6820      	ldr	r0, [r4, #0]
 800779a:	4632      	mov	r2, r6
 800779c:	4641      	mov	r1, r8
 800779e:	f000 faab 	bl	8007cf8 <memmove>
 80077a2:	68a3      	ldr	r3, [r4, #8]
 80077a4:	1b9b      	subs	r3, r3, r6
 80077a6:	60a3      	str	r3, [r4, #8]
 80077a8:	6823      	ldr	r3, [r4, #0]
 80077aa:	4433      	add	r3, r6
 80077ac:	6023      	str	r3, [r4, #0]
 80077ae:	2000      	movs	r0, #0
 80077b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077b4:	462a      	mov	r2, r5
 80077b6:	f000 fad7 	bl	8007d68 <_realloc_r>
 80077ba:	4606      	mov	r6, r0
 80077bc:	2800      	cmp	r0, #0
 80077be:	d1e0      	bne.n	8007782 <__ssputs_r+0x5a>
 80077c0:	6921      	ldr	r1, [r4, #16]
 80077c2:	4650      	mov	r0, sl
 80077c4:	f7ff feb8 	bl	8007538 <_free_r>
 80077c8:	230c      	movs	r3, #12
 80077ca:	f8ca 3000 	str.w	r3, [sl]
 80077ce:	89a3      	ldrh	r3, [r4, #12]
 80077d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077d4:	81a3      	strh	r3, [r4, #12]
 80077d6:	f04f 30ff 	mov.w	r0, #4294967295
 80077da:	e7e9      	b.n	80077b0 <__ssputs_r+0x88>

080077dc <_svfiprintf_r>:
 80077dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077e0:	4698      	mov	r8, r3
 80077e2:	898b      	ldrh	r3, [r1, #12]
 80077e4:	061b      	lsls	r3, r3, #24
 80077e6:	b09d      	sub	sp, #116	; 0x74
 80077e8:	4607      	mov	r7, r0
 80077ea:	460d      	mov	r5, r1
 80077ec:	4614      	mov	r4, r2
 80077ee:	d50e      	bpl.n	800780e <_svfiprintf_r+0x32>
 80077f0:	690b      	ldr	r3, [r1, #16]
 80077f2:	b963      	cbnz	r3, 800780e <_svfiprintf_r+0x32>
 80077f4:	2140      	movs	r1, #64	; 0x40
 80077f6:	f7ff ff0b 	bl	8007610 <_malloc_r>
 80077fa:	6028      	str	r0, [r5, #0]
 80077fc:	6128      	str	r0, [r5, #16]
 80077fe:	b920      	cbnz	r0, 800780a <_svfiprintf_r+0x2e>
 8007800:	230c      	movs	r3, #12
 8007802:	603b      	str	r3, [r7, #0]
 8007804:	f04f 30ff 	mov.w	r0, #4294967295
 8007808:	e0d0      	b.n	80079ac <_svfiprintf_r+0x1d0>
 800780a:	2340      	movs	r3, #64	; 0x40
 800780c:	616b      	str	r3, [r5, #20]
 800780e:	2300      	movs	r3, #0
 8007810:	9309      	str	r3, [sp, #36]	; 0x24
 8007812:	2320      	movs	r3, #32
 8007814:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007818:	f8cd 800c 	str.w	r8, [sp, #12]
 800781c:	2330      	movs	r3, #48	; 0x30
 800781e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80079c4 <_svfiprintf_r+0x1e8>
 8007822:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007826:	f04f 0901 	mov.w	r9, #1
 800782a:	4623      	mov	r3, r4
 800782c:	469a      	mov	sl, r3
 800782e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007832:	b10a      	cbz	r2, 8007838 <_svfiprintf_r+0x5c>
 8007834:	2a25      	cmp	r2, #37	; 0x25
 8007836:	d1f9      	bne.n	800782c <_svfiprintf_r+0x50>
 8007838:	ebba 0b04 	subs.w	fp, sl, r4
 800783c:	d00b      	beq.n	8007856 <_svfiprintf_r+0x7a>
 800783e:	465b      	mov	r3, fp
 8007840:	4622      	mov	r2, r4
 8007842:	4629      	mov	r1, r5
 8007844:	4638      	mov	r0, r7
 8007846:	f7ff ff6f 	bl	8007728 <__ssputs_r>
 800784a:	3001      	adds	r0, #1
 800784c:	f000 80a9 	beq.w	80079a2 <_svfiprintf_r+0x1c6>
 8007850:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007852:	445a      	add	r2, fp
 8007854:	9209      	str	r2, [sp, #36]	; 0x24
 8007856:	f89a 3000 	ldrb.w	r3, [sl]
 800785a:	2b00      	cmp	r3, #0
 800785c:	f000 80a1 	beq.w	80079a2 <_svfiprintf_r+0x1c6>
 8007860:	2300      	movs	r3, #0
 8007862:	f04f 32ff 	mov.w	r2, #4294967295
 8007866:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800786a:	f10a 0a01 	add.w	sl, sl, #1
 800786e:	9304      	str	r3, [sp, #16]
 8007870:	9307      	str	r3, [sp, #28]
 8007872:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007876:	931a      	str	r3, [sp, #104]	; 0x68
 8007878:	4654      	mov	r4, sl
 800787a:	2205      	movs	r2, #5
 800787c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007880:	4850      	ldr	r0, [pc, #320]	; (80079c4 <_svfiprintf_r+0x1e8>)
 8007882:	f7f8 fcad 	bl	80001e0 <memchr>
 8007886:	9a04      	ldr	r2, [sp, #16]
 8007888:	b9d8      	cbnz	r0, 80078c2 <_svfiprintf_r+0xe6>
 800788a:	06d0      	lsls	r0, r2, #27
 800788c:	bf44      	itt	mi
 800788e:	2320      	movmi	r3, #32
 8007890:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007894:	0711      	lsls	r1, r2, #28
 8007896:	bf44      	itt	mi
 8007898:	232b      	movmi	r3, #43	; 0x2b
 800789a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800789e:	f89a 3000 	ldrb.w	r3, [sl]
 80078a2:	2b2a      	cmp	r3, #42	; 0x2a
 80078a4:	d015      	beq.n	80078d2 <_svfiprintf_r+0xf6>
 80078a6:	9a07      	ldr	r2, [sp, #28]
 80078a8:	4654      	mov	r4, sl
 80078aa:	2000      	movs	r0, #0
 80078ac:	f04f 0c0a 	mov.w	ip, #10
 80078b0:	4621      	mov	r1, r4
 80078b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078b6:	3b30      	subs	r3, #48	; 0x30
 80078b8:	2b09      	cmp	r3, #9
 80078ba:	d94d      	bls.n	8007958 <_svfiprintf_r+0x17c>
 80078bc:	b1b0      	cbz	r0, 80078ec <_svfiprintf_r+0x110>
 80078be:	9207      	str	r2, [sp, #28]
 80078c0:	e014      	b.n	80078ec <_svfiprintf_r+0x110>
 80078c2:	eba0 0308 	sub.w	r3, r0, r8
 80078c6:	fa09 f303 	lsl.w	r3, r9, r3
 80078ca:	4313      	orrs	r3, r2
 80078cc:	9304      	str	r3, [sp, #16]
 80078ce:	46a2      	mov	sl, r4
 80078d0:	e7d2      	b.n	8007878 <_svfiprintf_r+0x9c>
 80078d2:	9b03      	ldr	r3, [sp, #12]
 80078d4:	1d19      	adds	r1, r3, #4
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	9103      	str	r1, [sp, #12]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	bfbb      	ittet	lt
 80078de:	425b      	neglt	r3, r3
 80078e0:	f042 0202 	orrlt.w	r2, r2, #2
 80078e4:	9307      	strge	r3, [sp, #28]
 80078e6:	9307      	strlt	r3, [sp, #28]
 80078e8:	bfb8      	it	lt
 80078ea:	9204      	strlt	r2, [sp, #16]
 80078ec:	7823      	ldrb	r3, [r4, #0]
 80078ee:	2b2e      	cmp	r3, #46	; 0x2e
 80078f0:	d10c      	bne.n	800790c <_svfiprintf_r+0x130>
 80078f2:	7863      	ldrb	r3, [r4, #1]
 80078f4:	2b2a      	cmp	r3, #42	; 0x2a
 80078f6:	d134      	bne.n	8007962 <_svfiprintf_r+0x186>
 80078f8:	9b03      	ldr	r3, [sp, #12]
 80078fa:	1d1a      	adds	r2, r3, #4
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	9203      	str	r2, [sp, #12]
 8007900:	2b00      	cmp	r3, #0
 8007902:	bfb8      	it	lt
 8007904:	f04f 33ff 	movlt.w	r3, #4294967295
 8007908:	3402      	adds	r4, #2
 800790a:	9305      	str	r3, [sp, #20]
 800790c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80079d4 <_svfiprintf_r+0x1f8>
 8007910:	7821      	ldrb	r1, [r4, #0]
 8007912:	2203      	movs	r2, #3
 8007914:	4650      	mov	r0, sl
 8007916:	f7f8 fc63 	bl	80001e0 <memchr>
 800791a:	b138      	cbz	r0, 800792c <_svfiprintf_r+0x150>
 800791c:	9b04      	ldr	r3, [sp, #16]
 800791e:	eba0 000a 	sub.w	r0, r0, sl
 8007922:	2240      	movs	r2, #64	; 0x40
 8007924:	4082      	lsls	r2, r0
 8007926:	4313      	orrs	r3, r2
 8007928:	3401      	adds	r4, #1
 800792a:	9304      	str	r3, [sp, #16]
 800792c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007930:	4825      	ldr	r0, [pc, #148]	; (80079c8 <_svfiprintf_r+0x1ec>)
 8007932:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007936:	2206      	movs	r2, #6
 8007938:	f7f8 fc52 	bl	80001e0 <memchr>
 800793c:	2800      	cmp	r0, #0
 800793e:	d038      	beq.n	80079b2 <_svfiprintf_r+0x1d6>
 8007940:	4b22      	ldr	r3, [pc, #136]	; (80079cc <_svfiprintf_r+0x1f0>)
 8007942:	bb1b      	cbnz	r3, 800798c <_svfiprintf_r+0x1b0>
 8007944:	9b03      	ldr	r3, [sp, #12]
 8007946:	3307      	adds	r3, #7
 8007948:	f023 0307 	bic.w	r3, r3, #7
 800794c:	3308      	adds	r3, #8
 800794e:	9303      	str	r3, [sp, #12]
 8007950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007952:	4433      	add	r3, r6
 8007954:	9309      	str	r3, [sp, #36]	; 0x24
 8007956:	e768      	b.n	800782a <_svfiprintf_r+0x4e>
 8007958:	fb0c 3202 	mla	r2, ip, r2, r3
 800795c:	460c      	mov	r4, r1
 800795e:	2001      	movs	r0, #1
 8007960:	e7a6      	b.n	80078b0 <_svfiprintf_r+0xd4>
 8007962:	2300      	movs	r3, #0
 8007964:	3401      	adds	r4, #1
 8007966:	9305      	str	r3, [sp, #20]
 8007968:	4619      	mov	r1, r3
 800796a:	f04f 0c0a 	mov.w	ip, #10
 800796e:	4620      	mov	r0, r4
 8007970:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007974:	3a30      	subs	r2, #48	; 0x30
 8007976:	2a09      	cmp	r2, #9
 8007978:	d903      	bls.n	8007982 <_svfiprintf_r+0x1a6>
 800797a:	2b00      	cmp	r3, #0
 800797c:	d0c6      	beq.n	800790c <_svfiprintf_r+0x130>
 800797e:	9105      	str	r1, [sp, #20]
 8007980:	e7c4      	b.n	800790c <_svfiprintf_r+0x130>
 8007982:	fb0c 2101 	mla	r1, ip, r1, r2
 8007986:	4604      	mov	r4, r0
 8007988:	2301      	movs	r3, #1
 800798a:	e7f0      	b.n	800796e <_svfiprintf_r+0x192>
 800798c:	ab03      	add	r3, sp, #12
 800798e:	9300      	str	r3, [sp, #0]
 8007990:	462a      	mov	r2, r5
 8007992:	4b0f      	ldr	r3, [pc, #60]	; (80079d0 <_svfiprintf_r+0x1f4>)
 8007994:	a904      	add	r1, sp, #16
 8007996:	4638      	mov	r0, r7
 8007998:	f3af 8000 	nop.w
 800799c:	1c42      	adds	r2, r0, #1
 800799e:	4606      	mov	r6, r0
 80079a0:	d1d6      	bne.n	8007950 <_svfiprintf_r+0x174>
 80079a2:	89ab      	ldrh	r3, [r5, #12]
 80079a4:	065b      	lsls	r3, r3, #25
 80079a6:	f53f af2d 	bmi.w	8007804 <_svfiprintf_r+0x28>
 80079aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80079ac:	b01d      	add	sp, #116	; 0x74
 80079ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079b2:	ab03      	add	r3, sp, #12
 80079b4:	9300      	str	r3, [sp, #0]
 80079b6:	462a      	mov	r2, r5
 80079b8:	4b05      	ldr	r3, [pc, #20]	; (80079d0 <_svfiprintf_r+0x1f4>)
 80079ba:	a904      	add	r1, sp, #16
 80079bc:	4638      	mov	r0, r7
 80079be:	f000 f879 	bl	8007ab4 <_printf_i>
 80079c2:	e7eb      	b.n	800799c <_svfiprintf_r+0x1c0>
 80079c4:	08007e60 	.word	0x08007e60
 80079c8:	08007e6a 	.word	0x08007e6a
 80079cc:	00000000 	.word	0x00000000
 80079d0:	08007729 	.word	0x08007729
 80079d4:	08007e66 	.word	0x08007e66

080079d8 <_printf_common>:
 80079d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079dc:	4616      	mov	r6, r2
 80079de:	4699      	mov	r9, r3
 80079e0:	688a      	ldr	r2, [r1, #8]
 80079e2:	690b      	ldr	r3, [r1, #16]
 80079e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80079e8:	4293      	cmp	r3, r2
 80079ea:	bfb8      	it	lt
 80079ec:	4613      	movlt	r3, r2
 80079ee:	6033      	str	r3, [r6, #0]
 80079f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079f4:	4607      	mov	r7, r0
 80079f6:	460c      	mov	r4, r1
 80079f8:	b10a      	cbz	r2, 80079fe <_printf_common+0x26>
 80079fa:	3301      	adds	r3, #1
 80079fc:	6033      	str	r3, [r6, #0]
 80079fe:	6823      	ldr	r3, [r4, #0]
 8007a00:	0699      	lsls	r1, r3, #26
 8007a02:	bf42      	ittt	mi
 8007a04:	6833      	ldrmi	r3, [r6, #0]
 8007a06:	3302      	addmi	r3, #2
 8007a08:	6033      	strmi	r3, [r6, #0]
 8007a0a:	6825      	ldr	r5, [r4, #0]
 8007a0c:	f015 0506 	ands.w	r5, r5, #6
 8007a10:	d106      	bne.n	8007a20 <_printf_common+0x48>
 8007a12:	f104 0a19 	add.w	sl, r4, #25
 8007a16:	68e3      	ldr	r3, [r4, #12]
 8007a18:	6832      	ldr	r2, [r6, #0]
 8007a1a:	1a9b      	subs	r3, r3, r2
 8007a1c:	42ab      	cmp	r3, r5
 8007a1e:	dc26      	bgt.n	8007a6e <_printf_common+0x96>
 8007a20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007a24:	1e13      	subs	r3, r2, #0
 8007a26:	6822      	ldr	r2, [r4, #0]
 8007a28:	bf18      	it	ne
 8007a2a:	2301      	movne	r3, #1
 8007a2c:	0692      	lsls	r2, r2, #26
 8007a2e:	d42b      	bmi.n	8007a88 <_printf_common+0xb0>
 8007a30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a34:	4649      	mov	r1, r9
 8007a36:	4638      	mov	r0, r7
 8007a38:	47c0      	blx	r8
 8007a3a:	3001      	adds	r0, #1
 8007a3c:	d01e      	beq.n	8007a7c <_printf_common+0xa4>
 8007a3e:	6823      	ldr	r3, [r4, #0]
 8007a40:	6922      	ldr	r2, [r4, #16]
 8007a42:	f003 0306 	and.w	r3, r3, #6
 8007a46:	2b04      	cmp	r3, #4
 8007a48:	bf02      	ittt	eq
 8007a4a:	68e5      	ldreq	r5, [r4, #12]
 8007a4c:	6833      	ldreq	r3, [r6, #0]
 8007a4e:	1aed      	subeq	r5, r5, r3
 8007a50:	68a3      	ldr	r3, [r4, #8]
 8007a52:	bf0c      	ite	eq
 8007a54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a58:	2500      	movne	r5, #0
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	bfc4      	itt	gt
 8007a5e:	1a9b      	subgt	r3, r3, r2
 8007a60:	18ed      	addgt	r5, r5, r3
 8007a62:	2600      	movs	r6, #0
 8007a64:	341a      	adds	r4, #26
 8007a66:	42b5      	cmp	r5, r6
 8007a68:	d11a      	bne.n	8007aa0 <_printf_common+0xc8>
 8007a6a:	2000      	movs	r0, #0
 8007a6c:	e008      	b.n	8007a80 <_printf_common+0xa8>
 8007a6e:	2301      	movs	r3, #1
 8007a70:	4652      	mov	r2, sl
 8007a72:	4649      	mov	r1, r9
 8007a74:	4638      	mov	r0, r7
 8007a76:	47c0      	blx	r8
 8007a78:	3001      	adds	r0, #1
 8007a7a:	d103      	bne.n	8007a84 <_printf_common+0xac>
 8007a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a84:	3501      	adds	r5, #1
 8007a86:	e7c6      	b.n	8007a16 <_printf_common+0x3e>
 8007a88:	18e1      	adds	r1, r4, r3
 8007a8a:	1c5a      	adds	r2, r3, #1
 8007a8c:	2030      	movs	r0, #48	; 0x30
 8007a8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a92:	4422      	add	r2, r4
 8007a94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a9c:	3302      	adds	r3, #2
 8007a9e:	e7c7      	b.n	8007a30 <_printf_common+0x58>
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	4622      	mov	r2, r4
 8007aa4:	4649      	mov	r1, r9
 8007aa6:	4638      	mov	r0, r7
 8007aa8:	47c0      	blx	r8
 8007aaa:	3001      	adds	r0, #1
 8007aac:	d0e6      	beq.n	8007a7c <_printf_common+0xa4>
 8007aae:	3601      	adds	r6, #1
 8007ab0:	e7d9      	b.n	8007a66 <_printf_common+0x8e>
	...

08007ab4 <_printf_i>:
 8007ab4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ab8:	7e0f      	ldrb	r7, [r1, #24]
 8007aba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007abc:	2f78      	cmp	r7, #120	; 0x78
 8007abe:	4691      	mov	r9, r2
 8007ac0:	4680      	mov	r8, r0
 8007ac2:	460c      	mov	r4, r1
 8007ac4:	469a      	mov	sl, r3
 8007ac6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007aca:	d807      	bhi.n	8007adc <_printf_i+0x28>
 8007acc:	2f62      	cmp	r7, #98	; 0x62
 8007ace:	d80a      	bhi.n	8007ae6 <_printf_i+0x32>
 8007ad0:	2f00      	cmp	r7, #0
 8007ad2:	f000 80d4 	beq.w	8007c7e <_printf_i+0x1ca>
 8007ad6:	2f58      	cmp	r7, #88	; 0x58
 8007ad8:	f000 80c0 	beq.w	8007c5c <_printf_i+0x1a8>
 8007adc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ae0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ae4:	e03a      	b.n	8007b5c <_printf_i+0xa8>
 8007ae6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007aea:	2b15      	cmp	r3, #21
 8007aec:	d8f6      	bhi.n	8007adc <_printf_i+0x28>
 8007aee:	a101      	add	r1, pc, #4	; (adr r1, 8007af4 <_printf_i+0x40>)
 8007af0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007af4:	08007b4d 	.word	0x08007b4d
 8007af8:	08007b61 	.word	0x08007b61
 8007afc:	08007add 	.word	0x08007add
 8007b00:	08007add 	.word	0x08007add
 8007b04:	08007add 	.word	0x08007add
 8007b08:	08007add 	.word	0x08007add
 8007b0c:	08007b61 	.word	0x08007b61
 8007b10:	08007add 	.word	0x08007add
 8007b14:	08007add 	.word	0x08007add
 8007b18:	08007add 	.word	0x08007add
 8007b1c:	08007add 	.word	0x08007add
 8007b20:	08007c65 	.word	0x08007c65
 8007b24:	08007b8d 	.word	0x08007b8d
 8007b28:	08007c1f 	.word	0x08007c1f
 8007b2c:	08007add 	.word	0x08007add
 8007b30:	08007add 	.word	0x08007add
 8007b34:	08007c87 	.word	0x08007c87
 8007b38:	08007add 	.word	0x08007add
 8007b3c:	08007b8d 	.word	0x08007b8d
 8007b40:	08007add 	.word	0x08007add
 8007b44:	08007add 	.word	0x08007add
 8007b48:	08007c27 	.word	0x08007c27
 8007b4c:	682b      	ldr	r3, [r5, #0]
 8007b4e:	1d1a      	adds	r2, r3, #4
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	602a      	str	r2, [r5, #0]
 8007b54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	e09f      	b.n	8007ca0 <_printf_i+0x1ec>
 8007b60:	6820      	ldr	r0, [r4, #0]
 8007b62:	682b      	ldr	r3, [r5, #0]
 8007b64:	0607      	lsls	r7, r0, #24
 8007b66:	f103 0104 	add.w	r1, r3, #4
 8007b6a:	6029      	str	r1, [r5, #0]
 8007b6c:	d501      	bpl.n	8007b72 <_printf_i+0xbe>
 8007b6e:	681e      	ldr	r6, [r3, #0]
 8007b70:	e003      	b.n	8007b7a <_printf_i+0xc6>
 8007b72:	0646      	lsls	r6, r0, #25
 8007b74:	d5fb      	bpl.n	8007b6e <_printf_i+0xba>
 8007b76:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007b7a:	2e00      	cmp	r6, #0
 8007b7c:	da03      	bge.n	8007b86 <_printf_i+0xd2>
 8007b7e:	232d      	movs	r3, #45	; 0x2d
 8007b80:	4276      	negs	r6, r6
 8007b82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b86:	485a      	ldr	r0, [pc, #360]	; (8007cf0 <_printf_i+0x23c>)
 8007b88:	230a      	movs	r3, #10
 8007b8a:	e012      	b.n	8007bb2 <_printf_i+0xfe>
 8007b8c:	682b      	ldr	r3, [r5, #0]
 8007b8e:	6820      	ldr	r0, [r4, #0]
 8007b90:	1d19      	adds	r1, r3, #4
 8007b92:	6029      	str	r1, [r5, #0]
 8007b94:	0605      	lsls	r5, r0, #24
 8007b96:	d501      	bpl.n	8007b9c <_printf_i+0xe8>
 8007b98:	681e      	ldr	r6, [r3, #0]
 8007b9a:	e002      	b.n	8007ba2 <_printf_i+0xee>
 8007b9c:	0641      	lsls	r1, r0, #25
 8007b9e:	d5fb      	bpl.n	8007b98 <_printf_i+0xe4>
 8007ba0:	881e      	ldrh	r6, [r3, #0]
 8007ba2:	4853      	ldr	r0, [pc, #332]	; (8007cf0 <_printf_i+0x23c>)
 8007ba4:	2f6f      	cmp	r7, #111	; 0x6f
 8007ba6:	bf0c      	ite	eq
 8007ba8:	2308      	moveq	r3, #8
 8007baa:	230a      	movne	r3, #10
 8007bac:	2100      	movs	r1, #0
 8007bae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007bb2:	6865      	ldr	r5, [r4, #4]
 8007bb4:	60a5      	str	r5, [r4, #8]
 8007bb6:	2d00      	cmp	r5, #0
 8007bb8:	bfa2      	ittt	ge
 8007bba:	6821      	ldrge	r1, [r4, #0]
 8007bbc:	f021 0104 	bicge.w	r1, r1, #4
 8007bc0:	6021      	strge	r1, [r4, #0]
 8007bc2:	b90e      	cbnz	r6, 8007bc8 <_printf_i+0x114>
 8007bc4:	2d00      	cmp	r5, #0
 8007bc6:	d04b      	beq.n	8007c60 <_printf_i+0x1ac>
 8007bc8:	4615      	mov	r5, r2
 8007bca:	fbb6 f1f3 	udiv	r1, r6, r3
 8007bce:	fb03 6711 	mls	r7, r3, r1, r6
 8007bd2:	5dc7      	ldrb	r7, [r0, r7]
 8007bd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007bd8:	4637      	mov	r7, r6
 8007bda:	42bb      	cmp	r3, r7
 8007bdc:	460e      	mov	r6, r1
 8007bde:	d9f4      	bls.n	8007bca <_printf_i+0x116>
 8007be0:	2b08      	cmp	r3, #8
 8007be2:	d10b      	bne.n	8007bfc <_printf_i+0x148>
 8007be4:	6823      	ldr	r3, [r4, #0]
 8007be6:	07de      	lsls	r6, r3, #31
 8007be8:	d508      	bpl.n	8007bfc <_printf_i+0x148>
 8007bea:	6923      	ldr	r3, [r4, #16]
 8007bec:	6861      	ldr	r1, [r4, #4]
 8007bee:	4299      	cmp	r1, r3
 8007bf0:	bfde      	ittt	le
 8007bf2:	2330      	movle	r3, #48	; 0x30
 8007bf4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007bf8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007bfc:	1b52      	subs	r2, r2, r5
 8007bfe:	6122      	str	r2, [r4, #16]
 8007c00:	f8cd a000 	str.w	sl, [sp]
 8007c04:	464b      	mov	r3, r9
 8007c06:	aa03      	add	r2, sp, #12
 8007c08:	4621      	mov	r1, r4
 8007c0a:	4640      	mov	r0, r8
 8007c0c:	f7ff fee4 	bl	80079d8 <_printf_common>
 8007c10:	3001      	adds	r0, #1
 8007c12:	d14a      	bne.n	8007caa <_printf_i+0x1f6>
 8007c14:	f04f 30ff 	mov.w	r0, #4294967295
 8007c18:	b004      	add	sp, #16
 8007c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c1e:	6823      	ldr	r3, [r4, #0]
 8007c20:	f043 0320 	orr.w	r3, r3, #32
 8007c24:	6023      	str	r3, [r4, #0]
 8007c26:	4833      	ldr	r0, [pc, #204]	; (8007cf4 <_printf_i+0x240>)
 8007c28:	2778      	movs	r7, #120	; 0x78
 8007c2a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007c2e:	6823      	ldr	r3, [r4, #0]
 8007c30:	6829      	ldr	r1, [r5, #0]
 8007c32:	061f      	lsls	r7, r3, #24
 8007c34:	f851 6b04 	ldr.w	r6, [r1], #4
 8007c38:	d402      	bmi.n	8007c40 <_printf_i+0x18c>
 8007c3a:	065f      	lsls	r7, r3, #25
 8007c3c:	bf48      	it	mi
 8007c3e:	b2b6      	uxthmi	r6, r6
 8007c40:	07df      	lsls	r7, r3, #31
 8007c42:	bf48      	it	mi
 8007c44:	f043 0320 	orrmi.w	r3, r3, #32
 8007c48:	6029      	str	r1, [r5, #0]
 8007c4a:	bf48      	it	mi
 8007c4c:	6023      	strmi	r3, [r4, #0]
 8007c4e:	b91e      	cbnz	r6, 8007c58 <_printf_i+0x1a4>
 8007c50:	6823      	ldr	r3, [r4, #0]
 8007c52:	f023 0320 	bic.w	r3, r3, #32
 8007c56:	6023      	str	r3, [r4, #0]
 8007c58:	2310      	movs	r3, #16
 8007c5a:	e7a7      	b.n	8007bac <_printf_i+0xf8>
 8007c5c:	4824      	ldr	r0, [pc, #144]	; (8007cf0 <_printf_i+0x23c>)
 8007c5e:	e7e4      	b.n	8007c2a <_printf_i+0x176>
 8007c60:	4615      	mov	r5, r2
 8007c62:	e7bd      	b.n	8007be0 <_printf_i+0x12c>
 8007c64:	682b      	ldr	r3, [r5, #0]
 8007c66:	6826      	ldr	r6, [r4, #0]
 8007c68:	6961      	ldr	r1, [r4, #20]
 8007c6a:	1d18      	adds	r0, r3, #4
 8007c6c:	6028      	str	r0, [r5, #0]
 8007c6e:	0635      	lsls	r5, r6, #24
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	d501      	bpl.n	8007c78 <_printf_i+0x1c4>
 8007c74:	6019      	str	r1, [r3, #0]
 8007c76:	e002      	b.n	8007c7e <_printf_i+0x1ca>
 8007c78:	0670      	lsls	r0, r6, #25
 8007c7a:	d5fb      	bpl.n	8007c74 <_printf_i+0x1c0>
 8007c7c:	8019      	strh	r1, [r3, #0]
 8007c7e:	2300      	movs	r3, #0
 8007c80:	6123      	str	r3, [r4, #16]
 8007c82:	4615      	mov	r5, r2
 8007c84:	e7bc      	b.n	8007c00 <_printf_i+0x14c>
 8007c86:	682b      	ldr	r3, [r5, #0]
 8007c88:	1d1a      	adds	r2, r3, #4
 8007c8a:	602a      	str	r2, [r5, #0]
 8007c8c:	681d      	ldr	r5, [r3, #0]
 8007c8e:	6862      	ldr	r2, [r4, #4]
 8007c90:	2100      	movs	r1, #0
 8007c92:	4628      	mov	r0, r5
 8007c94:	f7f8 faa4 	bl	80001e0 <memchr>
 8007c98:	b108      	cbz	r0, 8007c9e <_printf_i+0x1ea>
 8007c9a:	1b40      	subs	r0, r0, r5
 8007c9c:	6060      	str	r0, [r4, #4]
 8007c9e:	6863      	ldr	r3, [r4, #4]
 8007ca0:	6123      	str	r3, [r4, #16]
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ca8:	e7aa      	b.n	8007c00 <_printf_i+0x14c>
 8007caa:	6923      	ldr	r3, [r4, #16]
 8007cac:	462a      	mov	r2, r5
 8007cae:	4649      	mov	r1, r9
 8007cb0:	4640      	mov	r0, r8
 8007cb2:	47d0      	blx	sl
 8007cb4:	3001      	adds	r0, #1
 8007cb6:	d0ad      	beq.n	8007c14 <_printf_i+0x160>
 8007cb8:	6823      	ldr	r3, [r4, #0]
 8007cba:	079b      	lsls	r3, r3, #30
 8007cbc:	d413      	bmi.n	8007ce6 <_printf_i+0x232>
 8007cbe:	68e0      	ldr	r0, [r4, #12]
 8007cc0:	9b03      	ldr	r3, [sp, #12]
 8007cc2:	4298      	cmp	r0, r3
 8007cc4:	bfb8      	it	lt
 8007cc6:	4618      	movlt	r0, r3
 8007cc8:	e7a6      	b.n	8007c18 <_printf_i+0x164>
 8007cca:	2301      	movs	r3, #1
 8007ccc:	4632      	mov	r2, r6
 8007cce:	4649      	mov	r1, r9
 8007cd0:	4640      	mov	r0, r8
 8007cd2:	47d0      	blx	sl
 8007cd4:	3001      	adds	r0, #1
 8007cd6:	d09d      	beq.n	8007c14 <_printf_i+0x160>
 8007cd8:	3501      	adds	r5, #1
 8007cda:	68e3      	ldr	r3, [r4, #12]
 8007cdc:	9903      	ldr	r1, [sp, #12]
 8007cde:	1a5b      	subs	r3, r3, r1
 8007ce0:	42ab      	cmp	r3, r5
 8007ce2:	dcf2      	bgt.n	8007cca <_printf_i+0x216>
 8007ce4:	e7eb      	b.n	8007cbe <_printf_i+0x20a>
 8007ce6:	2500      	movs	r5, #0
 8007ce8:	f104 0619 	add.w	r6, r4, #25
 8007cec:	e7f5      	b.n	8007cda <_printf_i+0x226>
 8007cee:	bf00      	nop
 8007cf0:	08007e71 	.word	0x08007e71
 8007cf4:	08007e82 	.word	0x08007e82

08007cf8 <memmove>:
 8007cf8:	4288      	cmp	r0, r1
 8007cfa:	b510      	push	{r4, lr}
 8007cfc:	eb01 0402 	add.w	r4, r1, r2
 8007d00:	d902      	bls.n	8007d08 <memmove+0x10>
 8007d02:	4284      	cmp	r4, r0
 8007d04:	4623      	mov	r3, r4
 8007d06:	d807      	bhi.n	8007d18 <memmove+0x20>
 8007d08:	1e43      	subs	r3, r0, #1
 8007d0a:	42a1      	cmp	r1, r4
 8007d0c:	d008      	beq.n	8007d20 <memmove+0x28>
 8007d0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d16:	e7f8      	b.n	8007d0a <memmove+0x12>
 8007d18:	4402      	add	r2, r0
 8007d1a:	4601      	mov	r1, r0
 8007d1c:	428a      	cmp	r2, r1
 8007d1e:	d100      	bne.n	8007d22 <memmove+0x2a>
 8007d20:	bd10      	pop	{r4, pc}
 8007d22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d2a:	e7f7      	b.n	8007d1c <memmove+0x24>

08007d2c <_sbrk_r>:
 8007d2c:	b538      	push	{r3, r4, r5, lr}
 8007d2e:	4d06      	ldr	r5, [pc, #24]	; (8007d48 <_sbrk_r+0x1c>)
 8007d30:	2300      	movs	r3, #0
 8007d32:	4604      	mov	r4, r0
 8007d34:	4608      	mov	r0, r1
 8007d36:	602b      	str	r3, [r5, #0]
 8007d38:	f7f8 fe0c 	bl	8000954 <_sbrk>
 8007d3c:	1c43      	adds	r3, r0, #1
 8007d3e:	d102      	bne.n	8007d46 <_sbrk_r+0x1a>
 8007d40:	682b      	ldr	r3, [r5, #0]
 8007d42:	b103      	cbz	r3, 8007d46 <_sbrk_r+0x1a>
 8007d44:	6023      	str	r3, [r4, #0]
 8007d46:	bd38      	pop	{r3, r4, r5, pc}
 8007d48:	20001f24 	.word	0x20001f24

08007d4c <memcpy>:
 8007d4c:	440a      	add	r2, r1
 8007d4e:	4291      	cmp	r1, r2
 8007d50:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d54:	d100      	bne.n	8007d58 <memcpy+0xc>
 8007d56:	4770      	bx	lr
 8007d58:	b510      	push	{r4, lr}
 8007d5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d62:	4291      	cmp	r1, r2
 8007d64:	d1f9      	bne.n	8007d5a <memcpy+0xe>
 8007d66:	bd10      	pop	{r4, pc}

08007d68 <_realloc_r>:
 8007d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d6c:	4680      	mov	r8, r0
 8007d6e:	4614      	mov	r4, r2
 8007d70:	460e      	mov	r6, r1
 8007d72:	b921      	cbnz	r1, 8007d7e <_realloc_r+0x16>
 8007d74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d78:	4611      	mov	r1, r2
 8007d7a:	f7ff bc49 	b.w	8007610 <_malloc_r>
 8007d7e:	b92a      	cbnz	r2, 8007d8c <_realloc_r+0x24>
 8007d80:	f7ff fbda 	bl	8007538 <_free_r>
 8007d84:	4625      	mov	r5, r4
 8007d86:	4628      	mov	r0, r5
 8007d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d8c:	f000 f81b 	bl	8007dc6 <_malloc_usable_size_r>
 8007d90:	4284      	cmp	r4, r0
 8007d92:	4607      	mov	r7, r0
 8007d94:	d802      	bhi.n	8007d9c <_realloc_r+0x34>
 8007d96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007d9a:	d812      	bhi.n	8007dc2 <_realloc_r+0x5a>
 8007d9c:	4621      	mov	r1, r4
 8007d9e:	4640      	mov	r0, r8
 8007da0:	f7ff fc36 	bl	8007610 <_malloc_r>
 8007da4:	4605      	mov	r5, r0
 8007da6:	2800      	cmp	r0, #0
 8007da8:	d0ed      	beq.n	8007d86 <_realloc_r+0x1e>
 8007daa:	42bc      	cmp	r4, r7
 8007dac:	4622      	mov	r2, r4
 8007dae:	4631      	mov	r1, r6
 8007db0:	bf28      	it	cs
 8007db2:	463a      	movcs	r2, r7
 8007db4:	f7ff ffca 	bl	8007d4c <memcpy>
 8007db8:	4631      	mov	r1, r6
 8007dba:	4640      	mov	r0, r8
 8007dbc:	f7ff fbbc 	bl	8007538 <_free_r>
 8007dc0:	e7e1      	b.n	8007d86 <_realloc_r+0x1e>
 8007dc2:	4635      	mov	r5, r6
 8007dc4:	e7df      	b.n	8007d86 <_realloc_r+0x1e>

08007dc6 <_malloc_usable_size_r>:
 8007dc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dca:	1f18      	subs	r0, r3, #4
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	bfbc      	itt	lt
 8007dd0:	580b      	ldrlt	r3, [r1, r0]
 8007dd2:	18c0      	addlt	r0, r0, r3
 8007dd4:	4770      	bx	lr
	...

08007dd8 <_init>:
 8007dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dda:	bf00      	nop
 8007ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dde:	bc08      	pop	{r3}
 8007de0:	469e      	mov	lr, r3
 8007de2:	4770      	bx	lr

08007de4 <_fini>:
 8007de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007de6:	bf00      	nop
 8007de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dea:	bc08      	pop	{r3}
 8007dec:	469e      	mov	lr, r3
 8007dee:	4770      	bx	lr
